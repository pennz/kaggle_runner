{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Generated doc website kaggle_runner \u00a4 Check main.py or test/test_coord.py for usage. It uses kaggle API to upload your script/notebook to kaggle servers and let the kernel run. And you will get running logs through message queue. AMQP \u00a4 AMQP is used for logging. Its license needs mention. Example \u00a4 Use this kaggle competition about Pneumothorax Segmentation as an example. To run the example, you will need a kaggle account and set the kaggle command line tool up. And you issues this command to let it run: # install kaggle_runner, which will pull kaggle command line tool as the dependency pip install kaggle_runner # put your kaggle API token to the right place cat > ~/.kaggle/kaggle.json <<EOF { \"username\": \"YOUR_KAGGLE_USER_NAME\", \"key\": \"YOUR_KAGGLE_API_ACCESS_TOKEN\", } EOF # kaggle_runner will use kaggle API to push the template kernel codes to kaggle server and wait message back python -m kaggle_runner A demo: #0 Left panel: tcpserver listen for reverse shells #1 Upper panel: Logs from interactive session to our tcpserver which receive logs #2 Second upper panel: AMQP logs received #3 Main panel: vim window #4 Right bottom panel: logged in reverse shell for commit session","title":"Overview"},{"location":"#kaggle_runner","text":"Check main.py or test/test_coord.py for usage. It uses kaggle API to upload your script/notebook to kaggle servers and let the kernel run. And you will get running logs through message queue.","title":"kaggle_runner"},{"location":"#amqp","text":"AMQP is used for logging. Its license needs mention.","title":"AMQP"},{"location":"#example","text":"Use this kaggle competition about Pneumothorax Segmentation as an example. To run the example, you will need a kaggle account and set the kaggle command line tool up. And you issues this command to let it run: # install kaggle_runner, which will pull kaggle command line tool as the dependency pip install kaggle_runner # put your kaggle API token to the right place cat > ~/.kaggle/kaggle.json <<EOF { \"username\": \"YOUR_KAGGLE_USER_NAME\", \"key\": \"YOUR_KAGGLE_API_ACCESS_TOKEN\", } EOF # kaggle_runner will use kaggle API to push the template kernel codes to kaggle server and wait message back python -m kaggle_runner A demo: #0 Left panel: tcpserver listen for reverse shells #1 Upper panel: Logs from interactive session to our tcpserver which receive logs #2 Second upper panel: AMQP logs received #3 Main panel: vim window #4 Right bottom panel: logged in reverse shell for commit session","title":"Example"},{"location":"CHANGELOG/","text":"","title":"CHANGELOG"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build kaggle_runner . Thank you! python | poetry | copier-poetry Direct dependencies \u00a4 bandit | beautifulsoup4 | black | colorama | coverage | failprint | flake8 | flake8-bandit | flake8-black | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-isort | flake8-tidy-imports | flake8-variables-names | git-changelog | ipython | isort | jinja2-cli | kaggle | mkdocs | mkdocs-material | mkdocstrings | mypy | parse | pip | pymdown-extensions | pytest | pytest-cov | pytest-sugar | pytest-xdist | python_logging_rabbitmq | pytkdocs | requests | slug | toml Indirect dependencies \u00a4 ansimarkup | apipkg | appdirs | appnope | atomicwrites | attrs | backcall | certifi | chardet | click | decorator | execnet | flake8-polyfill | future | gitdb | GitPython | idna | importlib-metadata | ipython-genutils | jedi | Jinja2 | joblib | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | more-itertools | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pexpect | pickleshare | pika | pluggy | prompt-toolkit | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | Pygments | pyparsing | pytest-forked | python-dateutil | python-logging-rabbitmq | python-slugify | PyYAML | regex | six | smmap | snowballstemmer | soupsieve | stevedore | termcolor | testfixtures | text-unidecode | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build kaggle_runner . Thank you! python | poetry | copier-poetry","title":"Credits"},{"location":"credits/#direct-dependencies","text":"bandit | beautifulsoup4 | black | colorama | coverage | failprint | flake8 | flake8-bandit | flake8-black | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-isort | flake8-tidy-imports | flake8-variables-names | git-changelog | ipython | isort | jinja2-cli | kaggle | mkdocs | mkdocs-material | mkdocstrings | mypy | parse | pip | pymdown-extensions | pytest | pytest-cov | pytest-sugar | pytest-xdist | python_logging_rabbitmq | pytkdocs | requests | slug | toml","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"ansimarkup | apipkg | appdirs | appnope | atomicwrites | attrs | backcall | certifi | chardet | click | decorator | execnet | flake8-polyfill | future | gitdb | GitPython | idna | importlib-metadata | ipython-genutils | jedi | Jinja2 | joblib | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | more-itertools | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pexpect | pickleshare | pika | pluggy | prompt-toolkit | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | Pygments | pyparsing | pytest-forked | python-dateutil | python-logging-rabbitmq | python-slugify | PyYAML | regex | six | smmap | snowballstemmer | soupsieve | stevedore | termcolor | testfixtures | text-unidecode | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | zipp More credits from the author","title":"Indirect dependencies"},{"location":"kaggle_runner/callbacks/","text":"\u00a4 CheckGrad \u00a4 on_backward_begin ( self , ** kwargs ) \u00a4 dict_keys(['epoch', 'iteration', 'num_batch', 'skip_validate', 'n_epochs', 'pbar', 'metrics', 'stop_training', 'last_input', 'last_target', 'train', 'stop_epoch', 'skip_step', 'skip_zero', 'skip_bwd', 'last_output', 'last_loss', 'smooth_loss']) Source code in kaggle_runner/callbacks.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def on_backward_begin ( self , ** kwargs : Any ) -> None : #print(kwargs.keys()) \"\"\"dict_keys(['epoch', 'iteration', 'num_batch', 'skip_validate', 'n_epochs', 'pbar', 'metrics', 'stop_training', 'last_input', 'last_target', 'train', 'stop_epoch', 'skip_step', 'skip_zero', 'skip_bwd', 'last_output', 'last_loss', 'smooth_loss']) \"\"\" pg = self . learn . opt . opt . param_groups #logger.debug(\"grad info: %s\", raw_opt) logger . debug ( f \"on_backward_begin lr: {pg[0]['lr']} \" ) logger . debug ( \"itr: %d , num_batch: %d , last loss: %f , smooth_loss: %f \" , kwargs [ 'iteration' ], kwargs [ 'num_batch' ], kwargs [ 'last_loss' ], kwargs [ 'smooth_loss' ]) self . final_scores . update ( kwargs [ 'last_target' ], kwargs [ 'last_output' ]) self . losses . update ( kwargs [ 'last_loss' ] . detach () . item (), self . batch_size ) logger . debug ( f \"loss_avg: {self.losses.avg:.5f} , lr_pg0:\" f \" {pg[0]['lr']} , lr_pg1: {pg[1]['lr']} final_score:\" f \" {self.final_scores.avg:.5f} , mc_score:\" f \" {self.final_scores.mc_avg:.5f} \" ) on_backward_end ( self , ** kwargs ) \u00a4 Called after backprop but before optimizer step. Useful for true weight decay in AdamW. Source code in kaggle_runner/callbacks.py 111 112 113 114 115 def on_backward_end ( self , ** kwargs : Any ) -> None : raw_opt = self . learn . opt . opt _check_grad ( raw_opt ) return { 'skip_step' : self . skip_loss_step } on_train_begin ( self , ** kwargs ) \u00a4 To initialize constants in the callback. Source code in kaggle_runner/callbacks.py 85 86 87 def on_train_begin ( self , ** kwargs : Any ) -> None : self . losses = AverageMeter () self . final_scores = RocAucMeter () RocAucEvaluation \u00a4 on_epoch_end ( self , epoch , logger =< Logger utils ( DEBUG ) > ) \u00a4 Called at the end of an epoch. Subclasses should override for any actions to run. This function should only be called during TRAIN mode. Parameters: Name Type Description Default epoch integer, index of epoch. required logs dict, metric results for this training epoch, and for the validation epoch if validation is performed. Validation result keys are prefixed with val_ . required Source code in kaggle_runner/callbacks.py 19 20 21 22 23 24 25 26 27 28 29 def on_epoch_end ( self , epoch , logger = logger ): if epoch % self . interval == 0 : y_pred = self . model . predict ( self . X_val , verbose = 0 ) if y_pred . size > self . y_val . size : y_pred = y_pred [:, 0 ] score = roc_auc_score ( self . y_val , y_pred ) print ( \" \\n ROC-AUC - epoch: {:d} - score: {:.6f} \" . format ( epoch + 1 , score )) logger . debug ( \" \\n ROC-AUC - epoch: {:d} - score: {:.6f} \" . format ( epoch + 1 , score ))","title":"callbacks"},{"location":"kaggle_runner/callbacks/#kaggle_runner.callbacks","text":"","title":"kaggle_runner.callbacks"},{"location":"kaggle_runner/callbacks/#kaggle_runner.callbacks.CheckGrad","text":"","title":"CheckGrad"},{"location":"kaggle_runner/callbacks/#kaggle_runner.callbacks.CheckGrad.on_backward_begin","text":"dict_keys(['epoch', 'iteration', 'num_batch', 'skip_validate', 'n_epochs', 'pbar', 'metrics', 'stop_training', 'last_input', 'last_target', 'train', 'stop_epoch', 'skip_step', 'skip_zero', 'skip_bwd', 'last_output', 'last_loss', 'smooth_loss']) Source code in kaggle_runner/callbacks.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def on_backward_begin ( self , ** kwargs : Any ) -> None : #print(kwargs.keys()) \"\"\"dict_keys(['epoch', 'iteration', 'num_batch', 'skip_validate', 'n_epochs', 'pbar', 'metrics', 'stop_training', 'last_input', 'last_target', 'train', 'stop_epoch', 'skip_step', 'skip_zero', 'skip_bwd', 'last_output', 'last_loss', 'smooth_loss']) \"\"\" pg = self . learn . opt . opt . param_groups #logger.debug(\"grad info: %s\", raw_opt) logger . debug ( f \"on_backward_begin lr: {pg[0]['lr']} \" ) logger . debug ( \"itr: %d , num_batch: %d , last loss: %f , smooth_loss: %f \" , kwargs [ 'iteration' ], kwargs [ 'num_batch' ], kwargs [ 'last_loss' ], kwargs [ 'smooth_loss' ]) self . final_scores . update ( kwargs [ 'last_target' ], kwargs [ 'last_output' ]) self . losses . update ( kwargs [ 'last_loss' ] . detach () . item (), self . batch_size ) logger . debug ( f \"loss_avg: {self.losses.avg:.5f} , lr_pg0:\" f \" {pg[0]['lr']} , lr_pg1: {pg[1]['lr']} final_score:\" f \" {self.final_scores.avg:.5f} , mc_score:\" f \" {self.final_scores.mc_avg:.5f} \" )","title":"on_backward_begin()"},{"location":"kaggle_runner/callbacks/#kaggle_runner.callbacks.CheckGrad.on_backward_end","text":"Called after backprop but before optimizer step. Useful for true weight decay in AdamW. Source code in kaggle_runner/callbacks.py 111 112 113 114 115 def on_backward_end ( self , ** kwargs : Any ) -> None : raw_opt = self . learn . opt . opt _check_grad ( raw_opt ) return { 'skip_step' : self . skip_loss_step }","title":"on_backward_end()"},{"location":"kaggle_runner/callbacks/#kaggle_runner.callbacks.CheckGrad.on_train_begin","text":"To initialize constants in the callback. Source code in kaggle_runner/callbacks.py 85 86 87 def on_train_begin ( self , ** kwargs : Any ) -> None : self . losses = AverageMeter () self . final_scores = RocAucMeter ()","title":"on_train_begin()"},{"location":"kaggle_runner/callbacks/#kaggle_runner.callbacks.RocAucEvaluation","text":"","title":"RocAucEvaluation"},{"location":"kaggle_runner/callbacks/#kaggle_runner.callbacks.RocAucEvaluation.on_epoch_end","text":"Called at the end of an epoch. Subclasses should override for any actions to run. This function should only be called during TRAIN mode. Parameters: Name Type Description Default epoch integer, index of epoch. required logs dict, metric results for this training epoch, and for the validation epoch if validation is performed. Validation result keys are prefixed with val_ . required Source code in kaggle_runner/callbacks.py 19 20 21 22 23 24 25 26 27 28 29 def on_epoch_end ( self , epoch , logger = logger ): if epoch % self . interval == 0 : y_pred = self . model . predict ( self . X_val , verbose = 0 ) if y_pred . size > self . y_val . size : y_pred = y_pred [:, 0 ] score = roc_auc_score ( self . y_val , y_pred ) print ( \" \\n ROC-AUC - epoch: {:d} - score: {:.6f} \" . format ( epoch + 1 , score )) logger . debug ( \" \\n ROC-AUC - epoch: {:d} - score: {:.6f} \" . format ( epoch + 1 , score ))","title":"on_epoch_end()"},{"location":"kaggle_runner/data_providers/","text":"\u00a4","title":"data_providers"},{"location":"kaggle_runner/data_providers/#kaggle_runner.data_providers","text":"","title":"kaggle_runner.data_providers"},{"location":"kaggle_runner/defaults/","text":"\u00a4","title":"defaults"},{"location":"kaggle_runner/defaults/#kaggle_runner.defaults","text":"","title":"kaggle_runner.defaults"},{"location":"kaggle_runner/logs/","text":"\u00a4 CSVLoggerBufferCustomized \u00a4 A LearnerCallback that saves history of metrics while training learn into CSV filename . on_train_begin ( self , ** kwargs ) \u00a4 Prepare file with metric names. Source code in kaggle_runner/logs.py 251 252 253 254 255 256 257 258 259 260 261 262 263 264 def on_train_begin ( self , ** kwargs ) -> None : \"Prepare file with metric names.\" self . path . parent . mkdir ( parents = True , exist_ok = True ) self . file = ( self . path . open ( \"a\" , buffering = self . buffer_type ) if self . append else self . path . open ( \"w\" , buffering = self . buffer_type ) ) self . file . write ( \",\" . join ( self . learn . recorder . names [: ( None if self . add_time else - 1 )]) + \" \\n \" ) NBatchProgBarLogger \u00a4 on_batch_end ( self , batch , logs = None ) \u00a4 A backwards compatibility alias for on_train_batch_end . Source code in kaggle_runner/logs.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def on_batch_end ( self , batch , logs = None ): logs = logs or {} batch_size = logs . get ( \"size\" , 0 ) # In case of distribution strategy we can potentially run multiple # steps at the same time, we should account for that in the `seen` # calculation. num_steps = logs . get ( \"num_steps\" , 1 ) if self . use_steps : self . batch_size = num_steps else : self . batch_size = batch_size * num_steps before_seen = self . seen self . seen += self . batch_size after_seen = self . seen for k in self . params [ \"metrics\" ]: if k in logs : self . log_values . append (( k , logs [ k ])) self . step_idx += 1 # Skip progbar update for the last batch; # will be handled by on_epoch_end. if self . early_stop : # only record for this batch, not the display. Should work loss = logs . get ( \"loss\" ) self . losses_sum_display += loss if self . step_idx % self . display_per_batches == 0 : if self . verbose and self . seen < self . target : self . progbar . update ( self . seen , self . log_values ) if self . early_stop : avg_loss_per_display = ( self . losses_sum_display / self . display_per_batches ) self . losses_sum_display = 0 # clear mannually self . losses [ self . display_idx % self . patience_displays ] = avg_loss_per_display # but it still SGD, variance still, it just smaller by factor of # display_per_batches display_info_start_step = self . step_idx - self . display_per_batches + 1 print ( f \" \\n mean(display): {avg_loss_per_display} , Step {display_info_start_step }( {before_seen} ) to {self.step_idx} ( {after_seen} ) for {self.display_idx} th display step\" ) self . display_idx += 1 # used in index, so +1 later if self . display_idx >= self . patience_displays : std = np . std ( self . losses ) # as SGD, always variance, so not a good way, need to learn from early stopping print ( f \"mean(over displays): {np.mean(self.losses)}, std: {std} for Display {self.display_idx-self.patience_displays} to {self.display_idx-1}\" ) if std < self . epsilon : self . stopped_step = self . step_idx self . model . stop_training = True print ( f \"Early Stop criterion met: std is {std} at Step\" f \" {self.step_idx} for {self.display_idx} th display\" \"steps\" ) on_train_begin ( self , logs = None ) \u00a4 Called at the beginning of training. Subclasses should override for any actions to run. Parameters: Name Type Description Default logs dict. Currently no data is passed to this argument for this method but that may change in the future. None Source code in kaggle_runner/logs.py 56 57 def on_train_begin ( self , logs = None ): self . epochs = self . params [ \"epochs\" ] on_train_end ( self , logs = None ) \u00a4 Called at the end of training. Subclasses should override for any actions to run. Parameters: Name Type Description Default logs dict. Currently no data is passed to this argument for this method but that may change in the future. None Source code in kaggle_runner/logs.py 127 128 129 def on_train_end ( self , logs = None ): if self . stopped_step > 0 and self . verbose > 0 : print ( \"Step %05d : early stopping\" % ( self . stopped_step + 1 )) SmoothedValue \u00a4 Track a series of values and provide access to smoothed values over a window or the global series average. synchronize_between_processes ( self ) \u00a4 Warning: does not synchronize the deque! Source code in kaggle_runner/logs.py 290 291 292 293 294 295 296 297 298 299 300 301 302 303 def synchronize_between_processes ( self ): \"\"\" Warning: does not synchronize the deque! \"\"\" if not is_dist_avail_and_initialized (): return t = torch . tensor ([ self . count , self . total ], dtype = torch . float64 , device = \"cuda\" ) dist . barrier () dist . all_reduce ( t ) t = t . tolist () self . count = int ( t [ 0 ]) self . total = t [ 1 ] metric_get_log ( phase , epoch , epoch_loss , meter , start ) \u00a4 logging the metrics at the end of an epoch Source code in kaggle_runner/logs.py 15 16 17 18 19 20 21 22 23 24 25 def metric_get_log ( phase , epoch , epoch_loss , meter , start ): \"\"\"logging the metrics at the end of an epoch\"\"\" dices , iou = meter . get_metrics () dice , dice_neg , dice_pos = dices print ( \"Loss: %0.4f | dice: %0.4f | dice_neg: %0.4f | dice_pos: %0.4f | IoU: %0.4f \" \" | epoch: %d | phase: %s \" % ( epoch_loss , dice , dice_neg , dice_pos , iou , epoch , phase ) ) return dice , iou","title":"logs"},{"location":"kaggle_runner/logs/#kaggle_runner.logs","text":"","title":"kaggle_runner.logs"},{"location":"kaggle_runner/logs/#kaggle_runner.logs.CSVLoggerBufferCustomized","text":"A LearnerCallback that saves history of metrics while training learn into CSV filename .","title":"CSVLoggerBufferCustomized"},{"location":"kaggle_runner/logs/#kaggle_runner.logs.CSVLoggerBufferCustomized.on_train_begin","text":"Prepare file with metric names. Source code in kaggle_runner/logs.py 251 252 253 254 255 256 257 258 259 260 261 262 263 264 def on_train_begin ( self , ** kwargs ) -> None : \"Prepare file with metric names.\" self . path . parent . mkdir ( parents = True , exist_ok = True ) self . file = ( self . path . open ( \"a\" , buffering = self . buffer_type ) if self . append else self . path . open ( \"w\" , buffering = self . buffer_type ) ) self . file . write ( \",\" . join ( self . learn . recorder . names [: ( None if self . add_time else - 1 )]) + \" \\n \" )","title":"on_train_begin()"},{"location":"kaggle_runner/logs/#kaggle_runner.logs.NBatchProgBarLogger","text":"","title":"NBatchProgBarLogger"},{"location":"kaggle_runner/logs/#kaggle_runner.logs.NBatchProgBarLogger.on_batch_end","text":"A backwards compatibility alias for on_train_batch_end . Source code in kaggle_runner/logs.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def on_batch_end ( self , batch , logs = None ): logs = logs or {} batch_size = logs . get ( \"size\" , 0 ) # In case of distribution strategy we can potentially run multiple # steps at the same time, we should account for that in the `seen` # calculation. num_steps = logs . get ( \"num_steps\" , 1 ) if self . use_steps : self . batch_size = num_steps else : self . batch_size = batch_size * num_steps before_seen = self . seen self . seen += self . batch_size after_seen = self . seen for k in self . params [ \"metrics\" ]: if k in logs : self . log_values . append (( k , logs [ k ])) self . step_idx += 1 # Skip progbar update for the last batch; # will be handled by on_epoch_end. if self . early_stop : # only record for this batch, not the display. Should work loss = logs . get ( \"loss\" ) self . losses_sum_display += loss if self . step_idx % self . display_per_batches == 0 : if self . verbose and self . seen < self . target : self . progbar . update ( self . seen , self . log_values ) if self . early_stop : avg_loss_per_display = ( self . losses_sum_display / self . display_per_batches ) self . losses_sum_display = 0 # clear mannually self . losses [ self . display_idx % self . patience_displays ] = avg_loss_per_display # but it still SGD, variance still, it just smaller by factor of # display_per_batches display_info_start_step = self . step_idx - self . display_per_batches + 1 print ( f \" \\n mean(display): {avg_loss_per_display} , Step {display_info_start_step }( {before_seen} ) to {self.step_idx} ( {after_seen} ) for {self.display_idx} th display step\" ) self . display_idx += 1 # used in index, so +1 later if self . display_idx >= self . patience_displays : std = np . std ( self . losses ) # as SGD, always variance, so not a good way, need to learn from early stopping print ( f \"mean(over displays): {np.mean(self.losses)}, std: {std} for Display {self.display_idx-self.patience_displays} to {self.display_idx-1}\" ) if std < self . epsilon : self . stopped_step = self . step_idx self . model . stop_training = True print ( f \"Early Stop criterion met: std is {std} at Step\" f \" {self.step_idx} for {self.display_idx} th display\" \"steps\" )","title":"on_batch_end()"},{"location":"kaggle_runner/logs/#kaggle_runner.logs.NBatchProgBarLogger.on_train_begin","text":"Called at the beginning of training. Subclasses should override for any actions to run. Parameters: Name Type Description Default logs dict. Currently no data is passed to this argument for this method but that may change in the future. None Source code in kaggle_runner/logs.py 56 57 def on_train_begin ( self , logs = None ): self . epochs = self . params [ \"epochs\" ]","title":"on_train_begin()"},{"location":"kaggle_runner/logs/#kaggle_runner.logs.NBatchProgBarLogger.on_train_end","text":"Called at the end of training. Subclasses should override for any actions to run. Parameters: Name Type Description Default logs dict. Currently no data is passed to this argument for this method but that may change in the future. None Source code in kaggle_runner/logs.py 127 128 129 def on_train_end ( self , logs = None ): if self . stopped_step > 0 and self . verbose > 0 : print ( \"Step %05d : early stopping\" % ( self . stopped_step + 1 ))","title":"on_train_end()"},{"location":"kaggle_runner/logs/#kaggle_runner.logs.SmoothedValue","text":"Track a series of values and provide access to smoothed values over a window or the global series average.","title":"SmoothedValue"},{"location":"kaggle_runner/logs/#kaggle_runner.logs.SmoothedValue.synchronize_between_processes","text":"Warning: does not synchronize the deque! Source code in kaggle_runner/logs.py 290 291 292 293 294 295 296 297 298 299 300 301 302 303 def synchronize_between_processes ( self ): \"\"\" Warning: does not synchronize the deque! \"\"\" if not is_dist_avail_and_initialized (): return t = torch . tensor ([ self . count , self . total ], dtype = torch . float64 , device = \"cuda\" ) dist . barrier () dist . all_reduce ( t ) t = t . tolist () self . count = int ( t [ 0 ]) self . total = t [ 1 ]","title":"synchronize_between_processes()"},{"location":"kaggle_runner/logs/#kaggle_runner.logs.metric_get_log","text":"logging the metrics at the end of an epoch Source code in kaggle_runner/logs.py 15 16 17 18 19 20 21 22 23 24 25 def metric_get_log ( phase , epoch , epoch_loss , meter , start ): \"\"\"logging the metrics at the end of an epoch\"\"\" dices , iou = meter . get_metrics () dice , dice_neg , dice_pos = dices print ( \"Loss: %0.4f | dice: %0.4f | dice_neg: %0.4f | dice_pos: %0.4f | IoU: %0.4f \" \" | epoch: %d | phase: %s \" % ( epoch_loss , dice , dice_neg , dice_pos , iou , epoch , phase ) ) return dice , iou","title":"metric_get_log()"},{"location":"kaggle_runner/losses/","text":"\u00a4 FocalLoss \u00a4 forward ( self , input , target ) \u00a4 Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in kaggle_runner/losses.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def forward ( self , input , target ): if not target . size () == input . size (): raise ValueError ( \"Target size ( {} ) must be the same as input size ( {} )\" . format ( target . size (), input . size () ) ) max_val = ( - input ) . clamp ( min = 0 ) loss = ( input - input * target + max_val + (( - max_val ) . exp () + ( - input - max_val ) . exp ()) . log () ) invprobs = F . logsigmoid ( - input * ( target * 2.0 - 1.0 )) loss = ( invprobs * self . gamma ) . exp () * loss return loss . mean () LabelSmoothing \u00a4 https://github.com/pytorch/pytorch/issues/7455#issuecomment-513062631 forward ( self , x , target ) \u00a4 Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in kaggle_runner/losses.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 def forward ( self , x , target ): if self . training : pred = x [:,: 2 ] . log_softmax ( dim = self . dim ) aux = x [:, 2 :] toxic_target = target [:,: 2 ] aux_target = target [:, 2 :] #with torch.no_grad(): # smooth_toxic = pred.data.clone() smooth_toxic = self . smoothing + ( 1 - self . smoothing * 2 ) * toxic_target # smooth_toxic.scatter_(1, toxic_target.data.unsqueeze(1), self.confidence) # only for 0 1 label, put confidence to related place # for 0-1, 0 -> 0.1, 1->0.9.(if 1), if zero. 0->0.9, 1->0.1 smooth_aux = self . smoothing + ( 1 - self . smoothing * 2 ) * aux_target # only for binary cross entropy, so for lable, it is (1-smooth)* aux_loss = torch . nn . functional . binary_cross_entropy_with_logits ( aux , smooth_aux ) return torch . mean ( torch . sum ( - smooth_toxic * pred , dim = self . dim )) + aux_loss / 3 else : return torch . nn . functional . cross_entropy ( x [:,: 2 ], target [:,: 2 ]) MixedLoss \u00a4 forward ( self , input , target ) \u00a4 Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in kaggle_runner/losses.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def forward ( self , input , target ): def dice_loss ( input , target ): input = torch . sigmoid ( input ) smooth = 1.0 iflat = input . view ( - 1 ) tflat = target . view ( - 1 ) intersection = ( iflat * tflat ) . sum () return ( 2.0 * intersection + smooth ) / ( iflat . sum () + tflat . sum () + smooth ) loss = self . alpha * self . focal ( input , target ) - torch . log ( dice_loss ( input , target ) ) return loss . mean () binary_crossentropy_with_focal ( y_true , y_pred , gamma = 0.0 , alpha = 0.5 , custom_weights_in_y_true = True ) \u00a4 https://arxiv.org/pdf/1708.02002.pdf $$ FL(p_t) = -(1-p_t)^{\\gamma}log(p_t) $$ $$ p_t=p: if: y=1$$ $$ p_t=1-p: otherwise$$ :param y_true: :param y_pred: :param gamma: make easier ones weights down :param alpha: weight for positive classes. default to 1- true positive cnts / all cnts, alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice\u03b1may be set by inverse class freqency or hyperparameter. :return: Source code in kaggle_runner/losses.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 def binary_crossentropy_with_focal ( y_true , y_pred , gamma = FOCAL_LOSS_GAMMA , alpha = ALPHA , custom_weights_in_y_true = True ): \"\"\" https://arxiv.org/pdf/1708.02002.pdf $$ FL(p_t) = -(1-p_t)^{\\gamma}log(p_t) $$ $$ p_t=p\\: if\\: y=1$$ $$ p_t=1-p\\: otherwise$$ :param y_true: :param y_pred: :param gamma: make easier ones weights down :param alpha: weight for positive classes. default to 1- true positive cnts / all cnts, alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice\u03b1may be set by inverse class freqency or hyperparameter. :return: \"\"\" # assert 0 <= alpha <= 1 and gamma >= 0 # hyper parameters, just use the one for binary? # alpha = 1. # maybe smaller one can help, as multi-class will make the error larger # gamma = 1.5 # for our problem, try different gamma # for binary_crossentropy, the implementation is in tensorflow/tensorflow/python/keras/backend.py # bce = target * alpha* (1-output+epsilon())**gamma * math_ops.log(output + epsilon()) # bce += (1 - target) *(1-alpha)* (output+epsilon())**gamma * math_ops.log(1 - output + epsilon()) # return -bce # binary cross entropy eps = tf . keras . backend . epsilon () if custom_weights_in_y_true : custom_weights = y_true [:, 1 : 2 ] y_true = y_true [:, : 1 ] if 1.0 - eps <= gamma <= 1.0 + eps : bce = alpha * math_ops . multiply ( 1.0 - y_pred , math_ops . multiply ( y_true , math_ops . log ( y_pred + eps )) ) bce += ( 1 - alpha ) * math_ops . multiply ( y_pred , math_ops . multiply ( ( 1.0 - y_true ), math_ops . log ( 1.0 - y_pred + eps )) ) elif 0.0 - eps <= gamma <= 0.0 + eps : bce = alpha * math_ops . multiply ( y_true , math_ops . log ( y_pred + eps )) bce += ( 1 - alpha ) * math_ops . multiply ( ( 1.0 - y_true ), math_ops . log ( 1.0 - y_pred + eps ) ) else : gamma_tensor = tf . broadcast_to ( tf . constant ( gamma ), tf . shape ( input = y_pred )) bce = alpha * math_ops . multiply ( math_ops . pow ( 1.0 - y_pred , gamma_tensor ), math_ops . multiply ( y_true , math_ops . log ( y_pred + eps )), ) bce += ( 1 - alpha ) * math_ops . multiply ( math_ops . pow ( y_pred , gamma_tensor ), math_ops . multiply ( ( 1.0 - y_true ), math_ops . log ( 1.0 - y_pred + eps )), ) if custom_weights_in_y_true : return math_ops . multiply ( - bce , custom_weights ) else : return - bce binary_crossentropy_with_focal_seasoned ( y_true , logit_pred , beta = 1.0 , gamma = 0.25 , alpha = 0.5 , custom_weights_in_y_true = True ) \u00a4 :param alpha:weight for positive classes loss . default to 1- true positive cnts / all cnts, alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice\u03b1may be set by inverse class freqency or hyperparameter. :param custom_weights_in_y_true: :return: Source code in kaggle_runner/losses.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def binary_crossentropy_with_focal_seasoned ( y_true , logit_pred , beta = FOCAL_LOSS_BETA_NEG_POS , gamma = FOCAL_LOSS_GAMMA_NEG_POS , alpha = ALPHA , custom_weights_in_y_true = True , ): \"\"\" :param alpha:weight for positive classes **loss**. default to 1- true positive cnts / all cnts, alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice\u03b1may be set by inverse class freqency or hyperparameter. :param custom_weights_in_y_true: :return: \"\"\" balanced = gamma * logit_pred + beta y_pred = math_ops . sigmoid ( balanced ) # only use gamma in this layer, easier to split out factor return binary_crossentropy_with_focal ( y_true , y_pred , gamma = 0 , alpha = alpha , custom_weights_in_y_true = custom_weights_in_y_true , ) toxic_custom_mimic_loss ( predictions , labels , subgroups , power = 5.0 , score_function =< function binary_cross_entropy_with_logits at 0x7fd3691ab598 > ) \u00a4 Just reference this https://www.kaggle.com/c/jigsaw-unintended-bias-in-toxicity-classification/discussion/103280 Source code in kaggle_runner/losses.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def toxic_custom_mimic_loss ( predictions , labels , subgroups , power = 5.0 , score_function = F . binary_cross_entropy_with_logits ): \"\"\" Just reference this https://www.kaggle.com/c/jigsaw-unintended-bias-in-toxicity-classification/discussion/103280 \"\"\" subgroup_positive_mask = subgroups & ( labels . unsqueeze ( - 1 ) >= 0.5 ) subgroup_negative_mask = subgroups & ~ ( labels . unsqueeze ( - 1 ) >= 0.5 ) background_positive_mask = ~ subgroups & ( labels . unsqueeze ( - 1 ) >= 0.5 ) background_negative_mask = ~ subgroups & ~ ( labels . unsqueeze ( - 1 ) >= 0.5 ) bpsn_mask = ( background_positive_mask | subgroup_negative_mask ) . float () bnsp_mask = ( background_negative_mask | subgroup_positive_mask ) . float () subgroups = subgroups . float () bce = score_function ( predictions , labels , reduction = \"none\" ) sb = ( bce . unsqueeze ( - 1 ) * subgroups ) . sum ( 0 ) . div ( subgroups . sum ( 0 ) . clamp ( 1. )) . pow ( power ) . mea () . pow ( 1 / power ) bpsn = ( bce . unsqueeze ( - 1 ) * bpsn_mask ) . sum ( 0 ) . div ( bpsn_mask . sum ( 0 ) . clamp ( 1. )) . pow ( power ) . mean () . pow ( 1 / power ) bnsp = ( bce . unsqueeze ( - 1 ) * bnsp_mask ) . sum ( 0 ) . div ( bnsp_mask . sum ( 0 ) . clamp ( 1. )) . pow ( power ) . mean () . pow ( 1 / power ) loss = ( bce . mean () + sb + bpsn + bnsp ) / 4 return loss","title":"losses"},{"location":"kaggle_runner/losses/#kaggle_runner.losses","text":"","title":"kaggle_runner.losses"},{"location":"kaggle_runner/losses/#kaggle_runner.losses.FocalLoss","text":"","title":"FocalLoss"},{"location":"kaggle_runner/losses/#kaggle_runner.losses.FocalLoss.forward","text":"Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in kaggle_runner/losses.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def forward ( self , input , target ): if not target . size () == input . size (): raise ValueError ( \"Target size ( {} ) must be the same as input size ( {} )\" . format ( target . size (), input . size () ) ) max_val = ( - input ) . clamp ( min = 0 ) loss = ( input - input * target + max_val + (( - max_val ) . exp () + ( - input - max_val ) . exp ()) . log () ) invprobs = F . logsigmoid ( - input * ( target * 2.0 - 1.0 )) loss = ( invprobs * self . gamma ) . exp () * loss return loss . mean ()","title":"forward()"},{"location":"kaggle_runner/losses/#kaggle_runner.losses.LabelSmoothing","text":"https://github.com/pytorch/pytorch/issues/7455#issuecomment-513062631","title":"LabelSmoothing"},{"location":"kaggle_runner/losses/#kaggle_runner.losses.LabelSmoothing.forward","text":"Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in kaggle_runner/losses.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 def forward ( self , x , target ): if self . training : pred = x [:,: 2 ] . log_softmax ( dim = self . dim ) aux = x [:, 2 :] toxic_target = target [:,: 2 ] aux_target = target [:, 2 :] #with torch.no_grad(): # smooth_toxic = pred.data.clone() smooth_toxic = self . smoothing + ( 1 - self . smoothing * 2 ) * toxic_target # smooth_toxic.scatter_(1, toxic_target.data.unsqueeze(1), self.confidence) # only for 0 1 label, put confidence to related place # for 0-1, 0 -> 0.1, 1->0.9.(if 1), if zero. 0->0.9, 1->0.1 smooth_aux = self . smoothing + ( 1 - self . smoothing * 2 ) * aux_target # only for binary cross entropy, so for lable, it is (1-smooth)* aux_loss = torch . nn . functional . binary_cross_entropy_with_logits ( aux , smooth_aux ) return torch . mean ( torch . sum ( - smooth_toxic * pred , dim = self . dim )) + aux_loss / 3 else : return torch . nn . functional . cross_entropy ( x [:,: 2 ], target [:,: 2 ])","title":"forward()"},{"location":"kaggle_runner/losses/#kaggle_runner.losses.MixedLoss","text":"","title":"MixedLoss"},{"location":"kaggle_runner/losses/#kaggle_runner.losses.MixedLoss.forward","text":"Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in kaggle_runner/losses.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 def forward ( self , input , target ): def dice_loss ( input , target ): input = torch . sigmoid ( input ) smooth = 1.0 iflat = input . view ( - 1 ) tflat = target . view ( - 1 ) intersection = ( iflat * tflat ) . sum () return ( 2.0 * intersection + smooth ) / ( iflat . sum () + tflat . sum () + smooth ) loss = self . alpha * self . focal ( input , target ) - torch . log ( dice_loss ( input , target ) ) return loss . mean ()","title":"forward()"},{"location":"kaggle_runner/losses/#kaggle_runner.losses.binary_crossentropy_with_focal","text":"https://arxiv.org/pdf/1708.02002.pdf $$ FL(p_t) = -(1-p_t)^{\\gamma}log(p_t) $$ $$ p_t=p: if: y=1$$ $$ p_t=1-p: otherwise$$ :param y_true: :param y_pred: :param gamma: make easier ones weights down :param alpha: weight for positive classes. default to 1- true positive cnts / all cnts, alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice\u03b1may be set by inverse class freqency or hyperparameter. :return: Source code in kaggle_runner/losses.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 def binary_crossentropy_with_focal ( y_true , y_pred , gamma = FOCAL_LOSS_GAMMA , alpha = ALPHA , custom_weights_in_y_true = True ): \"\"\" https://arxiv.org/pdf/1708.02002.pdf $$ FL(p_t) = -(1-p_t)^{\\gamma}log(p_t) $$ $$ p_t=p\\: if\\: y=1$$ $$ p_t=1-p\\: otherwise$$ :param y_true: :param y_pred: :param gamma: make easier ones weights down :param alpha: weight for positive classes. default to 1- true positive cnts / all cnts, alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice\u03b1may be set by inverse class freqency or hyperparameter. :return: \"\"\" # assert 0 <= alpha <= 1 and gamma >= 0 # hyper parameters, just use the one for binary? # alpha = 1. # maybe smaller one can help, as multi-class will make the error larger # gamma = 1.5 # for our problem, try different gamma # for binary_crossentropy, the implementation is in tensorflow/tensorflow/python/keras/backend.py # bce = target * alpha* (1-output+epsilon())**gamma * math_ops.log(output + epsilon()) # bce += (1 - target) *(1-alpha)* (output+epsilon())**gamma * math_ops.log(1 - output + epsilon()) # return -bce # binary cross entropy eps = tf . keras . backend . epsilon () if custom_weights_in_y_true : custom_weights = y_true [:, 1 : 2 ] y_true = y_true [:, : 1 ] if 1.0 - eps <= gamma <= 1.0 + eps : bce = alpha * math_ops . multiply ( 1.0 - y_pred , math_ops . multiply ( y_true , math_ops . log ( y_pred + eps )) ) bce += ( 1 - alpha ) * math_ops . multiply ( y_pred , math_ops . multiply ( ( 1.0 - y_true ), math_ops . log ( 1.0 - y_pred + eps )) ) elif 0.0 - eps <= gamma <= 0.0 + eps : bce = alpha * math_ops . multiply ( y_true , math_ops . log ( y_pred + eps )) bce += ( 1 - alpha ) * math_ops . multiply ( ( 1.0 - y_true ), math_ops . log ( 1.0 - y_pred + eps ) ) else : gamma_tensor = tf . broadcast_to ( tf . constant ( gamma ), tf . shape ( input = y_pred )) bce = alpha * math_ops . multiply ( math_ops . pow ( 1.0 - y_pred , gamma_tensor ), math_ops . multiply ( y_true , math_ops . log ( y_pred + eps )), ) bce += ( 1 - alpha ) * math_ops . multiply ( math_ops . pow ( y_pred , gamma_tensor ), math_ops . multiply ( ( 1.0 - y_true ), math_ops . log ( 1.0 - y_pred + eps )), ) if custom_weights_in_y_true : return math_ops . multiply ( - bce , custom_weights ) else : return - bce","title":"binary_crossentropy_with_focal()"},{"location":"kaggle_runner/losses/#kaggle_runner.losses.binary_crossentropy_with_focal_seasoned","text":":param alpha:weight for positive classes loss . default to 1- true positive cnts / all cnts, alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice\u03b1may be set by inverse class freqency or hyperparameter. :param custom_weights_in_y_true: :return: Source code in kaggle_runner/losses.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def binary_crossentropy_with_focal_seasoned ( y_true , logit_pred , beta = FOCAL_LOSS_BETA_NEG_POS , gamma = FOCAL_LOSS_GAMMA_NEG_POS , alpha = ALPHA , custom_weights_in_y_true = True , ): \"\"\" :param alpha:weight for positive classes **loss**. default to 1- true positive cnts / all cnts, alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice\u03b1may be set by inverse class freqency or hyperparameter. :param custom_weights_in_y_true: :return: \"\"\" balanced = gamma * logit_pred + beta y_pred = math_ops . sigmoid ( balanced ) # only use gamma in this layer, easier to split out factor return binary_crossentropy_with_focal ( y_true , y_pred , gamma = 0 , alpha = alpha , custom_weights_in_y_true = custom_weights_in_y_true , )","title":"binary_crossentropy_with_focal_seasoned()"},{"location":"kaggle_runner/losses/#kaggle_runner.losses.toxic_custom_mimic_loss","text":"Just reference this https://www.kaggle.com/c/jigsaw-unintended-bias-in-toxicity-classification/discussion/103280 Source code in kaggle_runner/losses.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def toxic_custom_mimic_loss ( predictions , labels , subgroups , power = 5.0 , score_function = F . binary_cross_entropy_with_logits ): \"\"\" Just reference this https://www.kaggle.com/c/jigsaw-unintended-bias-in-toxicity-classification/discussion/103280 \"\"\" subgroup_positive_mask = subgroups & ( labels . unsqueeze ( - 1 ) >= 0.5 ) subgroup_negative_mask = subgroups & ~ ( labels . unsqueeze ( - 1 ) >= 0.5 ) background_positive_mask = ~ subgroups & ( labels . unsqueeze ( - 1 ) >= 0.5 ) background_negative_mask = ~ subgroups & ~ ( labels . unsqueeze ( - 1 ) >= 0.5 ) bpsn_mask = ( background_positive_mask | subgroup_negative_mask ) . float () bnsp_mask = ( background_negative_mask | subgroup_positive_mask ) . float () subgroups = subgroups . float () bce = score_function ( predictions , labels , reduction = \"none\" ) sb = ( bce . unsqueeze ( - 1 ) * subgroups ) . sum ( 0 ) . div ( subgroups . sum ( 0 ) . clamp ( 1. )) . pow ( power ) . mea () . pow ( 1 / power ) bpsn = ( bce . unsqueeze ( - 1 ) * bpsn_mask ) . sum ( 0 ) . div ( bpsn_mask . sum ( 0 ) . clamp ( 1. )) . pow ( power ) . mean () . pow ( 1 / power ) bnsp = ( bce . unsqueeze ( - 1 ) * bnsp_mask ) . sum ( 0 ) . div ( bnsp_mask . sum ( 0 ) . clamp ( 1. )) . pow ( power ) . mean () . pow ( 1 / power ) loss = ( bce . mean () + sb + bpsn + bnsp ) / 4 return loss","title":"toxic_custom_mimic_loss()"},{"location":"kaggle_runner/optimizers/","text":"\u00a4 EarlyStopping \u00a4 EarlyStop for pytorch refer to https://gist.github.com/stefanonardo/693d96ceb2f531fa05db530f3e21517d TODO check if fastai has buildin support for this RAdam \u00a4 step ( self , closure = None ) \u00a4 Performs a single optimization step (parameter update). Parameters: Name Type Description Default closure callable A closure that reevaluates the model and returns the loss. Optional for most optimizers. None Source code in kaggle_runner/optimizers.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def step ( self , closure = None ): loss = None if closure is not None : loss = closure () for group in self . param_groups : for p in group [ \"params\" ]: if p . grad is None : continue grad = p . grad . data . float () if grad . is_sparse : raise RuntimeError ( \"RAdam does not support sparse gradients\" ) p_data_fp32 = p . data . float () state = self . state [ p ] if len ( state ) == 0 : state [ \"step\" ] = 0 state [ \"exp_avg\" ] = torch . zeros_like ( p_data_fp32 ) state [ \"exp_avg_sq\" ] = torch . zeros_like ( p_data_fp32 ) else : state [ \"exp_avg\" ] = state [ \"exp_avg\" ] . type_as ( p_data_fp32 ) state [ \"exp_avg_sq\" ] = state [ \"exp_avg_sq\" ] . type_as ( p_data_fp32 ) exp_avg , exp_avg_sq = state [ \"exp_avg\" ], state [ \"exp_avg_sq\" ] beta1 , beta2 = group [ \"betas\" ] exp_avg_sq . mul_ ( beta2 ) . addcmul_ ( 1 - beta2 , grad , grad ) exp_avg . mul_ ( beta1 ) . add_ ( 1 - beta1 , grad ) state [ \"step\" ] += 1 buffered = self . buffer [ int ( state [ \"step\" ] % 10 )] if state [ \"step\" ] == buffered [ 0 ]: N_sma , step_size = buffered [ 1 ], buffered [ 2 ] else : buffered [ 0 ] = state [ \"step\" ] beta2_t = beta2 ** state [ \"step\" ] N_sma_max = 2 / ( 1 - beta2 ) - 1 N_sma = N_sma_max - 2 * state [ \"step\" ] * beta2_t / ( 1 - beta2_t ) buffered [ 1 ] = N_sma # more conservative since it's an approximated value if N_sma >= 5 : step_size = ( group [ \"lr\" ] * math . sqrt ( ( 1 - beta2_t ) * ( N_sma - 4 ) / ( N_sma_max - 4 ) * ( N_sma - 2 ) / N_sma * N_sma_max / ( N_sma_max - 2 ) ) / ( 1 - beta1 ** state [ \"step\" ]) ) else : step_size = group [ \"lr\" ] / ( 1 - beta1 ** state [ \"step\" ]) buffered [ 2 ] = step_size if group [ \"weight_decay\" ] != 0 : p_data_fp32 . add_ ( - group [ \"weight_decay\" ] * group [ \"lr\" ], p_data_fp32 ) # more conservative since it's an approximated value if N_sma >= 5 : denom = exp_avg_sq . sqrt () . add_ ( group [ \"eps\" ]) p_data_fp32 . addcdiv_ ( - step_size , exp_avg , denom ) else : p_data_fp32 . add_ ( - step_size , exp_avg ) p . data . copy_ ( p_data_fp32 ) return loss","title":"optimizers"},{"location":"kaggle_runner/optimizers/#kaggle_runner.optimizers","text":"","title":"kaggle_runner.optimizers"},{"location":"kaggle_runner/optimizers/#kaggle_runner.optimizers.EarlyStopping","text":"EarlyStop for pytorch refer to https://gist.github.com/stefanonardo/693d96ceb2f531fa05db530f3e21517d TODO check if fastai has buildin support for this","title":"EarlyStopping"},{"location":"kaggle_runner/optimizers/#kaggle_runner.optimizers.RAdam","text":"","title":"RAdam"},{"location":"kaggle_runner/optimizers/#kaggle_runner.optimizers.RAdam.step","text":"Performs a single optimization step (parameter update). Parameters: Name Type Description Default closure callable A closure that reevaluates the model and returns the loss. Optional for most optimizers. None Source code in kaggle_runner/optimizers.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 def step ( self , closure = None ): loss = None if closure is not None : loss = closure () for group in self . param_groups : for p in group [ \"params\" ]: if p . grad is None : continue grad = p . grad . data . float () if grad . is_sparse : raise RuntimeError ( \"RAdam does not support sparse gradients\" ) p_data_fp32 = p . data . float () state = self . state [ p ] if len ( state ) == 0 : state [ \"step\" ] = 0 state [ \"exp_avg\" ] = torch . zeros_like ( p_data_fp32 ) state [ \"exp_avg_sq\" ] = torch . zeros_like ( p_data_fp32 ) else : state [ \"exp_avg\" ] = state [ \"exp_avg\" ] . type_as ( p_data_fp32 ) state [ \"exp_avg_sq\" ] = state [ \"exp_avg_sq\" ] . type_as ( p_data_fp32 ) exp_avg , exp_avg_sq = state [ \"exp_avg\" ], state [ \"exp_avg_sq\" ] beta1 , beta2 = group [ \"betas\" ] exp_avg_sq . mul_ ( beta2 ) . addcmul_ ( 1 - beta2 , grad , grad ) exp_avg . mul_ ( beta1 ) . add_ ( 1 - beta1 , grad ) state [ \"step\" ] += 1 buffered = self . buffer [ int ( state [ \"step\" ] % 10 )] if state [ \"step\" ] == buffered [ 0 ]: N_sma , step_size = buffered [ 1 ], buffered [ 2 ] else : buffered [ 0 ] = state [ \"step\" ] beta2_t = beta2 ** state [ \"step\" ] N_sma_max = 2 / ( 1 - beta2 ) - 1 N_sma = N_sma_max - 2 * state [ \"step\" ] * beta2_t / ( 1 - beta2_t ) buffered [ 1 ] = N_sma # more conservative since it's an approximated value if N_sma >= 5 : step_size = ( group [ \"lr\" ] * math . sqrt ( ( 1 - beta2_t ) * ( N_sma - 4 ) / ( N_sma_max - 4 ) * ( N_sma - 2 ) / N_sma * N_sma_max / ( N_sma_max - 2 ) ) / ( 1 - beta1 ** state [ \"step\" ]) ) else : step_size = group [ \"lr\" ] / ( 1 - beta1 ** state [ \"step\" ]) buffered [ 2 ] = step_size if group [ \"weight_decay\" ] != 0 : p_data_fp32 . add_ ( - group [ \"weight_decay\" ] * group [ \"lr\" ], p_data_fp32 ) # more conservative since it's an approximated value if N_sma >= 5 : denom = exp_avg_sq . sqrt () . add_ ( group [ \"eps\" ]) p_data_fp32 . addcdiv_ ( - step_size , exp_avg , denom ) else : p_data_fp32 . add_ ( - step_size , exp_avg ) p . data . copy_ ( p_data_fp32 ) return loss","title":"step()"},{"location":"kaggle_runner/plots/","text":"\u00a4","title":"plots"},{"location":"kaggle_runner/plots/#kaggle_runner.plots","text":"","title":"kaggle_runner.plots"},{"location":"kaggle_runner/post_processers/","text":"\u00a4","title":"post_processers"},{"location":"kaggle_runner/post_processers/#kaggle_runner.post_processers","text":"","title":"kaggle_runner.post_processers"},{"location":"kaggle_runner/predictors/","text":"\u00a4","title":"predictors"},{"location":"kaggle_runner/predictors/#kaggle_runner.predictors","text":"","title":"kaggle_runner.predictors"},{"location":"kaggle_runner/datasets/bert/","text":"\u00a4","title":"bert.py"},{"location":"kaggle_runner/datasets/bert/#kaggle_runner.datasets.bert","text":"","title":"kaggle_runner.datasets.bert"},{"location":"kaggle_runner/datasets/coders/","text":"\u00a4 compute_iou_batch ( outputs , labels , classes = None ) \u00a4 computes mean iou for a batch of ground truth masks and predicted masks Source code in kaggle_runner/datasets/coders.py 51 52 53 54 55 56 57 58 59 def compute_iou_batch ( outputs , labels , classes = None ): \"\"\"computes mean iou for a batch of ground truth masks and predicted masks\"\"\" ious = [] preds = np . copy ( outputs ) # copy is imp labels = np . array ( labels ) # tensor to np for pred , label in zip ( preds , labels ): ious . append ( np . nanmean ( compute_ious ( pred , label , classes ))) iou = np . nanmean ( ious ) return iou compute_ious ( pred , label , classes , ignore_index = 255 , only_present = True ) \u00a4 computes iou for one ground truth mask and predicted mask Source code in kaggle_runner/datasets/coders.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def compute_ious ( pred , label , classes , ignore_index = 255 , only_present = True ): \"\"\"computes iou for one ground truth mask and predicted mask\"\"\" pred [ label == ignore_index ] = 0 ious = [] for c in classes : label_c = label == c if only_present and np . sum ( label_c ) == 0 : ious . append ( np . nan ) continue pred_c = pred == c intersection = np . logical_and ( pred_c , label_c ) . sum () union = np . logical_or ( pred_c , label_c ) . sum () if union != 0 : ious . append ( intersection / union ) return ious if ious else [ 1 ]","title":"coders.py"},{"location":"kaggle_runner/datasets/coders/#kaggle_runner.datasets.coders","text":"","title":"kaggle_runner.datasets.coders"},{"location":"kaggle_runner/datasets/coders/#kaggle_runner.datasets.coders.compute_iou_batch","text":"computes mean iou for a batch of ground truth masks and predicted masks Source code in kaggle_runner/datasets/coders.py 51 52 53 54 55 56 57 58 59 def compute_iou_batch ( outputs , labels , classes = None ): \"\"\"computes mean iou for a batch of ground truth masks and predicted masks\"\"\" ious = [] preds = np . copy ( outputs ) # copy is imp labels = np . array ( labels ) # tensor to np for pred , label in zip ( preds , labels ): ious . append ( np . nanmean ( compute_ious ( pred , label , classes ))) iou = np . nanmean ( ious ) return iou","title":"compute_iou_batch()"},{"location":"kaggle_runner/datasets/coders/#kaggle_runner.datasets.coders.compute_ious","text":"computes iou for one ground truth mask and predicted mask Source code in kaggle_runner/datasets/coders.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def compute_ious ( pred , label , classes , ignore_index = 255 , only_present = True ): \"\"\"computes iou for one ground truth mask and predicted mask\"\"\" pred [ label == ignore_index ] = 0 ious = [] for c in classes : label_c = label == c if only_present and np . sum ( label_c ) == 0 : ious . append ( np . nan ) continue pred_c = pred == c intersection = np . logical_and ( pred_c , label_c ) . sum () union = np . logical_or ( pred_c , label_c ) . sum () if union != 0 : ious . append ( intersection / union ) return ious if ious else [ 1 ]","title":"compute_ious()"},{"location":"kaggle_runner/datasets/data_handlers/","text":"\u00a4 PS_TF_DataHandler \u00a4 eval_input_fn ( features , labels , batch_size , split_id , n_splits = 10 ) staticmethod \u00a4 An input function for evaluation or prediction Source code in kaggle_runner/datasets/data_handlers.py 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 @staticmethod def eval_input_fn ( features , labels , batch_size , split_id , n_splits = 10 ): \"\"\"An input function for evaluation or prediction\"\"\" assert split_id >= 0 and n_splits > 1 and split_id < n_splits if labels is None : # No labels, use only features. inputs = features else : inputs = ( features , labels ) # Convert the inputs to a Dataset. ds = tf . data . Dataset . from_tensor_slices ( inputs ) ds = ds . shard ( n_splits , split_id ) # Batch the examples assert batch_size is not None , \"batch_size must not be None\" ds = ds . batch ( batch_size ) # Return the dataset. return ds load_data ( train_path , test_path ) staticmethod \u00a4 Returns the iris dataset as (train_x, train_y), (test_x, test_y). Source code in kaggle_runner/datasets/data_handlers.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 @staticmethod def load_data ( train_path , test_path ): \"\"\"Returns the iris dataset as (train_x, train_y), (test_x, test_y).\"\"\" # train_path, test_path = maybe_download() # here the test is really no lable we need to do CV in train part train_X = pickle . load ( open ( train_path , \"rb\" )) # (None, 2048) # (None, 2048) 2048 features from xception net to_predict_X = pickle . load ( open ( test_path , \"rb\" )) try : labels = pd . read_csv ( os . path . join ( DATASET_DIR , \"labels.csv\" )) except FileNotFoundError : labels = pd . read_csv ( os . path . join ( DATASET_DIR2 , \"labels.csv\" )) labels = labels [ \"breed\" ] . values . tolist () # for all training data global SPECIES SPECIES = sorted ( list ( set ( labels ))) _label_id_map = dict (( name , index ) for index , name in enumerate ( SPECIES )) train_y = [ _label_id_map [ label ] for label in labels ] return ( train_X , train_y ), to_predict_X predict_input_fn ( features , batch_size ) staticmethod \u00a4 An input function for evaluation or prediction Source code in kaggle_runner/datasets/data_handlers.py 339 340 341 342 343 344 345 346 347 348 349 350 351 @staticmethod def predict_input_fn ( features , batch_size ): \"\"\"An input function for evaluation or prediction\"\"\" inputs = features # Convert the inputs to a Dataset. ds = tf . data . Dataset . from_tensor_slices ( inputs ) # Batch the examples assert batch_size is not None , \"batch_size must not be None\" ds = ds . batch ( batch_size ) # Return the dataset. return ds serialize_PS_example ( feature0 , feature1 ) staticmethod \u00a4 NOT WORKING... don't know why Creates a tf.Example message ready to be written to a file. Source code in kaggle_runner/datasets/data_handlers.py 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 @staticmethod def serialize_PS_example ( feature0 , feature1 ): \"\"\" NOT WORKING... don't know why Creates a tf.Example message ready to be written to a file. \"\"\" # Create a dictionary mapping the feature name to the # tf.Example-compatible data type. assert feature0 . shape [ 0 ] == 1 and feature0 . shape [ 1 ] == 128 assert ( feature0 . shape [ 0 ] == feature1 . shape [ 0 ] and feature0 . shape [ 1 ] == feature1 . shape [ 1 ] ) f0 = tf . reshape ( feature0 , [ - 1 ]) f1 = tf . reshape ( feature1 , [ - 1 ]) feature = { \"image\" : _int64_feature_from_list ( f0 ), \"mask\" : _int64_feature_from_list ( f1 ), } # Create a Features message using tf.train.Example. logger . debug ( \"in transforming to tf example proto\" ) example_proto = tf . train . Example ( features = tf . train . Features ( feature = feature )) logger . debug ( \"after transforming one feature to tf example proto\" ) return example_proto . SerializeToString () train_input_fn ( features , labels , batch_size , split_id =- 1 , n_splits = 10 , cv = True ) staticmethod \u00a4 An input function for training Source code in kaggle_runner/datasets/data_handlers.py 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 @staticmethod # for these, we will need to extract all the points before: def train_input_fn ( features , labels , batch_size , split_id =- 1 , n_splits = 10 , cv = True ): \"\"\"An input function for training\"\"\" # read from the tfrecord file (save the extracted ones)(read the data) ds = tf . data . Dataset . from_tensor_slices (( features , labels )) if cv : assert split_id >= 0 and n_splits > 1 and split_id < n_splits ds = [ ds . shard ( n_splits , i ) for i in range ( n_splits )] shards_cross = [ ds [ val_id ] for val_id in range ( n_splits ) if val_id != split_id ] s = shards_cross [ 0 ] for t in shards_cross [ 1 :]: s = s . concatenate ( t ) # just memory is not enough ... ds = s . shuffle ( buffer_size = int ( len ( labels ) * ( n_splits - 1 ) / n_splits )) else : ds = ds . shuffle ( buffer_size = len ( labels )) # after shuffle, we do cross validtation split # taken from Dan, https://stackoverflow.com/questions/39748660/how-to-perform-k-fold-cross-validation-with-tensorflow # will need to append id, then remove the id? # -> no need, we just split to 5 shards, then rearrange these shards ds = ds . repeat () # Batch the examples assert batch_size is not None , \"batch_size must not be None\" # Return the dataset. return ds . batch ( batch_size ) . prefetch ( 1 )","title":"data_handlers.py"},{"location":"kaggle_runner/datasets/data_handlers/#kaggle_runner.datasets.data_handlers","text":"","title":"kaggle_runner.datasets.data_handlers"},{"location":"kaggle_runner/datasets/data_handlers/#kaggle_runner.datasets.data_handlers.PS_TF_DataHandler","text":"","title":"PS_TF_DataHandler"},{"location":"kaggle_runner/datasets/data_handlers/#kaggle_runner.datasets.data_handlers.PS_TF_DataHandler.eval_input_fn","text":"An input function for evaluation or prediction Source code in kaggle_runner/datasets/data_handlers.py 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 @staticmethod def eval_input_fn ( features , labels , batch_size , split_id , n_splits = 10 ): \"\"\"An input function for evaluation or prediction\"\"\" assert split_id >= 0 and n_splits > 1 and split_id < n_splits if labels is None : # No labels, use only features. inputs = features else : inputs = ( features , labels ) # Convert the inputs to a Dataset. ds = tf . data . Dataset . from_tensor_slices ( inputs ) ds = ds . shard ( n_splits , split_id ) # Batch the examples assert batch_size is not None , \"batch_size must not be None\" ds = ds . batch ( batch_size ) # Return the dataset. return ds","title":"eval_input_fn()"},{"location":"kaggle_runner/datasets/data_handlers/#kaggle_runner.datasets.data_handlers.PS_TF_DataHandler.load_data","text":"Returns the iris dataset as (train_x, train_y), (test_x, test_y). Source code in kaggle_runner/datasets/data_handlers.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 @staticmethod def load_data ( train_path , test_path ): \"\"\"Returns the iris dataset as (train_x, train_y), (test_x, test_y).\"\"\" # train_path, test_path = maybe_download() # here the test is really no lable we need to do CV in train part train_X = pickle . load ( open ( train_path , \"rb\" )) # (None, 2048) # (None, 2048) 2048 features from xception net to_predict_X = pickle . load ( open ( test_path , \"rb\" )) try : labels = pd . read_csv ( os . path . join ( DATASET_DIR , \"labels.csv\" )) except FileNotFoundError : labels = pd . read_csv ( os . path . join ( DATASET_DIR2 , \"labels.csv\" )) labels = labels [ \"breed\" ] . values . tolist () # for all training data global SPECIES SPECIES = sorted ( list ( set ( labels ))) _label_id_map = dict (( name , index ) for index , name in enumerate ( SPECIES )) train_y = [ _label_id_map [ label ] for label in labels ] return ( train_X , train_y ), to_predict_X","title":"load_data()"},{"location":"kaggle_runner/datasets/data_handlers/#kaggle_runner.datasets.data_handlers.PS_TF_DataHandler.predict_input_fn","text":"An input function for evaluation or prediction Source code in kaggle_runner/datasets/data_handlers.py 339 340 341 342 343 344 345 346 347 348 349 350 351 @staticmethod def predict_input_fn ( features , batch_size ): \"\"\"An input function for evaluation or prediction\"\"\" inputs = features # Convert the inputs to a Dataset. ds = tf . data . Dataset . from_tensor_slices ( inputs ) # Batch the examples assert batch_size is not None , \"batch_size must not be None\" ds = ds . batch ( batch_size ) # Return the dataset. return ds","title":"predict_input_fn()"},{"location":"kaggle_runner/datasets/data_handlers/#kaggle_runner.datasets.data_handlers.PS_TF_DataHandler.serialize_PS_example","text":"NOT WORKING... don't know why Creates a tf.Example message ready to be written to a file. Source code in kaggle_runner/datasets/data_handlers.py 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 @staticmethod def serialize_PS_example ( feature0 , feature1 ): \"\"\" NOT WORKING... don't know why Creates a tf.Example message ready to be written to a file. \"\"\" # Create a dictionary mapping the feature name to the # tf.Example-compatible data type. assert feature0 . shape [ 0 ] == 1 and feature0 . shape [ 1 ] == 128 assert ( feature0 . shape [ 0 ] == feature1 . shape [ 0 ] and feature0 . shape [ 1 ] == feature1 . shape [ 1 ] ) f0 = tf . reshape ( feature0 , [ - 1 ]) f1 = tf . reshape ( feature1 , [ - 1 ]) feature = { \"image\" : _int64_feature_from_list ( f0 ), \"mask\" : _int64_feature_from_list ( f1 ), } # Create a Features message using tf.train.Example. logger . debug ( \"in transforming to tf example proto\" ) example_proto = tf . train . Example ( features = tf . train . Features ( feature = feature )) logger . debug ( \"after transforming one feature to tf example proto\" ) return example_proto . SerializeToString ()","title":"serialize_PS_example()"},{"location":"kaggle_runner/datasets/data_handlers/#kaggle_runner.datasets.data_handlers.PS_TF_DataHandler.train_input_fn","text":"An input function for training Source code in kaggle_runner/datasets/data_handlers.py 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 @staticmethod # for these, we will need to extract all the points before: def train_input_fn ( features , labels , batch_size , split_id =- 1 , n_splits = 10 , cv = True ): \"\"\"An input function for training\"\"\" # read from the tfrecord file (save the extracted ones)(read the data) ds = tf . data . Dataset . from_tensor_slices (( features , labels )) if cv : assert split_id >= 0 and n_splits > 1 and split_id < n_splits ds = [ ds . shard ( n_splits , i ) for i in range ( n_splits )] shards_cross = [ ds [ val_id ] for val_id in range ( n_splits ) if val_id != split_id ] s = shards_cross [ 0 ] for t in shards_cross [ 1 :]: s = s . concatenate ( t ) # just memory is not enough ... ds = s . shuffle ( buffer_size = int ( len ( labels ) * ( n_splits - 1 ) / n_splits )) else : ds = ds . shuffle ( buffer_size = len ( labels )) # after shuffle, we do cross validtation split # taken from Dan, https://stackoverflow.com/questions/39748660/how-to-perform-k-fold-cross-validation-with-tensorflow # will need to append id, then remove the id? # -> no need, we just split to 5 shards, then rearrange these shards ds = ds . repeat () # Batch the examples assert batch_size is not None , \"batch_size must not be None\" # Return the dataset. return ds . batch ( batch_size ) . prefetch ( 1 )","title":"train_input_fn()"},{"location":"kaggle_runner/datasets/data_prepare/","text":"\u00a4 BiasBenchmark \u00a4 calculate_benchmark ( self , pred = None , validate_df = None , model_name = 'lstm' ) \u00a4 :param pred: :param model_name: :return: final metric score, bias auc for subgroups, subgroup classification distribution details, overall auc Source code in kaggle_runner/datasets/data_prepare.py 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 def calculate_benchmark ( self , pred = None , validate_df = None , model_name = MODEL_NAME ): \"\"\" :param pred: :param model_name: :return: final metric score, bias auc for subgroups, subgroup classification distribution details, overall auc \"\"\" if validate_df is None : print ( \"In caculating benchmark, the validate_df passed in None, use default validate_df, with given pred\" ) validate_df = self . validate_df assert validate_df . shape [ 0 ] == len ( pred ) validate_df [ model_name ] = pred # prediction print ( \"In caculating benchmark...\" ) validate_df = BiasBenchmark . copy_convert_dataframe_to_bool ( validate_df [ IDENTITY_COLUMNS + [ TARGET_COLUMN , TEXT_COLUMN , model_name ]], self . threshold , ) ( bias_metrics_df , subgroup_distribution , ) = BiasBenchmark . compute_bias_metrics_for_model ( validate_df , IDENTITY_COLUMNS , model_name , TARGET_COLUMN ) overall_auc_dist = BiasBenchmark . calculate_overall_auc_distribution ( validate_df , model_name ) final_score , score_comp = BiasBenchmark . get_final_metric ( bias_metrics_df , overall_auc_dist [ OVERALL_AUC ] ) return ( final_score , score_comp , bias_metrics_df , subgroup_distribution , overall_auc_dist , ) compute_bias_metrics_for_model ( dataset , subgroups , model , label_col , include_asegs = False ) staticmethod \u00a4 Computes per-subgroup metrics for all subgroups and one model. bias_metrics_df = BiasBenchmark.compute_bias_metrics_for_model(validate_df, IDENTITY_COLUMNS, MODEL_NAME, TARGET_COLUMN) \u00a4 :param dataset: prediction result :param subgroups: all group names :param model: my model name :param label_col: target column name :param include_asegs: ? :return: Source code in kaggle_runner/datasets/data_prepare.py 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 @staticmethod def compute_bias_metrics_for_model ( dataset , subgroups , model , label_col , include_asegs = False ): \"\"\" Computes per-subgroup metrics for all subgroups and one model. # bias_metrics_df = BiasBenchmark.compute_bias_metrics_for_model(validate_df, IDENTITY_COLUMNS, MODEL_NAME, TARGET_COLUMN) :param dataset: prediction result :param subgroups: all group names :param model: my model name :param label_col: target column name :param include_asegs: ? :return: \"\"\" records = [] subgroup_distribution = [] for subgroup in subgroups : record = { \"subgroup\" : subgroup , \"subgroup_size\" : len ( dataset [ dataset [ subgroup ]]), } record_pn = { \"subgroup\" : subgroup , \"subgroup_size\" : len ( dataset [ dataset [ subgroup ]]), } record [ SUBGROUP_AUC ] = BiasBenchmark . compute_subgroup_auc ( dataset , subgroup , label_col , model ) record [ BPSN_AUC ] = BiasBenchmark . compute_bpsn_auc ( dataset , subgroup , label_col , model ) record [ BNSP_AUC ] = BiasBenchmark . compute_bnsp_auc ( dataset , subgroup , label_col , model ) record_pn [ SUBGROUP_AUC ] = BiasBenchmark . compute_subgroup_classify_detail ( dataset , subgroup , label_col , model ) record_pn [ BPSN_AUC ] = BiasBenchmark . compute_bpsn_classify_detail ( dataset , subgroup , label_col , model ) record_pn [ BNSP_AUC ] = BiasBenchmark . compute_bnsp_classify_detail ( dataset , subgroup , label_col , model ) records . append ( record ) subgroup_distribution . append ( record_pn ) return ( pd . DataFrame ( records ) . sort_values ( \"subgroup_auc\" , ascending = True ), subgroup_distribution , ) compute_bnsp_auc ( df , subgroup , label , model_name ) staticmethod \u00a4 Computes the AUC of the within-subgroup positive examples and the background negative examples. Source code in kaggle_runner/datasets/data_prepare.py 490 491 492 493 494 495 496 497 498 @staticmethod def compute_bnsp_auc ( df , subgroup , label , model_name ): \"\"\"Computes the AUC of the within-subgroup positive examples and the background negative examples.\"\"\" subgroup_positive_examples = df [ df [ subgroup ] & df [ label ]] non_subgroup_negative_examples = df [ ~ df [ subgroup ] & ~ df [ label ]] examples = subgroup_positive_examples . append ( non_subgroup_negative_examples ) return BiasBenchmark . compute_auc ( examples [ label ], examples [ model_name ]) compute_bnsp_classify_detail ( df , subgroup , label , model_name ) staticmethod \u00a4 Computes the AUC of the within-subgroup positive examples and the background negative examples. Source code in kaggle_runner/datasets/data_prepare.py 478 479 480 481 482 483 484 485 486 487 488 @staticmethod def compute_bnsp_classify_detail ( df , subgroup , label , model_name ): \"\"\"Computes the AUC of the within-subgroup positive examples and the background negative examples.\"\"\" subgroup_positive_examples = df [ df [ subgroup ] & df [ label ]] non_subgroup_negative_examples = df [ ~ df [ subgroup ] & ~ df [ label ]] examples = subgroup_positive_examples . append ( non_subgroup_negative_examples ) return BiasBenchmark . compute_predict_estimator ( examples [ label ], examples [ model_name ] ) compute_bpsn_auc ( df , subgroup , label , model_name ) staticmethod \u00a4 Computes the AUC of the within-subgroup negative examples and the background positive examples. Source code in kaggle_runner/datasets/data_prepare.py 468 469 470 471 472 473 474 475 476 @staticmethod def compute_bpsn_auc ( df , subgroup , label , model_name ): \"\"\"Computes the AUC of the within-subgroup negative examples and the background positive examples.\"\"\" subgroup_negative_examples = df [ df [ subgroup ] & ~ df [ label ]] non_subgroup_positive_examples = df [ ~ df [ subgroup ] & df [ label ]] examples = subgroup_negative_examples . append ( non_subgroup_positive_examples ) return BiasBenchmark . compute_auc ( examples [ label ], examples [ model_name ]) compute_bpsn_classify_detail ( df , subgroup , label , model_name ) staticmethod \u00a4 Computes the AUC of the within-subgroup negative examples and the background positive examples. Source code in kaggle_runner/datasets/data_prepare.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 @staticmethod def compute_bpsn_classify_detail ( df , subgroup , label , model_name ): \"\"\"Computes the AUC of the within-subgroup negative examples and the background positive examples.\"\"\" subgroup_negative_examples = df [ df [ subgroup ] & ~ df [ label ]] non_subgroup_positive_examples = df [ ~ df [ subgroup ] & df [ label ] ] # background positive examples = subgroup_negative_examples . append ( non_subgroup_positive_examples ) # this example is background True positive, with subgroup True negative, and see our model's prediction's performance return BiasBenchmark . compute_predict_estimator ( examples [ label ], examples [ model_name ] ) compute_subgroup_auc ( df , subgroup , label , model_name ) staticmethod \u00a4 Compute AUC for spefic subgroup. AUC only cares about ordering, not threshold :param df: dataframe which contains predictions for all subgroups :param subgroup: compute AUC for this subgroup :param label: target column name :param model_name: :return: auc score Source code in kaggle_runner/datasets/data_prepare.py 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 @staticmethod def compute_subgroup_auc ( df , subgroup , label , model_name ): \"\"\" Compute AUC for spefic subgroup. AUC only cares about ordering, not threshold :param df: dataframe which contains predictions for all subgroups :param subgroup: compute AUC for this subgroup :param label: target column name :param model_name: :return: auc score \"\"\" subgroup_examples = df [ df [ subgroup ] ] # innter df[subgroup] will get out boolean list, which is used to select this # subgroup examples return BiasBenchmark . compute_auc ( subgroup_examples [ label ], subgroup_examples [ model_name ] ) compute_subgroup_classify_detail ( df , subgroup , label , model_name ) staticmethod \u00a4 Compute AUC for spefic subgroup :param df: dataframe which contains predictions for all subgroups :param subgroup: compute AUC for this subgroup :param label: target column name :param model_name: :return: just mean/std, for pos, neg, then we just use this information to make shift Source code in kaggle_runner/datasets/data_prepare.py 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 @staticmethod def compute_subgroup_classify_detail ( df , subgroup , label , model_name ): \"\"\" Compute AUC for spefic subgroup :param df: dataframe which contains predictions for all subgroups :param subgroup: compute AUC for this subgroup :param label: target column name :param model_name: :return: just mean/std, for pos, neg, then we just use this information to make shift \"\"\" subgroup_examples = df [ df [ subgroup ] ] # innter df[subgroup] will get out boolean list, which is used to select this # subgroup examples if label == TARGET_COLUMN : return BiasBenchmark . compute_predict_estimator ( subgroup_examples [ label ], subgroup_examples [ model_name ], y_pred_continuous = subgroup_examples [ label + \"_orig\" ], ) else : return BiasBenchmark . compute_predict_estimator ( subgroup_examples [ label ], subgroup_examples [ model_name ] ) EmbeddingHandler \u00a4 build_matrix_prepare_data ( self , path , emb_matrix_existed , convert_additional = False ) \u00a4 build embedding matrix given tokenizer word_index and pre-trained embedding file :param word_index: word_index from tokenizer :param path: path to load pre-trained embedding :return: embedding matrix Source code in kaggle_runner/datasets/data_prepare.py 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 def build_matrix_prepare_data ( self , path , emb_matrix_existed , convert_additional = False ): \"\"\" build embedding matrix given tokenizer word_index and pre-trained embedding file :param word_index: word_index from tokenizer :param path: path to load pre-trained embedding :return: embedding matrix \"\"\" if emb_matrix_existed : utils . logger . debug ( \"Start cooking embedding matrix and train/test data: only train/test data, emb_matrix existed\" ) self . prepare_data () if convert_additional : self . _prepare_additional_data () return # only need process text utils . logger . debug ( \"Start cooking embedding matrix and train/test data\" ) utils . logger . debug ( f \" {path} is being processed\" ) if path . find ( \"840B.300d\" ) > 0 : emb_save_filename = \"matrix_840b\" if path . find ( \"300d-2M\" ) > 0 : emb_save_filename = \"matrix_crawl\" emb_from_file = utils . get_obj_or_dump ( emb_save_filename ) if emb_from_file is not None : return emb_from_file if not utils . file_exist ( \"word_index\" ): self . build_vocab ( self . df [ TEXT_COLUMN ]) vocab = utils . get_obj_or_dump ( \"vocab\" , self . vocab ) # word to integer value index self . prepare_data () # tokenizer processed in this function, not related to embedding utils . logger . debug ( \"Text processed\" ) embedding_index = EmbeddingHandler . load_embeddings ( path ) # embedding_index is an dict, value is the feature vector utils . logger . debug ( f \"loading embedding from {path} done\" ) self . add_lower_to_embedding ( embedding_index , vocab ) # will change embedding_index, add lower words in the vocab to this embedding word_index = utils . get_obj_or_dump ( \"word_index\" , self . tokenizer . word_index ) # word to integer value index embedding_matrix = np . zeros ( ( len ( word_index ) + 1 , 300 ) ) # last one for unknown? else : utils . logger . debug ( \"Restore word index from files\" ) word_index = utils . get_obj_or_dump ( \"word_index\" ) # word to integer value index try : vocab = utils . get_obj_or_dump ( \"vocab\" , self . vocab ) # word to integer value index except FileNotFoundError : vocab = self . vocab if vocab is None : raise RuntimeError ( \"vocab shoule be None, process embedding_index need it\" ) embedding_index = EmbeddingHandler . load_embeddings ( path ) # embedding_index is an dict, value is the feature vector utils . logger . debug ( f \"loading embedding from {path} done\" ) self . add_lower_to_embedding ( embedding_index , vocab ) # will change embedding_index, add lower words in the vocab to this embedding embedding_matrix = np . zeros ( ( len ( word_index ) + 1 , 300 ) ) # last one for unknown? if path . find ( \"840B.300d\" ) > 0 : avg_vector = EmbeddingHandler . avg_glove_vector_840b300d if path . find ( \"300d-2M\" ) > 0 : avg_vector = EmbeddingHandler . avg_fasttext_2m300d for word , i in word_index . items (): try : embedding_matrix [ i ] = embedding_index [ word ] except KeyError : # for unk # https://stackoverflow.com/questions/49239941/what-is-unk-in-the-pretrained-glove-vector-files-e-g-glove-6b-50d-txt embedding_matrix [ i ] = avg_vector utils . logger . debug ( f \"Done cooking embedding matrix for {path} with train/test words\" ) utils . dump_obj ( embedding_matrix , emb_save_filename , force = True ) return embedding_matrix data_prepare ( self , action = None ) \u00a4 Returns the iris dataset as (train_x, train_y), (test_x, test_y). we load this from the tfrecord, maybe save the ones just after embedding, so it can be faster Source code in kaggle_runner/datasets/data_prepare.py 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 def data_prepare ( self , action = None ): \"\"\"Returns the iris dataset as (train_x, train_y), (test_x, test_y). we load this from the tfrecord, maybe save the ones just after embedding, so it can be faster \"\"\" if action is not None : utils . logger . debug ( \" {} in data preparation\" . format ( action )) try : # just recover from record file emb , data_train , test_data = self . read_emb_data_from_input () self . x_train , self . y_train , self . y_aux_train = zip ( * data_train ) self . x_train , self . y_train , self . y_aux_train = ( np . array ( self . x_train ), np . array ( self . y_train ), np . array ( self . y_aux_train ), ) utils . logger . debug ( \"restored data from files for training\" ) self . BIN_FOLDER = defaults . Data_Folder return self . x_train , self . y_train , self . y_aux_train , test_data , emb except FileNotFoundError : utils . logger . debug ( \"cannot restore emb, trainX from jigsaw kaggle file data\" ) except TypeError : # if read out None for data_train utils . logger . debug ( \"cannot restore emb, trainX from jigsaw kaggle file data\" ) # if os.path.isfile(DATA_FILE_FLAG) and not self.do_emb_matrix_preparation: # in final stage, no need to check this... if not self . do_emb_matrix_preparation : # global embedding_matrix if action is not None and action == defaults . DATA_ACTION_NO_NEED_LOAD_EMB_M : self . embedding_matrix = None else : try : self . embedding_matrix = pickle . load ( open ( self . E_M_FILE , \"rb\" )) except FileNotFoundError : self . BIN_FOLDER = \"/content/gdrivedata/My Drive/\" if not os . path . isdir ( self . BIN_FOLDER ): self . BIN_FOLDER = \"./\" if not utils . file_exist ( self . E_M_FILE , fullpath = True ): self . BIN_FOLDER = defaults . Data_Folder self . embedding_matrix = pickle . load ( open ( self . E_M_FILE , \"rb\" )) utils . BIN_FOLDER = self . BIN_FOLDER # save file to the right place utils . logger . debug ( self . E_M_FILE ) if action is not None : # exist data, need to convert data utils . logger . debug ( action ) if ( action == defaults . CONVERT_TRAIN_DATA or action == defaults . CONVERT_ADDITIONAL_NONTOXIC_DATA ): self . prepare_tfrecord_data ( train_test_data = True , embedding = False , action = action ) # train data will rebuild, so we put it before read from pickle try : data_train = pickle . load ( open ( self . DATA_TRAIN_FILE , \"rb\" ) ) # (None, 2048) except FileNotFoundError : self . BIN_FOLDER = \"/content/gdrivedata/My Drive/\" if not os . path . isdir ( self . BIN_FOLDER ): self . BIN_FOLDER = \"./\" utils . BIN_FOLDER = self . BIN_FOLDER # save file to the right place data_train = pickle . load ( open ( self . DATA_TRAIN_FILE , \"rb\" ) ) # (None, 2048) utils . logger . debug ( self . DATA_TRAIN_FILE ) self . x_test = pickle . load ( open ( self . DATA_TEST_FILE , \"rb\" ) ) # (None, 2048) 2048 features from xception net self . x_train , self . y_train , self . y_aux_train = zip ( * data_train ) self . x_train , self . y_train , self . y_aux_train = ( np . array ( self . x_train ), np . array ( self . y_train ), np . array ( self . y_aux_train ), ) # global test_df_id # test_df_id = pd.read_csv('../input/jigsaw-unintended-bias-in-toxicity-classification/test.csv').id try : self . test_df_id = pd . read_csv ( self . INPUT_DATA_DIR + \"test.csv\" ) . id # only id series is needed for generating submission csv file except FileNotFoundError : self . INPUT_DATA_DIR = \"../input/\" if not os . path . isdir ( self . INPUT_DATA_DIR ): self . INPUT_DATA_DIR = \"/home/pengyu/works/input/jigsaw-unintended-bias-in-toxicity-classification/\" if not os . path . isdir ( self . INPUT_DATA_DIR ): self . INPUT_DATA_DIR = ( self . BIN_FOLDER ) # put same folder in google drive self . test_df_id = pd . read_csv ( self . INPUT_DATA_DIR + \"test.csv\" ) . id # only id series is needed for generating submission csv file if ( action is not None ): # exist data, need to convert data, so put after read from pickle if action == defaults . CONVERT_DATA_Y_NOT_BINARY : self . prepare_tfrecord_data ( train_test_data = False , embedding = False , action = action ) # train_test_data=False just not rebuild words, the y still need to change return ( self . x_train , self . y_train , self . y_aux_train , self . x_test , self . embedding_matrix , ) else : utils . logger . debug ( self . DATA_TRAIN_FILE ) # (x_train, y_train, y_aux_train), x_test = prepare_tfrecord_data() if action is not None and ( action == defaults . CONVERT_TRAIN_DATA or action == defaults . CONVERT_ADDITIONAL_NONTOXIC_DATA ): self . embedding_matrix = pickle . load ( open ( self . E_M_FILE , \"rb\" )) utils . logger . debug ( \"Only build train test data, embedding loaded from pickle\" ) return self . prepare_tfrecord_data ( embedding = False , action = action ) else : return self . prepare_tfrecord_data ( embedding = True ) TargetDistAnalyzer \u00a4 get_distribution ( self , target_data ) \u00a4 target_data: pandas series, need to get index, so need series, in the series, values are target (prediction) :return: (type, cnt number, frequency, index) pair list for this distribution Source code in kaggle_runner/datasets/data_prepare.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 def get_distribution ( self , target_data ): \"\"\" target_data: pandas series, need to get index, so need series, in the series, values are target (prediction) :return: (type, cnt number, frequency, index) pair list for this distribution \"\"\" dst = [] y_t = self . discretizer . transform ( target_data . values . reshape ( - 1 , 1 )) uniq_elements , element_counts = np . unique ( y_t , return_counts = True ) all_counts = len ( y_t ) for i , e in enumerate ( uniq_elements ): dst . append ( ( e , element_counts [ i ], element_counts [ i ] / all_counts , target_data . loc [( y_t == e ) . ravel ()] . index , ) ) return dst get_err_distribution ( self , err_data , val_mask ) \u00a4 :param err_data: series, contain both target values and error values :return: (type, cnt number, frequency, index) pair list for this distribution Source code in kaggle_runner/datasets/data_prepare.py 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 def get_err_distribution ( self , err_data , val_mask ): \"\"\" :param err_data: series, contain both target values and error values :return: (type, cnt number, frequency, index) pair list for this distribution \"\"\" dstr = {} df = err_data for g in IDENTITY_COLUMNS : val_subgroup_idx = df . loc [ val_mask & ( df [ g ] > 0.5 )] . index val_subgroup = df . loc [ val_subgroup_idx , [ TARGET_COLUMN , VAL_ERR_COLUMN ]] dst = self . get_distribution ( val_subgroup [ TARGET_COLUMN ] ) # could use continuous data, might be helpful so calculate belongs (fuzzy logic) err_mean_in_split = [ val_subgroup . loc [ d [ 3 ], VAL_ERR_COLUMN ] . mean () for d in dst ] dstr [ g ] = ( dst , err_mean_in_split ) return dstr","title":"data_prepare.py"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare","text":"","title":"kaggle_runner.datasets.data_prepare"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.BiasBenchmark","text":"","title":"BiasBenchmark"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.BiasBenchmark.calculate_benchmark","text":":param pred: :param model_name: :return: final metric score, bias auc for subgroups, subgroup classification distribution details, overall auc Source code in kaggle_runner/datasets/data_prepare.py 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 def calculate_benchmark ( self , pred = None , validate_df = None , model_name = MODEL_NAME ): \"\"\" :param pred: :param model_name: :return: final metric score, bias auc for subgroups, subgroup classification distribution details, overall auc \"\"\" if validate_df is None : print ( \"In caculating benchmark, the validate_df passed in None, use default validate_df, with given pred\" ) validate_df = self . validate_df assert validate_df . shape [ 0 ] == len ( pred ) validate_df [ model_name ] = pred # prediction print ( \"In caculating benchmark...\" ) validate_df = BiasBenchmark . copy_convert_dataframe_to_bool ( validate_df [ IDENTITY_COLUMNS + [ TARGET_COLUMN , TEXT_COLUMN , model_name ]], self . threshold , ) ( bias_metrics_df , subgroup_distribution , ) = BiasBenchmark . compute_bias_metrics_for_model ( validate_df , IDENTITY_COLUMNS , model_name , TARGET_COLUMN ) overall_auc_dist = BiasBenchmark . calculate_overall_auc_distribution ( validate_df , model_name ) final_score , score_comp = BiasBenchmark . get_final_metric ( bias_metrics_df , overall_auc_dist [ OVERALL_AUC ] ) return ( final_score , score_comp , bias_metrics_df , subgroup_distribution , overall_auc_dist , )","title":"calculate_benchmark()"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.BiasBenchmark.compute_bias_metrics_for_model","text":"Computes per-subgroup metrics for all subgroups and one model.","title":"compute_bias_metrics_for_model()"},{"location":"kaggle_runner/datasets/data_prepare/#bias_metrics_df-biasbenchmarkcompute_bias_metrics_for_modelvalidate_df-identity_columns-model_name-target_column","text":":param dataset: prediction result :param subgroups: all group names :param model: my model name :param label_col: target column name :param include_asegs: ? :return: Source code in kaggle_runner/datasets/data_prepare.py 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 @staticmethod def compute_bias_metrics_for_model ( dataset , subgroups , model , label_col , include_asegs = False ): \"\"\" Computes per-subgroup metrics for all subgroups and one model. # bias_metrics_df = BiasBenchmark.compute_bias_metrics_for_model(validate_df, IDENTITY_COLUMNS, MODEL_NAME, TARGET_COLUMN) :param dataset: prediction result :param subgroups: all group names :param model: my model name :param label_col: target column name :param include_asegs: ? :return: \"\"\" records = [] subgroup_distribution = [] for subgroup in subgroups : record = { \"subgroup\" : subgroup , \"subgroup_size\" : len ( dataset [ dataset [ subgroup ]]), } record_pn = { \"subgroup\" : subgroup , \"subgroup_size\" : len ( dataset [ dataset [ subgroup ]]), } record [ SUBGROUP_AUC ] = BiasBenchmark . compute_subgroup_auc ( dataset , subgroup , label_col , model ) record [ BPSN_AUC ] = BiasBenchmark . compute_bpsn_auc ( dataset , subgroup , label_col , model ) record [ BNSP_AUC ] = BiasBenchmark . compute_bnsp_auc ( dataset , subgroup , label_col , model ) record_pn [ SUBGROUP_AUC ] = BiasBenchmark . compute_subgroup_classify_detail ( dataset , subgroup , label_col , model ) record_pn [ BPSN_AUC ] = BiasBenchmark . compute_bpsn_classify_detail ( dataset , subgroup , label_col , model ) record_pn [ BNSP_AUC ] = BiasBenchmark . compute_bnsp_classify_detail ( dataset , subgroup , label_col , model ) records . append ( record ) subgroup_distribution . append ( record_pn ) return ( pd . DataFrame ( records ) . sort_values ( \"subgroup_auc\" , ascending = True ), subgroup_distribution , )","title":"bias_metrics_df = BiasBenchmark.compute_bias_metrics_for_model(validate_df, IDENTITY_COLUMNS, MODEL_NAME, TARGET_COLUMN)"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.BiasBenchmark.compute_bnsp_auc","text":"Computes the AUC of the within-subgroup positive examples and the background negative examples. Source code in kaggle_runner/datasets/data_prepare.py 490 491 492 493 494 495 496 497 498 @staticmethod def compute_bnsp_auc ( df , subgroup , label , model_name ): \"\"\"Computes the AUC of the within-subgroup positive examples and the background negative examples.\"\"\" subgroup_positive_examples = df [ df [ subgroup ] & df [ label ]] non_subgroup_negative_examples = df [ ~ df [ subgroup ] & ~ df [ label ]] examples = subgroup_positive_examples . append ( non_subgroup_negative_examples ) return BiasBenchmark . compute_auc ( examples [ label ], examples [ model_name ])","title":"compute_bnsp_auc()"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.BiasBenchmark.compute_bnsp_classify_detail","text":"Computes the AUC of the within-subgroup positive examples and the background negative examples. Source code in kaggle_runner/datasets/data_prepare.py 478 479 480 481 482 483 484 485 486 487 488 @staticmethod def compute_bnsp_classify_detail ( df , subgroup , label , model_name ): \"\"\"Computes the AUC of the within-subgroup positive examples and the background negative examples.\"\"\" subgroup_positive_examples = df [ df [ subgroup ] & df [ label ]] non_subgroup_negative_examples = df [ ~ df [ subgroup ] & ~ df [ label ]] examples = subgroup_positive_examples . append ( non_subgroup_negative_examples ) return BiasBenchmark . compute_predict_estimator ( examples [ label ], examples [ model_name ] )","title":"compute_bnsp_classify_detail()"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.BiasBenchmark.compute_bpsn_auc","text":"Computes the AUC of the within-subgroup negative examples and the background positive examples. Source code in kaggle_runner/datasets/data_prepare.py 468 469 470 471 472 473 474 475 476 @staticmethod def compute_bpsn_auc ( df , subgroup , label , model_name ): \"\"\"Computes the AUC of the within-subgroup negative examples and the background positive examples.\"\"\" subgroup_negative_examples = df [ df [ subgroup ] & ~ df [ label ]] non_subgroup_positive_examples = df [ ~ df [ subgroup ] & df [ label ]] examples = subgroup_negative_examples . append ( non_subgroup_positive_examples ) return BiasBenchmark . compute_auc ( examples [ label ], examples [ model_name ])","title":"compute_bpsn_auc()"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.BiasBenchmark.compute_bpsn_classify_detail","text":"Computes the AUC of the within-subgroup negative examples and the background positive examples. Source code in kaggle_runner/datasets/data_prepare.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 @staticmethod def compute_bpsn_classify_detail ( df , subgroup , label , model_name ): \"\"\"Computes the AUC of the within-subgroup negative examples and the background positive examples.\"\"\" subgroup_negative_examples = df [ df [ subgroup ] & ~ df [ label ]] non_subgroup_positive_examples = df [ ~ df [ subgroup ] & df [ label ] ] # background positive examples = subgroup_negative_examples . append ( non_subgroup_positive_examples ) # this example is background True positive, with subgroup True negative, and see our model's prediction's performance return BiasBenchmark . compute_predict_estimator ( examples [ label ], examples [ model_name ] )","title":"compute_bpsn_classify_detail()"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.BiasBenchmark.compute_subgroup_auc","text":"Compute AUC for spefic subgroup. AUC only cares about ordering, not threshold :param df: dataframe which contains predictions for all subgroups :param subgroup: compute AUC for this subgroup :param label: target column name :param model_name: :return: auc score Source code in kaggle_runner/datasets/data_prepare.py 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 @staticmethod def compute_subgroup_auc ( df , subgroup , label , model_name ): \"\"\" Compute AUC for spefic subgroup. AUC only cares about ordering, not threshold :param df: dataframe which contains predictions for all subgroups :param subgroup: compute AUC for this subgroup :param label: target column name :param model_name: :return: auc score \"\"\" subgroup_examples = df [ df [ subgroup ] ] # innter df[subgroup] will get out boolean list, which is used to select this # subgroup examples return BiasBenchmark . compute_auc ( subgroup_examples [ label ], subgroup_examples [ model_name ] )","title":"compute_subgroup_auc()"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.BiasBenchmark.compute_subgroup_classify_detail","text":"Compute AUC for spefic subgroup :param df: dataframe which contains predictions for all subgroups :param subgroup: compute AUC for this subgroup :param label: target column name :param model_name: :return: just mean/std, for pos, neg, then we just use this information to make shift Source code in kaggle_runner/datasets/data_prepare.py 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 @staticmethod def compute_subgroup_classify_detail ( df , subgroup , label , model_name ): \"\"\" Compute AUC for spefic subgroup :param df: dataframe which contains predictions for all subgroups :param subgroup: compute AUC for this subgroup :param label: target column name :param model_name: :return: just mean/std, for pos, neg, then we just use this information to make shift \"\"\" subgroup_examples = df [ df [ subgroup ] ] # innter df[subgroup] will get out boolean list, which is used to select this # subgroup examples if label == TARGET_COLUMN : return BiasBenchmark . compute_predict_estimator ( subgroup_examples [ label ], subgroup_examples [ model_name ], y_pred_continuous = subgroup_examples [ label + \"_orig\" ], ) else : return BiasBenchmark . compute_predict_estimator ( subgroup_examples [ label ], subgroup_examples [ model_name ] )","title":"compute_subgroup_classify_detail()"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.EmbeddingHandler","text":"","title":"EmbeddingHandler"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.EmbeddingHandler.build_matrix_prepare_data","text":"build embedding matrix given tokenizer word_index and pre-trained embedding file :param word_index: word_index from tokenizer :param path: path to load pre-trained embedding :return: embedding matrix Source code in kaggle_runner/datasets/data_prepare.py 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 def build_matrix_prepare_data ( self , path , emb_matrix_existed , convert_additional = False ): \"\"\" build embedding matrix given tokenizer word_index and pre-trained embedding file :param word_index: word_index from tokenizer :param path: path to load pre-trained embedding :return: embedding matrix \"\"\" if emb_matrix_existed : utils . logger . debug ( \"Start cooking embedding matrix and train/test data: only train/test data, emb_matrix existed\" ) self . prepare_data () if convert_additional : self . _prepare_additional_data () return # only need process text utils . logger . debug ( \"Start cooking embedding matrix and train/test data\" ) utils . logger . debug ( f \" {path} is being processed\" ) if path . find ( \"840B.300d\" ) > 0 : emb_save_filename = \"matrix_840b\" if path . find ( \"300d-2M\" ) > 0 : emb_save_filename = \"matrix_crawl\" emb_from_file = utils . get_obj_or_dump ( emb_save_filename ) if emb_from_file is not None : return emb_from_file if not utils . file_exist ( \"word_index\" ): self . build_vocab ( self . df [ TEXT_COLUMN ]) vocab = utils . get_obj_or_dump ( \"vocab\" , self . vocab ) # word to integer value index self . prepare_data () # tokenizer processed in this function, not related to embedding utils . logger . debug ( \"Text processed\" ) embedding_index = EmbeddingHandler . load_embeddings ( path ) # embedding_index is an dict, value is the feature vector utils . logger . debug ( f \"loading embedding from {path} done\" ) self . add_lower_to_embedding ( embedding_index , vocab ) # will change embedding_index, add lower words in the vocab to this embedding word_index = utils . get_obj_or_dump ( \"word_index\" , self . tokenizer . word_index ) # word to integer value index embedding_matrix = np . zeros ( ( len ( word_index ) + 1 , 300 ) ) # last one for unknown? else : utils . logger . debug ( \"Restore word index from files\" ) word_index = utils . get_obj_or_dump ( \"word_index\" ) # word to integer value index try : vocab = utils . get_obj_or_dump ( \"vocab\" , self . vocab ) # word to integer value index except FileNotFoundError : vocab = self . vocab if vocab is None : raise RuntimeError ( \"vocab shoule be None, process embedding_index need it\" ) embedding_index = EmbeddingHandler . load_embeddings ( path ) # embedding_index is an dict, value is the feature vector utils . logger . debug ( f \"loading embedding from {path} done\" ) self . add_lower_to_embedding ( embedding_index , vocab ) # will change embedding_index, add lower words in the vocab to this embedding embedding_matrix = np . zeros ( ( len ( word_index ) + 1 , 300 ) ) # last one for unknown? if path . find ( \"840B.300d\" ) > 0 : avg_vector = EmbeddingHandler . avg_glove_vector_840b300d if path . find ( \"300d-2M\" ) > 0 : avg_vector = EmbeddingHandler . avg_fasttext_2m300d for word , i in word_index . items (): try : embedding_matrix [ i ] = embedding_index [ word ] except KeyError : # for unk # https://stackoverflow.com/questions/49239941/what-is-unk-in-the-pretrained-glove-vector-files-e-g-glove-6b-50d-txt embedding_matrix [ i ] = avg_vector utils . logger . debug ( f \"Done cooking embedding matrix for {path} with train/test words\" ) utils . dump_obj ( embedding_matrix , emb_save_filename , force = True ) return embedding_matrix","title":"build_matrix_prepare_data()"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.EmbeddingHandler.data_prepare","text":"Returns the iris dataset as (train_x, train_y), (test_x, test_y). we load this from the tfrecord, maybe save the ones just after embedding, so it can be faster Source code in kaggle_runner/datasets/data_prepare.py 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 def data_prepare ( self , action = None ): \"\"\"Returns the iris dataset as (train_x, train_y), (test_x, test_y). we load this from the tfrecord, maybe save the ones just after embedding, so it can be faster \"\"\" if action is not None : utils . logger . debug ( \" {} in data preparation\" . format ( action )) try : # just recover from record file emb , data_train , test_data = self . read_emb_data_from_input () self . x_train , self . y_train , self . y_aux_train = zip ( * data_train ) self . x_train , self . y_train , self . y_aux_train = ( np . array ( self . x_train ), np . array ( self . y_train ), np . array ( self . y_aux_train ), ) utils . logger . debug ( \"restored data from files for training\" ) self . BIN_FOLDER = defaults . Data_Folder return self . x_train , self . y_train , self . y_aux_train , test_data , emb except FileNotFoundError : utils . logger . debug ( \"cannot restore emb, trainX from jigsaw kaggle file data\" ) except TypeError : # if read out None for data_train utils . logger . debug ( \"cannot restore emb, trainX from jigsaw kaggle file data\" ) # if os.path.isfile(DATA_FILE_FLAG) and not self.do_emb_matrix_preparation: # in final stage, no need to check this... if not self . do_emb_matrix_preparation : # global embedding_matrix if action is not None and action == defaults . DATA_ACTION_NO_NEED_LOAD_EMB_M : self . embedding_matrix = None else : try : self . embedding_matrix = pickle . load ( open ( self . E_M_FILE , \"rb\" )) except FileNotFoundError : self . BIN_FOLDER = \"/content/gdrivedata/My Drive/\" if not os . path . isdir ( self . BIN_FOLDER ): self . BIN_FOLDER = \"./\" if not utils . file_exist ( self . E_M_FILE , fullpath = True ): self . BIN_FOLDER = defaults . Data_Folder self . embedding_matrix = pickle . load ( open ( self . E_M_FILE , \"rb\" )) utils . BIN_FOLDER = self . BIN_FOLDER # save file to the right place utils . logger . debug ( self . E_M_FILE ) if action is not None : # exist data, need to convert data utils . logger . debug ( action ) if ( action == defaults . CONVERT_TRAIN_DATA or action == defaults . CONVERT_ADDITIONAL_NONTOXIC_DATA ): self . prepare_tfrecord_data ( train_test_data = True , embedding = False , action = action ) # train data will rebuild, so we put it before read from pickle try : data_train = pickle . load ( open ( self . DATA_TRAIN_FILE , \"rb\" ) ) # (None, 2048) except FileNotFoundError : self . BIN_FOLDER = \"/content/gdrivedata/My Drive/\" if not os . path . isdir ( self . BIN_FOLDER ): self . BIN_FOLDER = \"./\" utils . BIN_FOLDER = self . BIN_FOLDER # save file to the right place data_train = pickle . load ( open ( self . DATA_TRAIN_FILE , \"rb\" ) ) # (None, 2048) utils . logger . debug ( self . DATA_TRAIN_FILE ) self . x_test = pickle . load ( open ( self . DATA_TEST_FILE , \"rb\" ) ) # (None, 2048) 2048 features from xception net self . x_train , self . y_train , self . y_aux_train = zip ( * data_train ) self . x_train , self . y_train , self . y_aux_train = ( np . array ( self . x_train ), np . array ( self . y_train ), np . array ( self . y_aux_train ), ) # global test_df_id # test_df_id = pd.read_csv('../input/jigsaw-unintended-bias-in-toxicity-classification/test.csv').id try : self . test_df_id = pd . read_csv ( self . INPUT_DATA_DIR + \"test.csv\" ) . id # only id series is needed for generating submission csv file except FileNotFoundError : self . INPUT_DATA_DIR = \"../input/\" if not os . path . isdir ( self . INPUT_DATA_DIR ): self . INPUT_DATA_DIR = \"/home/pengyu/works/input/jigsaw-unintended-bias-in-toxicity-classification/\" if not os . path . isdir ( self . INPUT_DATA_DIR ): self . INPUT_DATA_DIR = ( self . BIN_FOLDER ) # put same folder in google drive self . test_df_id = pd . read_csv ( self . INPUT_DATA_DIR + \"test.csv\" ) . id # only id series is needed for generating submission csv file if ( action is not None ): # exist data, need to convert data, so put after read from pickle if action == defaults . CONVERT_DATA_Y_NOT_BINARY : self . prepare_tfrecord_data ( train_test_data = False , embedding = False , action = action ) # train_test_data=False just not rebuild words, the y still need to change return ( self . x_train , self . y_train , self . y_aux_train , self . x_test , self . embedding_matrix , ) else : utils . logger . debug ( self . DATA_TRAIN_FILE ) # (x_train, y_train, y_aux_train), x_test = prepare_tfrecord_data() if action is not None and ( action == defaults . CONVERT_TRAIN_DATA or action == defaults . CONVERT_ADDITIONAL_NONTOXIC_DATA ): self . embedding_matrix = pickle . load ( open ( self . E_M_FILE , \"rb\" )) utils . logger . debug ( \"Only build train test data, embedding loaded from pickle\" ) return self . prepare_tfrecord_data ( embedding = False , action = action ) else : return self . prepare_tfrecord_data ( embedding = True )","title":"data_prepare()"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.TargetDistAnalyzer","text":"","title":"TargetDistAnalyzer"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.TargetDistAnalyzer.get_distribution","text":"target_data: pandas series, need to get index, so need series, in the series, values are target (prediction) :return: (type, cnt number, frequency, index) pair list for this distribution Source code in kaggle_runner/datasets/data_prepare.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 def get_distribution ( self , target_data ): \"\"\" target_data: pandas series, need to get index, so need series, in the series, values are target (prediction) :return: (type, cnt number, frequency, index) pair list for this distribution \"\"\" dst = [] y_t = self . discretizer . transform ( target_data . values . reshape ( - 1 , 1 )) uniq_elements , element_counts = np . unique ( y_t , return_counts = True ) all_counts = len ( y_t ) for i , e in enumerate ( uniq_elements ): dst . append ( ( e , element_counts [ i ], element_counts [ i ] / all_counts , target_data . loc [( y_t == e ) . ravel ()] . index , ) ) return dst","title":"get_distribution()"},{"location":"kaggle_runner/datasets/data_prepare/#kaggle_runner.datasets.data_prepare.TargetDistAnalyzer.get_err_distribution","text":":param err_data: series, contain both target values and error values :return: (type, cnt number, frequency, index) pair list for this distribution Source code in kaggle_runner/datasets/data_prepare.py 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 def get_err_distribution ( self , err_data , val_mask ): \"\"\" :param err_data: series, contain both target values and error values :return: (type, cnt number, frequency, index) pair list for this distribution \"\"\" dstr = {} df = err_data for g in IDENTITY_COLUMNS : val_subgroup_idx = df . loc [ val_mask & ( df [ g ] > 0.5 )] . index val_subgroup = df . loc [ val_subgroup_idx , [ TARGET_COLUMN , VAL_ERR_COLUMN ]] dst = self . get_distribution ( val_subgroup [ TARGET_COLUMN ] ) # could use continuous data, might be helpful so calculate belongs (fuzzy logic) err_mean_in_split = [ val_subgroup . loc [ d [ 3 ], VAL_ERR_COLUMN ] . mean () for d in dst ] dstr [ g ] = ( dst , err_mean_in_split ) return dstr","title":"get_err_distribution()"},{"location":"kaggle_runner/datasets/jigsaw_toxic_data/","text":"\u00a4","title":"jigsaw_toxic_data.py"},{"location":"kaggle_runner/datasets/jigsaw_toxic_data/#kaggle_runner.datasets.jigsaw_toxic_data","text":"","title":"kaggle_runner.datasets.jigsaw_toxic_data"},{"location":"kaggle_runner/datasets/siim_dataset/","text":"\u00a4","title":"siim_dataset.py"},{"location":"kaggle_runner/datasets/siim_dataset/#kaggle_runner.datasets.siim_dataset","text":"","title":"kaggle_runner.datasets.siim_dataset"},{"location":"kaggle_runner/datasets/transfomers/","text":"\u00a4 ExcludeDuplicateSentencesTransform \u00a4 Exclude equal sentences ExcludeHashtagsTransform \u00a4 Exclude any hashtags with # ExcludeNumbersTransform \u00a4 exclude any numbers ExcludeUrlsTransform \u00a4 Exclude urls ExcludeUsersMentionedTransform \u00a4 Exclude @users NLPTransform \u00a4 Transform for nlp task. ShuffleSentencesTransform \u00a4 Do shuffle by sentence","title":"transfomers.py"},{"location":"kaggle_runner/datasets/transfomers/#kaggle_runner.datasets.transfomers","text":"","title":"kaggle_runner.datasets.transfomers"},{"location":"kaggle_runner/datasets/transfomers/#kaggle_runner.datasets.transfomers.ExcludeDuplicateSentencesTransform","text":"Exclude equal sentences","title":"ExcludeDuplicateSentencesTransform"},{"location":"kaggle_runner/datasets/transfomers/#kaggle_runner.datasets.transfomers.ExcludeHashtagsTransform","text":"Exclude any hashtags with #","title":"ExcludeHashtagsTransform"},{"location":"kaggle_runner/datasets/transfomers/#kaggle_runner.datasets.transfomers.ExcludeNumbersTransform","text":"exclude any numbers","title":"ExcludeNumbersTransform"},{"location":"kaggle_runner/datasets/transfomers/#kaggle_runner.datasets.transfomers.ExcludeUrlsTransform","text":"Exclude urls","title":"ExcludeUrlsTransform"},{"location":"kaggle_runner/datasets/transfomers/#kaggle_runner.datasets.transfomers.ExcludeUsersMentionedTransform","text":"Exclude @users","title":"ExcludeUsersMentionedTransform"},{"location":"kaggle_runner/datasets/transfomers/#kaggle_runner.datasets.transfomers.NLPTransform","text":"Transform for nlp task.","title":"NLPTransform"},{"location":"kaggle_runner/datasets/transfomers/#kaggle_runner.datasets.transfomers.ShuffleSentencesTransform","text":"Do shuffle by sentence","title":"ShuffleSentencesTransform"},{"location":"kaggle_runner/kernels/KernelRunningState/","text":"\u00a4 KernelRunningState \u00a4 An enumeration.","title":"KernelRunningState.py"},{"location":"kaggle_runner/kernels/KernelRunningState/#kaggle_runner.kernels.KernelRunningState","text":"","title":"kaggle_runner.kernels.KernelRunningState"},{"location":"kaggle_runner/kernels/KernelRunningState/#kaggle_runner.kernels.KernelRunningState.KernelRunningState","text":"An enumeration.","title":"KernelRunningState"},{"location":"kaggle_runner/kernels/PSKernel/","text":"\u00a4","title":"PSKernel.py"},{"location":"kaggle_runner/kernels/PSKernel/#kaggle_runner.kernels.PSKernel","text":"","title":"kaggle_runner.kernels.PSKernel"},{"location":"kaggle_runner/kernels/Shonenkov/","text":"\u00a4 DummyTrainGlobalConfig \u00a4 Global Config for this notebook SchedulerClass \u00a4 Reduce learning rate when a metric has stopped improving. Models often benefit from reducing the learning rate by a factor of 2-10 once learning stagnates. This scheduler reads a metrics quantity and if no improvement is seen for a 'patience' number of epochs, the learning rate is reduced. !!! args optimizer ( Optimizer ): Wrapped optimizer . mode ( str ): One of `min` , `max` . In `min` mode , lr will be reduced when the quantity monitored has stopped decreasing ; in `max` mode it will be reduced when the quantity monitored has stopped increasing . Default : 'min' . factor ( float ): Factor by which the learning rate will be reduced . new_lr = lr * factor . Default : 0 . 1 . patience ( int ): Number of epochs with no improvement after which learning rate will be reduced . For example , if `patience = 2` , then we will ignore the first 2 epochs with no improvement , and will only decrease the LR after the 3 rd epoch if the loss still hasn 't improved then. Default: 10. verbose (bool): If ``True``, prints a message to stdout for each update. Default: ``False``. threshold (float): Threshold for measuring the new optimum, to only focus on significant changes. Default: 1e-4. threshold_mode (str): One of `rel`, `abs`. In `rel` mode, dynamic_threshold = best * ( 1 + threshold ) in ' max ' mode or best * ( 1 - threshold ) in `min` mode. In `abs` mode, dynamic_threshold = best + threshold in `max` mode or best - threshold in `min` mode. Default: ' rel '. cooldown (int): Number of epochs to wait before resuming normal operation after lr has been reduced. Default: 0. min_lr (float or list): A scalar or a list of scalars. A lower bound on the learning rate of all param groups or each group respectively. Default: 0. eps (float): Minimal decay applied to lr. If the difference between new and old lr is smaller than eps, the update is ignored. Default: 1e-8. !!! example >>> optimizer = torch.optim.SGD(model.parameters(), lr=0.1, momentum=0.9) >>> scheduler = ReduceLROnPlateau(optimizer, ' min ' ) >>> for epoch in range ( 10 ): >>> train (...) >>> val_loss = validate (...) >>> # Note that step should be called after validate() >>> scheduler . step ( val_loss ) Shonenkov \u00a4 Shonenkov kernel, use TPU to train; for data, down sampler and synthesizing. __init__ ( self , device , config , ** kargs ) special \u00a4 init . :param device: :param config: :param kargs: Source code in kaggle_runner/kernels/Shonenkov.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def __init__ ( self , device , config , ** kargs ): \"\"\"__init__. :param device: :param config: :param kargs: \"\"\" super ( Shonenkov , self ) . __init__ ( ** kargs ) self . data = None self . transformers = None self . setup_transformers () self . device = device self . config = config self . learner = None after_prepare_data_hook ( self ) \u00a4 Put to databunch here Source code in kaggle_runner/kernels/Shonenkov.py 193 194 195 196 197 198 199 200 def after_prepare_data_hook ( self ): \"\"\"Put to databunch here\"\"\" logger . debug ( \"kernel use device %s \" , self . device ) self . data = DataBunch . create ( self . train_dataset , self . validation_dataset , bs = self . config . batch_size , device = self . device , num_workers = self . config . num_workers ) build_and_set_model ( self ) \u00a4 build_and_set_model. Source code in kaggle_runner/kernels/Shonenkov.py 93 94 95 96 def build_and_set_model ( self ): \"\"\"build_and_set_model.\"\"\" self . model = ToxicSimpleNNModel () self . model = self . model . to ( self . device ) peek_data ( self ) \u00a4 peek_data. Source code in kaggle_runner/kernels/Shonenkov.py 202 203 204 205 206 207 208 209 210 211 212 213 def peek_data ( self ): \"\"\"peek_data.\"\"\" if self . data is not None : may_debug () o = self . data . one_batch () print ( o ) return o else : if self . logger is not None : self . logger . error ( \"peek_data failed, DataBunch is None.\" ) prepare_test_data ( self ) \u00a4 prepare_test_data. Source code in kaggle_runner/kernels/Shonenkov.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 def prepare_test_data ( self ): \"\"\"prepare_test_data.\"\"\" if os . path . exists ( '/content' ): # colab df_test = get_pickled_data ( \"test.pkl\" ) else : df_test = None if df_test is None : df_test = pd . read_csv ( f ' {ROOT_PATH} /input/jigsaw-multilingual-toxic-comment-classification/test.csv' , index_col = 'id' ) df_test [ 'comment_text' ] = df_test . parallel_apply ( lambda x : clean_text ( x [ 'content' ], x [ 'lang' ]), axis = 1 ) get_obj_or_dump ( \"test.pkl\" , default = df_test ) self . test_dataset = DatasetRetriever ( labels_or_ids = df_test . index . values , ## here different!!! comment_texts = df_test [ 'comment_text' ] . values , langs = df_test [ 'lang' ] . values , use_train_transforms = False , test = True , transformers = self . transformers ) del df_test gc . collect (); prepare_train_dev_data ( self ) \u00a4 prepare_train_dev_data. Source code in kaggle_runner/kernels/Shonenkov.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 def prepare_train_dev_data ( self ): \"\"\"prepare_train_dev_data.\"\"\" df_train = get_pickled_data ( \"train.pkl\" ) if df_train is None : df_train = pd . read_csv ( f ' {ROOT_PATH} /input/jigsaw-toxicity-train-data-with-aux/train_data.csv' ) df_train [ 'comment_text' ] = df_train . parallel_apply ( lambda x : clean_text ( x [ 'comment_text' ], x [ 'lang' ]), axis = 1 ) get_obj_or_dump ( \"train.pkl\" , default = df_train ) #supliment_toxic = get_toxic_comments(df_train) self . train_dataset = DatasetRetriever ( labels_or_ids = df_train [ 'toxic' ] . values , comment_texts = df_train [ 'comment_text' ] . values , langs = df_train [ 'lang' ] . values , severe_toxic = df_train [ 'severe_toxic' ] . values , obscene = df_train [ 'obscene' ] . values , threat = df_train [ 'threat' ] . values , insult = df_train [ 'insult' ] . values , identity_hate = df_train [ 'identity_hate' ] . values , use_train_transforms = True , transformers = self . transformers ) df_val = get_pickled_data ( \"val.pkl\" ) if df_val is None : df_val = pd . read_csv ( f ' {ROOT_PATH} /input/jigsaw-multilingual-toxic-comment-classification/validation.csv' , index_col = 'id' ) df_val [ 'comment_text' ] = df_val . parallel_apply ( lambda x : clean_text ( x [ 'comment_text' ], x [ 'lang' ]), axis = 1 ) get_obj_or_dump ( \"val.pkl\" , default = df_val ) self . validation_tune_dataset = DatasetRetriever ( labels_or_ids = df_val [ 'toxic' ] . values , comment_texts = df_val [ 'comment_text' ] . values , langs = df_val [ 'lang' ] . values , use_train_transforms = True , transformers = self . transformers ) self . validation_dataset = DatasetRetriever ( labels_or_ids = df_val [ 'toxic' ] . values , comment_texts = df_val [ 'comment_text' ] . values , langs = df_val [ 'lang' ] . values , use_train_transforms = False , transformers = self . transformers ) del df_val gc . collect (); del df_train gc . collect (); set_random_seed ( self ) \u00a4 set_random_seed. Source code in kaggle_runner/kernels/Shonenkov.py 98 99 100 def set_random_seed ( self ): \"\"\"set_random_seed.\"\"\" seed_everything ( SEED ) setup_transformers ( self ) \u00a4 setup_transformers. Source code in kaggle_runner/kernels/Shonenkov.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def setup_transformers ( self ): \"\"\"setup_transformers.\"\"\" if self . transformers is None : supliment_toxic = None # avoid overfit train_transforms = get_train_transforms (); synthesic_transforms_often = get_synthesic_transforms ( supliment_toxic , p = 0.5 ) synthesic_transforms_low = None tokenizer = XLMRobertaTokenizer . from_pretrained ( BACKBONE_PATH ) shuffle_transforms = ShuffleSentencesTransform ( always_apply = True ) self . transformers = { 'train_transforms' : train_transforms , 'synthesic_transforms_often' : synthesic_transforms_often , 'synthesic_transforms_low' : synthesic_transforms_low , 'tokenizer' : tokenizer , 'shuffle_transforms' : shuffle_transforms } ShonenkovChangeInner \u00a4 ShonenkovChangeInner. build_and_set_model ( self ) \u00a4 build_and_set_model. Source code in kaggle_runner/kernels/Shonenkov.py 274 275 276 277 def build_and_set_model ( self ): \"\"\"build_and_set_model.\"\"\" self . model = ToxicSimpleNNModelChangeInner () self . model = self . model . to ( self . device ) prepare_test_data ( self ) \u00a4 prepare_test_data. Source code in kaggle_runner/kernels/Shonenkov.py 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 def prepare_test_data ( self ): \"\"\"prepare_test_data.\"\"\" if os . path . exists ( '/content' ): # colab df_test = get_pickled_data ( \"test_XLM.pkl\" ) else : df_test = None if df_test is None : df_test = pd . read_csv ( f ' {ROOT_PATH} /input/jigsaw-multilingual-toxic-comment-classification/test.csv' , index_col = 'id' ) df_test [ 'comment_text' ] = df_test . parallel_apply ( lambda x : clean_text ( x [ 'content' ], x [ 'lang' ]), axis = 1 ) get_obj_or_dump ( \"test_XLM.pkl\" , default = df_test ) self . test_dataset = DatasetRetriever ( labels_or_ids = df_test . index . values , ## here different!!! comment_texts = df_test [ 'comment_text' ] . values , langs = df_test [ 'lang' ] . values , use_train_transforms = False , test = True , transformers = self . transformers ) del df_test gc . collect (); prepare_train_dev_data ( self ) \u00a4 prepare_train_dev_data. Source code in kaggle_runner/kernels/Shonenkov.py 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 def prepare_train_dev_data ( self ): \"\"\"prepare_train_dev_data.\"\"\" df_train = get_pickled_data ( \"train_XLM.pkl\" ) if df_train is None : df_train = pd . read_csv ( f ' {ROOT_PATH} /input/jigsaw-toxicity-train-data-with-aux/train_data.csv' ) df_train [ 'comment_text' ] = df_train . parallel_apply ( lambda x : clean_text ( x [ 'comment_text' ], x [ 'lang' ]), axis = 1 ) get_obj_or_dump ( \"train_XLM.pkl\" , default = df_train ) #supliment_toxic = get_toxic_comments(df_train) self . train_dataset = DatasetRetriever ( labels_or_ids = df_train [ 'toxic' ] . values , comment_texts = df_train [ 'comment_text' ] . values , langs = df_train [ 'lang' ] . values , severe_toxic = df_train [ 'severe_toxic' ] . values , obscene = df_train [ 'obscene' ] . values , threat = df_train [ 'threat' ] . values , insult = df_train [ 'insult' ] . values , identity_hate = df_train [ 'identity_hate' ] . values , use_train_transforms = True , transformers = self . transformers ) df_val = get_pickled_data ( \"val_XLM.pkl\" ) if df_val is None : df_val = pd . read_csv ( f ' {ROOT_PATH} /input/jigsaw-multilingual-toxic-comment-classification/validation.csv' , index_col = 'id' ) df_val [ 'comment_text' ] = df_val . parallel_apply ( lambda x : clean_text ( x [ 'comment_text' ], x [ 'lang' ]), axis = 1 ) get_obj_or_dump ( \"val_XLM.pkl\" , default = df_val ) self . validation_tune_dataset = DatasetRetriever ( labels_or_ids = df_val [ 'toxic' ] . values , comment_texts = df_val [ 'comment_text' ] . values , langs = df_val [ 'lang' ] . values , use_train_transforms = True , transformers = self . transformers ) self . validation_dataset = DatasetRetriever ( labels_or_ids = df_val [ 'toxic' ] . values , comment_texts = df_val [ 'comment_text' ] . values , langs = df_val [ 'lang' ] . values , use_train_transforms = False , transformers = self . transformers ) del df_val gc . collect (); del df_train gc . collect (); setup_transformers ( self ) \u00a4 setup_transformers. Source code in kaggle_runner/kernels/Shonenkov.py 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 def setup_transformers ( self ): \"\"\"setup_transformers.\"\"\" if not hasattr ( self , 'transformers' ) or self . transformers is None : supliment_toxic = None # avoid overfit train_transforms = get_train_transforms (); synthesic_transforms_often = get_synthesic_transforms ( supliment_toxic , p = 0.5 ) synthesic_transforms_low = None shuffle_transforms = ShuffleSentencesTransform ( always_apply = True ) #from tokenizers import BertWordPieceTokenizer #tokenizer = XLNetTokenizer.from_pretrained('xlnet-base-cased') tokenizer = XLMTokenizer . from_pretrained ( 'xlm-mlm-tlm-xnli15-1024' ) self . transformers = { 'train_transforms' : train_transforms , 'synthesic_transforms_often' : synthesic_transforms_often , 'synthesic_transforms_low' : synthesic_transforms_low , 'tokenizer' : tokenizer , 'shuffle_transforms' : shuffle_transforms } ToxicSimpleNNModelChangeInner \u00a4 ToxicSimpleNNModelChangeInner. __init__ ( self , use_aux = True ) special \u00a4 init . :param use_aux: Source code in kaggle_runner/kernels/Shonenkov.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 def __init__ ( self , use_aux = True ): \"\"\"__init__. :param use_aux: \"\"\" super ( ToxicSimpleNNModelChangeInner , self ) . __init__ () self . backbone = XLMModel . from_pretrained ( 'xlm-mlm-tlm-xnli15-1024' ) self . dropout = nn . Dropout ( 0.3 ) aux_len = 0 if use_aux : aux_len = 5 #in_features = self.backbone.layer[11].ff.layer_2.out_features*2 #in_features = self.backbone.pooler.dense.out_features*2 # bert - xmlrobert in_features = self . backbone . ffns [ 11 ] . lin2 . out_features * 2 # xlm self . linear = nn . Linear ( in_features = in_features , out_features = 2 + aux_len , ) forward ( self , input_ids , attention_masks ) \u00a4 forward. :param input_ids: :param attention_masks: Source code in kaggle_runner/kernels/Shonenkov.py 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 def forward ( self , input_ids , attention_masks ): \"\"\"forward. :param input_ids: :param attention_masks: \"\"\" bs , seq_length = input_ids . shape seq_x , _ = self . backbone ( input_ids = input_ids , attention_mask = attention_masks ) apool = torch . mean ( seq_x , 1 ) mpool , _ = torch . max ( seq_x , 1 ) x = torch . cat (( apool , mpool ), 1 ) x = self . dropout ( x ) return self . linear ( x ) get_pickled_data ( file_path ) \u00a4 get_pickled_data from current folder or kaggle data input folder. :param file_path: Source code in kaggle_runner/kernels/Shonenkov.py 56 57 58 59 60 61 62 63 64 65 66 67 68 def get_pickled_data ( file_path ): \"\"\"get_pickled_data from current folder or kaggle data input folder. :param file_path: \"\"\" obj = get_obj_or_dump ( file_path ) if obj is None : #may_debug(True) return get_obj_or_dump ( f \" {ROOT_PATH} /input/clean-pickle-for-jigsaw-toxicity/ {file_path} \" ) return obj get_synthesic_transforms ( supliment_toxic , p = 0.5 , mix = False ) \u00a4 get_synthesic_transforms. :param supliment_toxic: extra toxic data which will be used in synthesizing data :param p: probability :param mix: flag for mixing more data with toxic (it does not work with balanced sampler, too many toxic data) Source code in kaggle_runner/kernels/Shonenkov.py 45 46 47 48 49 50 51 52 53 def get_synthesic_transforms ( supliment_toxic , p = 0.5 , mix = False ): \"\"\"get_synthesic_transforms. :param supliment_toxic: extra toxic data which will be used in synthesizing data :param p: probability :param mix: flag for mixing more data with toxic (it does not work with balanced sampler, too many toxic data) \"\"\" return SynthesicOpenSubtitlesTransform ( p = p , supliment_toxic = supliment_toxic , mix = mix ) get_train_transforms () \u00a4 get_train_transforms. Source code in kaggle_runner/kernels/Shonenkov.py 34 35 36 37 38 39 40 41 42 43 def get_train_transforms (): \"\"\"get_train_transforms.\"\"\" return albumentations . Compose ([ ExcludeUsersMentionedTransform ( p = 0.95 ), ExcludeUrlsTransform ( p = 0.95 ), ExcludeNumbersTransform ( p = 0.95 ), ExcludeHashtagsTransform ( p = 0.95 ), ExcludeDuplicateSentencesTransform ( p = 0.95 ), ], p = 1.0 ) seed_everything ( seed ) \u00a4 seed_everything. :param seed: number to generate pseudo random states Source code in kaggle_runner/kernels/Shonenkov.py 21 22 23 24 25 26 27 28 29 30 31 32 def seed_everything ( seed ): \"\"\"seed_everything. :param seed: number to generate pseudo random states \"\"\" random . seed ( seed ) os . environ [ 'PYTHONHASHSEED' ] = str ( seed ) np . random . seed ( seed ) torch . manual_seed ( seed ) torch . cuda . manual_seed ( seed ) torch . backends . cudnn . deterministic = True torch . backends . cudnn . benchmark = True test_change_XLM_module () \u00a4 test_change_XLM_module. Source code in kaggle_runner/kernels/Shonenkov.py 410 411 412 413 414 415 416 417 def test_change_XLM_module (): \"\"\"test_change_XLM_module.\"\"\" from kaggle_runner.losses import LabelSmoothing k = ShonenkovChangeInner ( torch . device ( \"cpu\" ), DummyTrainGlobalConfig , metrics = None , loss_func = LabelSmoothing (), opt_func = None ) assert k is not None k . run ( dump_flag = False )","title":"Shonenkov.py"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov","text":"","title":"kaggle_runner.kernels.Shonenkov"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.DummyTrainGlobalConfig","text":"Global Config for this notebook","title":"DummyTrainGlobalConfig"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.DummyTrainGlobalConfig.SchedulerClass","text":"Reduce learning rate when a metric has stopped improving. Models often benefit from reducing the learning rate by a factor of 2-10 once learning stagnates. This scheduler reads a metrics quantity and if no improvement is seen for a 'patience' number of epochs, the learning rate is reduced. !!! args optimizer ( Optimizer ): Wrapped optimizer . mode ( str ): One of `min` , `max` . In `min` mode , lr will be reduced when the quantity monitored has stopped decreasing ; in `max` mode it will be reduced when the quantity monitored has stopped increasing . Default : 'min' . factor ( float ): Factor by which the learning rate will be reduced . new_lr = lr * factor . Default : 0 . 1 . patience ( int ): Number of epochs with no improvement after which learning rate will be reduced . For example , if `patience = 2` , then we will ignore the first 2 epochs with no improvement , and will only decrease the LR after the 3 rd epoch if the loss still hasn 't improved then. Default: 10. verbose (bool): If ``True``, prints a message to stdout for each update. Default: ``False``. threshold (float): Threshold for measuring the new optimum, to only focus on significant changes. Default: 1e-4. threshold_mode (str): One of `rel`, `abs`. In `rel` mode, dynamic_threshold = best * ( 1 + threshold ) in ' max ' mode or best * ( 1 - threshold ) in `min` mode. In `abs` mode, dynamic_threshold = best + threshold in `max` mode or best - threshold in `min` mode. Default: ' rel '. cooldown (int): Number of epochs to wait before resuming normal operation after lr has been reduced. Default: 0. min_lr (float or list): A scalar or a list of scalars. A lower bound on the learning rate of all param groups or each group respectively. Default: 0. eps (float): Minimal decay applied to lr. If the difference between new and old lr is smaller than eps, the update is ignored. Default: 1e-8. !!! example >>> optimizer = torch.optim.SGD(model.parameters(), lr=0.1, momentum=0.9) >>> scheduler = ReduceLROnPlateau(optimizer, ' min ' ) >>> for epoch in range ( 10 ): >>> train (...) >>> val_loss = validate (...) >>> # Note that step should be called after validate() >>> scheduler . step ( val_loss )","title":"SchedulerClass"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.Shonenkov","text":"Shonenkov kernel, use TPU to train; for data, down sampler and synthesizing.","title":"Shonenkov"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.Shonenkov.__init__","text":"init . :param device: :param config: :param kargs: Source code in kaggle_runner/kernels/Shonenkov.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def __init__ ( self , device , config , ** kargs ): \"\"\"__init__. :param device: :param config: :param kargs: \"\"\" super ( Shonenkov , self ) . __init__ ( ** kargs ) self . data = None self . transformers = None self . setup_transformers () self . device = device self . config = config self . learner = None","title":"__init__()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.Shonenkov.after_prepare_data_hook","text":"Put to databunch here Source code in kaggle_runner/kernels/Shonenkov.py 193 194 195 196 197 198 199 200 def after_prepare_data_hook ( self ): \"\"\"Put to databunch here\"\"\" logger . debug ( \"kernel use device %s \" , self . device ) self . data = DataBunch . create ( self . train_dataset , self . validation_dataset , bs = self . config . batch_size , device = self . device , num_workers = self . config . num_workers )","title":"after_prepare_data_hook()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.Shonenkov.build_and_set_model","text":"build_and_set_model. Source code in kaggle_runner/kernels/Shonenkov.py 93 94 95 96 def build_and_set_model ( self ): \"\"\"build_and_set_model.\"\"\" self . model = ToxicSimpleNNModel () self . model = self . model . to ( self . device )","title":"build_and_set_model()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.Shonenkov.peek_data","text":"peek_data. Source code in kaggle_runner/kernels/Shonenkov.py 202 203 204 205 206 207 208 209 210 211 212 213 def peek_data ( self ): \"\"\"peek_data.\"\"\" if self . data is not None : may_debug () o = self . data . one_batch () print ( o ) return o else : if self . logger is not None : self . logger . error ( \"peek_data failed, DataBunch is None.\" )","title":"peek_data()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.Shonenkov.prepare_test_data","text":"prepare_test_data. Source code in kaggle_runner/kernels/Shonenkov.py 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 def prepare_test_data ( self ): \"\"\"prepare_test_data.\"\"\" if os . path . exists ( '/content' ): # colab df_test = get_pickled_data ( \"test.pkl\" ) else : df_test = None if df_test is None : df_test = pd . read_csv ( f ' {ROOT_PATH} /input/jigsaw-multilingual-toxic-comment-classification/test.csv' , index_col = 'id' ) df_test [ 'comment_text' ] = df_test . parallel_apply ( lambda x : clean_text ( x [ 'content' ], x [ 'lang' ]), axis = 1 ) get_obj_or_dump ( \"test.pkl\" , default = df_test ) self . test_dataset = DatasetRetriever ( labels_or_ids = df_test . index . values , ## here different!!! comment_texts = df_test [ 'comment_text' ] . values , langs = df_test [ 'lang' ] . values , use_train_transforms = False , test = True , transformers = self . transformers ) del df_test gc . collect ();","title":"prepare_test_data()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.Shonenkov.prepare_train_dev_data","text":"prepare_train_dev_data. Source code in kaggle_runner/kernels/Shonenkov.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 def prepare_train_dev_data ( self ): \"\"\"prepare_train_dev_data.\"\"\" df_train = get_pickled_data ( \"train.pkl\" ) if df_train is None : df_train = pd . read_csv ( f ' {ROOT_PATH} /input/jigsaw-toxicity-train-data-with-aux/train_data.csv' ) df_train [ 'comment_text' ] = df_train . parallel_apply ( lambda x : clean_text ( x [ 'comment_text' ], x [ 'lang' ]), axis = 1 ) get_obj_or_dump ( \"train.pkl\" , default = df_train ) #supliment_toxic = get_toxic_comments(df_train) self . train_dataset = DatasetRetriever ( labels_or_ids = df_train [ 'toxic' ] . values , comment_texts = df_train [ 'comment_text' ] . values , langs = df_train [ 'lang' ] . values , severe_toxic = df_train [ 'severe_toxic' ] . values , obscene = df_train [ 'obscene' ] . values , threat = df_train [ 'threat' ] . values , insult = df_train [ 'insult' ] . values , identity_hate = df_train [ 'identity_hate' ] . values , use_train_transforms = True , transformers = self . transformers ) df_val = get_pickled_data ( \"val.pkl\" ) if df_val is None : df_val = pd . read_csv ( f ' {ROOT_PATH} /input/jigsaw-multilingual-toxic-comment-classification/validation.csv' , index_col = 'id' ) df_val [ 'comment_text' ] = df_val . parallel_apply ( lambda x : clean_text ( x [ 'comment_text' ], x [ 'lang' ]), axis = 1 ) get_obj_or_dump ( \"val.pkl\" , default = df_val ) self . validation_tune_dataset = DatasetRetriever ( labels_or_ids = df_val [ 'toxic' ] . values , comment_texts = df_val [ 'comment_text' ] . values , langs = df_val [ 'lang' ] . values , use_train_transforms = True , transformers = self . transformers ) self . validation_dataset = DatasetRetriever ( labels_or_ids = df_val [ 'toxic' ] . values , comment_texts = df_val [ 'comment_text' ] . values , langs = df_val [ 'lang' ] . values , use_train_transforms = False , transformers = self . transformers ) del df_val gc . collect (); del df_train gc . collect ();","title":"prepare_train_dev_data()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.Shonenkov.set_random_seed","text":"set_random_seed. Source code in kaggle_runner/kernels/Shonenkov.py 98 99 100 def set_random_seed ( self ): \"\"\"set_random_seed.\"\"\" seed_everything ( SEED )","title":"set_random_seed()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.Shonenkov.setup_transformers","text":"setup_transformers. Source code in kaggle_runner/kernels/Shonenkov.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def setup_transformers ( self ): \"\"\"setup_transformers.\"\"\" if self . transformers is None : supliment_toxic = None # avoid overfit train_transforms = get_train_transforms (); synthesic_transforms_often = get_synthesic_transforms ( supliment_toxic , p = 0.5 ) synthesic_transforms_low = None tokenizer = XLMRobertaTokenizer . from_pretrained ( BACKBONE_PATH ) shuffle_transforms = ShuffleSentencesTransform ( always_apply = True ) self . transformers = { 'train_transforms' : train_transforms , 'synthesic_transforms_often' : synthesic_transforms_often , 'synthesic_transforms_low' : synthesic_transforms_low , 'tokenizer' : tokenizer , 'shuffle_transforms' : shuffle_transforms }","title":"setup_transformers()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.ShonenkovChangeInner","text":"ShonenkovChangeInner.","title":"ShonenkovChangeInner"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.ShonenkovChangeInner.build_and_set_model","text":"build_and_set_model. Source code in kaggle_runner/kernels/Shonenkov.py 274 275 276 277 def build_and_set_model ( self ): \"\"\"build_and_set_model.\"\"\" self . model = ToxicSimpleNNModelChangeInner () self . model = self . model . to ( self . device )","title":"build_and_set_model()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.ShonenkovChangeInner.prepare_test_data","text":"prepare_test_data. Source code in kaggle_runner/kernels/Shonenkov.py 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 def prepare_test_data ( self ): \"\"\"prepare_test_data.\"\"\" if os . path . exists ( '/content' ): # colab df_test = get_pickled_data ( \"test_XLM.pkl\" ) else : df_test = None if df_test is None : df_test = pd . read_csv ( f ' {ROOT_PATH} /input/jigsaw-multilingual-toxic-comment-classification/test.csv' , index_col = 'id' ) df_test [ 'comment_text' ] = df_test . parallel_apply ( lambda x : clean_text ( x [ 'content' ], x [ 'lang' ]), axis = 1 ) get_obj_or_dump ( \"test_XLM.pkl\" , default = df_test ) self . test_dataset = DatasetRetriever ( labels_or_ids = df_test . index . values , ## here different!!! comment_texts = df_test [ 'comment_text' ] . values , langs = df_test [ 'lang' ] . values , use_train_transforms = False , test = True , transformers = self . transformers ) del df_test gc . collect ();","title":"prepare_test_data()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.ShonenkovChangeInner.prepare_train_dev_data","text":"prepare_train_dev_data. Source code in kaggle_runner/kernels/Shonenkov.py 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 def prepare_train_dev_data ( self ): \"\"\"prepare_train_dev_data.\"\"\" df_train = get_pickled_data ( \"train_XLM.pkl\" ) if df_train is None : df_train = pd . read_csv ( f ' {ROOT_PATH} /input/jigsaw-toxicity-train-data-with-aux/train_data.csv' ) df_train [ 'comment_text' ] = df_train . parallel_apply ( lambda x : clean_text ( x [ 'comment_text' ], x [ 'lang' ]), axis = 1 ) get_obj_or_dump ( \"train_XLM.pkl\" , default = df_train ) #supliment_toxic = get_toxic_comments(df_train) self . train_dataset = DatasetRetriever ( labels_or_ids = df_train [ 'toxic' ] . values , comment_texts = df_train [ 'comment_text' ] . values , langs = df_train [ 'lang' ] . values , severe_toxic = df_train [ 'severe_toxic' ] . values , obscene = df_train [ 'obscene' ] . values , threat = df_train [ 'threat' ] . values , insult = df_train [ 'insult' ] . values , identity_hate = df_train [ 'identity_hate' ] . values , use_train_transforms = True , transformers = self . transformers ) df_val = get_pickled_data ( \"val_XLM.pkl\" ) if df_val is None : df_val = pd . read_csv ( f ' {ROOT_PATH} /input/jigsaw-multilingual-toxic-comment-classification/validation.csv' , index_col = 'id' ) df_val [ 'comment_text' ] = df_val . parallel_apply ( lambda x : clean_text ( x [ 'comment_text' ], x [ 'lang' ]), axis = 1 ) get_obj_or_dump ( \"val_XLM.pkl\" , default = df_val ) self . validation_tune_dataset = DatasetRetriever ( labels_or_ids = df_val [ 'toxic' ] . values , comment_texts = df_val [ 'comment_text' ] . values , langs = df_val [ 'lang' ] . values , use_train_transforms = True , transformers = self . transformers ) self . validation_dataset = DatasetRetriever ( labels_or_ids = df_val [ 'toxic' ] . values , comment_texts = df_val [ 'comment_text' ] . values , langs = df_val [ 'lang' ] . values , use_train_transforms = False , transformers = self . transformers ) del df_val gc . collect (); del df_train gc . collect ();","title":"prepare_train_dev_data()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.ShonenkovChangeInner.setup_transformers","text":"setup_transformers. Source code in kaggle_runner/kernels/Shonenkov.py 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 def setup_transformers ( self ): \"\"\"setup_transformers.\"\"\" if not hasattr ( self , 'transformers' ) or self . transformers is None : supliment_toxic = None # avoid overfit train_transforms = get_train_transforms (); synthesic_transforms_often = get_synthesic_transforms ( supliment_toxic , p = 0.5 ) synthesic_transforms_low = None shuffle_transforms = ShuffleSentencesTransform ( always_apply = True ) #from tokenizers import BertWordPieceTokenizer #tokenizer = XLNetTokenizer.from_pretrained('xlnet-base-cased') tokenizer = XLMTokenizer . from_pretrained ( 'xlm-mlm-tlm-xnli15-1024' ) self . transformers = { 'train_transforms' : train_transforms , 'synthesic_transforms_often' : synthesic_transforms_often , 'synthesic_transforms_low' : synthesic_transforms_low , 'tokenizer' : tokenizer , 'shuffle_transforms' : shuffle_transforms }","title":"setup_transformers()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.ToxicSimpleNNModelChangeInner","text":"ToxicSimpleNNModelChangeInner.","title":"ToxicSimpleNNModelChangeInner"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.ToxicSimpleNNModelChangeInner.__init__","text":"init . :param use_aux: Source code in kaggle_runner/kernels/Shonenkov.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 def __init__ ( self , use_aux = True ): \"\"\"__init__. :param use_aux: \"\"\" super ( ToxicSimpleNNModelChangeInner , self ) . __init__ () self . backbone = XLMModel . from_pretrained ( 'xlm-mlm-tlm-xnli15-1024' ) self . dropout = nn . Dropout ( 0.3 ) aux_len = 0 if use_aux : aux_len = 5 #in_features = self.backbone.layer[11].ff.layer_2.out_features*2 #in_features = self.backbone.pooler.dense.out_features*2 # bert - xmlrobert in_features = self . backbone . ffns [ 11 ] . lin2 . out_features * 2 # xlm self . linear = nn . Linear ( in_features = in_features , out_features = 2 + aux_len , )","title":"__init__()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.ToxicSimpleNNModelChangeInner.forward","text":"forward. :param input_ids: :param attention_masks: Source code in kaggle_runner/kernels/Shonenkov.py 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 def forward ( self , input_ids , attention_masks ): \"\"\"forward. :param input_ids: :param attention_masks: \"\"\" bs , seq_length = input_ids . shape seq_x , _ = self . backbone ( input_ids = input_ids , attention_mask = attention_masks ) apool = torch . mean ( seq_x , 1 ) mpool , _ = torch . max ( seq_x , 1 ) x = torch . cat (( apool , mpool ), 1 ) x = self . dropout ( x ) return self . linear ( x )","title":"forward()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.get_pickled_data","text":"get_pickled_data from current folder or kaggle data input folder. :param file_path: Source code in kaggle_runner/kernels/Shonenkov.py 56 57 58 59 60 61 62 63 64 65 66 67 68 def get_pickled_data ( file_path ): \"\"\"get_pickled_data from current folder or kaggle data input folder. :param file_path: \"\"\" obj = get_obj_or_dump ( file_path ) if obj is None : #may_debug(True) return get_obj_or_dump ( f \" {ROOT_PATH} /input/clean-pickle-for-jigsaw-toxicity/ {file_path} \" ) return obj","title":"get_pickled_data()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.get_synthesic_transforms","text":"get_synthesic_transforms. :param supliment_toxic: extra toxic data which will be used in synthesizing data :param p: probability :param mix: flag for mixing more data with toxic (it does not work with balanced sampler, too many toxic data) Source code in kaggle_runner/kernels/Shonenkov.py 45 46 47 48 49 50 51 52 53 def get_synthesic_transforms ( supliment_toxic , p = 0.5 , mix = False ): \"\"\"get_synthesic_transforms. :param supliment_toxic: extra toxic data which will be used in synthesizing data :param p: probability :param mix: flag for mixing more data with toxic (it does not work with balanced sampler, too many toxic data) \"\"\" return SynthesicOpenSubtitlesTransform ( p = p , supliment_toxic = supliment_toxic , mix = mix )","title":"get_synthesic_transforms()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.get_train_transforms","text":"get_train_transforms. Source code in kaggle_runner/kernels/Shonenkov.py 34 35 36 37 38 39 40 41 42 43 def get_train_transforms (): \"\"\"get_train_transforms.\"\"\" return albumentations . Compose ([ ExcludeUsersMentionedTransform ( p = 0.95 ), ExcludeUrlsTransform ( p = 0.95 ), ExcludeNumbersTransform ( p = 0.95 ), ExcludeHashtagsTransform ( p = 0.95 ), ExcludeDuplicateSentencesTransform ( p = 0.95 ), ], p = 1.0 )","title":"get_train_transforms()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.seed_everything","text":"seed_everything. :param seed: number to generate pseudo random states Source code in kaggle_runner/kernels/Shonenkov.py 21 22 23 24 25 26 27 28 29 30 31 32 def seed_everything ( seed ): \"\"\"seed_everything. :param seed: number to generate pseudo random states \"\"\" random . seed ( seed ) os . environ [ 'PYTHONHASHSEED' ] = str ( seed ) np . random . seed ( seed ) torch . manual_seed ( seed ) torch . cuda . manual_seed ( seed ) torch . backends . cudnn . deterministic = True torch . backends . cudnn . benchmark = True","title":"seed_everything()"},{"location":"kaggle_runner/kernels/Shonenkov/#kaggle_runner.kernels.Shonenkov.test_change_XLM_module","text":"test_change_XLM_module. Source code in kaggle_runner/kernels/Shonenkov.py 410 411 412 413 414 415 416 417 def test_change_XLM_module (): \"\"\"test_change_XLM_module.\"\"\" from kaggle_runner.losses import LabelSmoothing k = ShonenkovChangeInner ( torch . device ( \"cpu\" ), DummyTrainGlobalConfig , metrics = None , loss_func = LabelSmoothing (), opt_func = None ) assert k is not None k . run ( dump_flag = False )","title":"test_change_XLM_module()"},{"location":"kaggle_runner/kernels/bert/","text":"\u00a4","title":"bert.py"},{"location":"kaggle_runner/kernels/bert/#kaggle_runner.kernels.bert","text":"","title":"kaggle_runner.kernels.bert"},{"location":"kaggle_runner/kernels/bert_torch/","text":"\u00a4","title":"bert_torch.py"},{"location":"kaggle_runner/kernels/bert_torch/#kaggle_runner.kernels.bert_torch","text":"","title":"kaggle_runner.kernels.bert_torch"},{"location":"kaggle_runner/kernels/fastai_kernel/","text":"\u00a4 FastAIKernel \u00a4 fast.ai thing create_learner ( k = None , data = None , model = None , opt_func = None , loss_func = None , metrics = None , ** kargs ) classmethod \u00a4 opt_func should pass seprately Source code in kaggle_runner/kernels/fastai_kernel.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 @classmethod def create_learner ( cls , k = None , data = None , model = None , opt_func = None , loss_func = None , metrics = None , ** kargs ): \"\"\"opt_func should pass seprately\"\"\" if k is not None : data = k . data if hasattr ( k , 'data' ) and k . data is not None else data model = k . model if hasattr ( k , 'model' ) and k . model is not None else model loss_func = k . model_loss if hasattr ( k , 'model_loss' ) and k . model_loss is not None else loss_func metrics = k . model_metrics if hasattr ( k , 'model_metrics' ) and k . model_metrics is not None else metrics assert data is not None assert opt_func is not None learner = Learner ( data , model , opt_func , loss_func = loss_func , metrics = metrics , bn_wd = False , ** kargs ) # opt_func postitional parameter is before loss_func return learner set_metrics ( self , metrics ) \u00a4 set_metrics for model training :return: None Source code in kaggle_runner/kernels/fastai_kernel.py 53 54 def set_metrics ( self , metrics ): self . model_metrics = metrics","title":"fastai_kernel.py"},{"location":"kaggle_runner/kernels/fastai_kernel/#kaggle_runner.kernels.fastai_kernel","text":"","title":"kaggle_runner.kernels.fastai_kernel"},{"location":"kaggle_runner/kernels/fastai_kernel/#kaggle_runner.kernels.fastai_kernel.FastAIKernel","text":"fast.ai thing","title":"FastAIKernel"},{"location":"kaggle_runner/kernels/fastai_kernel/#kaggle_runner.kernels.fastai_kernel.FastAIKernel.create_learner","text":"opt_func should pass seprately Source code in kaggle_runner/kernels/fastai_kernel.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 @classmethod def create_learner ( cls , k = None , data = None , model = None , opt_func = None , loss_func = None , metrics = None , ** kargs ): \"\"\"opt_func should pass seprately\"\"\" if k is not None : data = k . data if hasattr ( k , 'data' ) and k . data is not None else data model = k . model if hasattr ( k , 'model' ) and k . model is not None else model loss_func = k . model_loss if hasattr ( k , 'model_loss' ) and k . model_loss is not None else loss_func metrics = k . model_metrics if hasattr ( k , 'model_metrics' ) and k . model_metrics is not None else metrics assert data is not None assert opt_func is not None learner = Learner ( data , model , opt_func , loss_func = loss_func , metrics = metrics , bn_wd = False , ** kargs ) # opt_func postitional parameter is before loss_func return learner","title":"create_learner()"},{"location":"kaggle_runner/kernels/fastai_kernel/#kaggle_runner.kernels.fastai_kernel.FastAIKernel.set_metrics","text":"set_metrics for model training :return: None Source code in kaggle_runner/kernels/fastai_kernel.py 53 54 def set_metrics ( self , metrics ): self . model_metrics = metrics","title":"set_metrics()"},{"location":"kaggle_runner/kernels/kernel/","text":"\u00a4 KaggleKernel \u00a4 Kernel for kaggle competitions/researchs !!! attributes _stage model_metrics data_loader optimizer model train_X developing submit_run test_X model_loss num_epochs device result_analyzer logger dependency dev_X train_Y dev_Y after_submit ( self ) \u00a4 after_submit should report to our logger, for next step analyze Source code in kaggle_runner/kernels/kernel.py 285 286 287 def after_submit ( self ): \"after_submit should report to our logger, for next step analyze\" pass load_state_continue_run ( file_name = 'run_state.pkl' , logger = None ) classmethod \u00a4 :param file_name: :return: the kernel object, need to continue Source code in kaggle_runner/kernels/kernel.py 263 264 265 266 267 268 269 270 271 @classmethod def load_state_continue_run ( cls , file_name = \"run_state.pkl\" , logger = None ): \"\"\" :param file_name: :return: the kernel object, need to continue \"\"\" self = cls . _load_state ( file_name = file_name , logger = logger ) self . continue_run () run ( self , start_stage = None , end_stage =< KernelRunningState . SAVE_SUBMISSION_DONE : 5 > , dump_flag = False ) \u00a4 :param start_stage: if set, will overwrite the stage :param end_stage: :param dump_flag: :return: Source code in kaggle_runner/kernels/kernel.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 def run ( self , start_stage = None , end_stage = KernelRunningState . SAVE_SUBMISSION_DONE , dump_flag = False , ): \"\"\" :param start_stage: if set, will overwrite the stage :param end_stage: :param dump_flag: :return: \"\"\" self . continue_run ( start_stage = start_stage , end_stage = end_stage , dump_flag = dump_flag ) set_data_size ( self ) \u00a4 might be useful when test different input datasize Source code in kaggle_runner/kernels/kernel.py 98 99 100 def set_data_size ( self ): \"might be useful when test different input datasize\" pass set_metrics ( self , metrics ) \u00a4 set_metrics for model training :return: None Source code in kaggle_runner/kernels/kernel.py 121 122 123 124 125 126 def set_metrics ( self , metrics ): \"\"\" set_metrics for model training :return: None \"\"\" KaggleKernelOnlyPredict \u00a4 build_and_set_model ( self ) \u00a4 load pretrained one Source code in kaggle_runner/kernels/kernel.py 319 320 321 322 @abstractmethod def build_and_set_model ( self ): \"\"\"load pretrained one\"\"\" pass KernelGroup \u00a4 Kernel Group to try different combination of kernels hyperparameter Follow this example : https : // sphinxcontrib - napoleon . readthedocs . io / en / latest / example_google . html !!! attributes kernels ( list ): List of kernels whose results will be analyse together .","title":"kernel.py"},{"location":"kaggle_runner/kernels/kernel/#kaggle_runner.kernels.kernel","text":"","title":"kaggle_runner.kernels.kernel"},{"location":"kaggle_runner/kernels/kernel/#kaggle_runner.kernels.kernel.KaggleKernel","text":"Kernel for kaggle competitions/researchs !!! attributes _stage model_metrics data_loader optimizer model train_X developing submit_run test_X model_loss num_epochs device result_analyzer logger dependency dev_X train_Y dev_Y","title":"KaggleKernel"},{"location":"kaggle_runner/kernels/kernel/#kaggle_runner.kernels.kernel.KaggleKernel.after_submit","text":"after_submit should report to our logger, for next step analyze Source code in kaggle_runner/kernels/kernel.py 285 286 287 def after_submit ( self ): \"after_submit should report to our logger, for next step analyze\" pass","title":"after_submit()"},{"location":"kaggle_runner/kernels/kernel/#kaggle_runner.kernels.kernel.KaggleKernel.load_state_continue_run","text":":param file_name: :return: the kernel object, need to continue Source code in kaggle_runner/kernels/kernel.py 263 264 265 266 267 268 269 270 271 @classmethod def load_state_continue_run ( cls , file_name = \"run_state.pkl\" , logger = None ): \"\"\" :param file_name: :return: the kernel object, need to continue \"\"\" self = cls . _load_state ( file_name = file_name , logger = logger ) self . continue_run ()","title":"load_state_continue_run()"},{"location":"kaggle_runner/kernels/kernel/#kaggle_runner.kernels.kernel.KaggleKernel.run","text":":param start_stage: if set, will overwrite the stage :param end_stage: :param dump_flag: :return: Source code in kaggle_runner/kernels/kernel.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 def run ( self , start_stage = None , end_stage = KernelRunningState . SAVE_SUBMISSION_DONE , dump_flag = False , ): \"\"\" :param start_stage: if set, will overwrite the stage :param end_stage: :param dump_flag: :return: \"\"\" self . continue_run ( start_stage = start_stage , end_stage = end_stage , dump_flag = dump_flag )","title":"run()"},{"location":"kaggle_runner/kernels/kernel/#kaggle_runner.kernels.kernel.KaggleKernel.set_data_size","text":"might be useful when test different input datasize Source code in kaggle_runner/kernels/kernel.py 98 99 100 def set_data_size ( self ): \"might be useful when test different input datasize\" pass","title":"set_data_size()"},{"location":"kaggle_runner/kernels/kernel/#kaggle_runner.kernels.kernel.KaggleKernel.set_metrics","text":"set_metrics for model training :return: None Source code in kaggle_runner/kernels/kernel.py 121 122 123 124 125 126 def set_metrics ( self , metrics ): \"\"\" set_metrics for model training :return: None \"\"\"","title":"set_metrics()"},{"location":"kaggle_runner/kernels/kernel/#kaggle_runner.kernels.kernel.KaggleKernelOnlyPredict","text":"","title":"KaggleKernelOnlyPredict"},{"location":"kaggle_runner/kernels/kernel/#kaggle_runner.kernels.kernel.KaggleKernelOnlyPredict.build_and_set_model","text":"load pretrained one Source code in kaggle_runner/kernels/kernel.py 319 320 321 322 @abstractmethod def build_and_set_model ( self ): \"\"\"load pretrained one\"\"\" pass","title":"build_and_set_model()"},{"location":"kaggle_runner/kernels/kernel/#kaggle_runner.kernels.kernel.KernelGroup","text":"Kernel Group to try different combination of kernels hyperparameter Follow this example : https : // sphinxcontrib - napoleon . readthedocs . io / en / latest / example_google . html !!! attributes kernels ( list ): List of kernels whose results will be analyse together .","title":"KernelGroup"},{"location":"kaggle_runner/kernels/pytorchKernel/","text":"\u00a4 FocalLoss \u00a4 forward ( self , input , target ) \u00a4 Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in kaggle_runner/kernels/pytorchKernel.py 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 def forward ( self , input , target ): if self . from_logits : input = torch . sigmoid ( input ) y = target not_y = 1 - target y_hat = input not_y_hat = 1 - input y_hat = y_hat . clamp ( self . eps , 1.0 - self . eps ) not_y_hat = not_y_hat . clamp ( self . eps , 1.0 - self . eps ) loss = ( - 1 * self . alpha * not_y_hat ** self . gamma * y * torch . log ( y_hat ) ) # cross entropy loss += ( - 1 * ( 1 - self . alpha ) * y_hat ** self . gamma * not_y * torch . log ( not_y_hat ) ) loss *= self . magnifier return loss . mean () RoIHeads_loss_customized \u00a4 forward ( self , features , proposals , image_shapes , targets = None ) \u00a4 Source code in kaggle_runner/kernels/pytorchKernel.py 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 def forward ( self , features , proposals , image_shapes , targets = None ): \"\"\" Arguments: features (List[Tensor]) proposals (List[Tensor[N, 4]]) image_shapes (List[Tuple[H, W]]) targets (List[Dict]) \"\"\" maskrcnn_loss_func = maskrcnn_loss fastrcnn_loss_func = fastrcnn_loss keypointrcnn_loss_func = keypointrcnn_loss eval_when_train = not self . training try : if self . _eval_when_train : eval_when_train = True except AttributeError : pass if self . maskrcnn_loss_customized is not None : maskrcnn_loss_func = self . maskrcnn_loss_customized if self . fastrcnn_loss_customized is not None : fastrcnn_loss_func = self . fastrcnn_loss_customized if self . keypointrcnn_loss_customized is not None : keypointrcnn_loss_func = self . keypointrcnn_loss_customized if self . training : ( proposals , matched_idxs , labels , regression_targets , ) = self . select_training_samples ( proposals , targets ) box_features = self . box_roi_pool ( features , proposals , image_shapes ) box_features = self . box_head ( box_features ) class_logits , box_regression = self . box_predictor ( box_features ) result , losses = [], {} if self . training : loss_classifier , loss_box_reg = fastrcnn_loss_func ( class_logits , box_regression , labels , regression_targets ) losses = dict ( loss_classifier = loss_classifier , loss_box_reg = loss_box_reg ) if eval_when_train : boxes , scores , labels = self . postprocess_detections ( class_logits , box_regression , proposals , image_shapes ) num_images = len ( boxes ) for i in range ( num_images ): result . append ( dict ( boxes = boxes [ i ], labels = labels [ i ], scores = scores [ i ],)) if self . has_mask : mask_proposals = [ p [ \"boxes\" ] for p in result ] if self . training : # during training, only focus on positive boxes num_images = len ( proposals ) mask_proposals = [] pos_matched_idxs = [] for img_id in range ( num_images ): pos = torch . nonzero ( labels [ img_id ] > 0 ) . squeeze ( 1 ) mask_proposals . append ( proposals [ img_id ][ pos ]) pos_matched_idxs . append ( matched_idxs [ img_id ][ pos ]) mask_features = self . mask_roi_pool ( features , mask_proposals , image_shapes ) mask_features = self . mask_head ( mask_features ) mask_logits = self . mask_predictor ( mask_features ) loss_mask = {} if self . training : gt_masks = [ t [ \"masks\" ] for t in targets ] gt_labels = [ t [ \"labels\" ] for t in targets ] loss_mask = maskrcnn_loss_func ( mask_logits , mask_proposals , gt_masks , gt_labels , pos_matched_idxs ) loss_mask = dict ( loss_mask = loss_mask ) if eval_when_train : labels = [ r [ \"labels\" ] for r in result ] masks_probs = maskrcnn_inference ( mask_logits , labels ) for mask_prob , r in zip ( masks_probs , result ): r [ \"masks\" ] = mask_prob losses . update ( loss_mask ) if self . has_keypoint (): keypoint_proposals = [ p [ \"boxes\" ] for p in result ] if self . training : # during training, only focus on positive boxes num_images = len ( proposals ) keypoint_proposals = [] pos_matched_idxs = [] for img_id in range ( num_images ): pos = torch . nonzero ( labels [ img_id ] > 0 ) . squeeze ( 1 ) keypoint_proposals . append ( proposals [ img_id ][ pos ]) pos_matched_idxs . append ( matched_idxs [ img_id ][ pos ]) keypoint_features = self . keypoint_roi_pool ( features , keypoint_proposals , image_shapes ) keypoint_features = self . keypoint_head ( keypoint_features ) keypoint_logits = self . keypoint_predictor ( keypoint_features ) loss_keypoint = {} if self . training : gt_keypoints = [ t [ \"keypoints\" ] for t in targets ] loss_keypoint = keypointrcnn_loss_func ( keypoint_logits , keypoint_proposals , gt_keypoints , pos_matched_idxs ) loss_keypoint = dict ( loss_keypoint = loss_keypoint ) if eval_when_train : keypoints_probs , kp_scores = keypointrcnn_inference ( keypoint_logits , keypoint_proposals ) for keypoint_prob , kps , r in zip ( keypoints_probs , kp_scores , result ): r [ \"keypoints\" ] = keypoint_prob r [ \"keypoints_scores\" ] = kps losses . update ( loss_keypoint ) return result , losses maskrcnn_loss_focal ( mask_logits , proposals , gt_masks , gt_labels , mask_matched_idxs , focal_loss_func = None ) \u00a4 Returns: Type Description mask_loss (Tensor) scalar tensor containing the loss Source code in kaggle_runner/kernels/pytorchKernel.py 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 def maskrcnn_loss_focal ( mask_logits , proposals , gt_masks , gt_labels , mask_matched_idxs , focal_loss_func = None ): \"\"\" Arguments: proposals (list[BoxList]) mask_logits (Tensor) targets (list[BoxList]) Return: mask_loss (Tensor): scalar tensor containing the loss \"\"\" discretization_size = mask_logits . shape [ - 1 ] labels = [ l [ idxs ] for l , idxs in zip ( gt_labels , mask_matched_idxs )] mask_targets = [ project_masks_on_boxes ( m , p , i , discretization_size ) for m , p , i in zip ( gt_masks , proposals , mask_matched_idxs ) ] labels = torch . cat ( labels , dim = 0 ) mask_targets = torch . cat ( mask_targets , dim = 0 ) # torch.mean (in binary_cross_entropy_with_logits) doesn't # accept empty tensors, so handle it separately if mask_targets . numel () == 0 : return mask_logits . sum () * 0 loss_func = F . binary_cross_entropy_with_logits if focal_loss_func is not None : loss_func = focal_loss_func mask_loss = loss_func ( mask_logits [ torch . arange ( labels . shape [ 0 ], device = labels . device ), labels ], mask_targets , ) return mask_loss project_masks_on_boxes ( gt_masks , boxes , matched_idxs , M ) \u00a4 Given segmentation masks and the bounding boxes corresponding to the location of the masks in the image, this function crops and resizes the masks in the position defined by the boxes. This prepares the masks for them to be fed to the loss computation as the targets. Source code in kaggle_runner/kernels/pytorchKernel.py 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 def project_masks_on_boxes ( gt_masks , boxes , matched_idxs , M ): \"\"\" Given segmentation masks and the bounding boxes corresponding to the location of the masks in the image, this function crops and resizes the masks in the position defined by the boxes. This prepares the masks for them to be fed to the loss computation as the targets. \"\"\" matched_idxs = matched_idxs . to ( boxes ) rois = torch . cat ([ matched_idxs [:, None ], boxes ], dim = 1 ) gt_masks = gt_masks [:, None ] . to ( rois ) return roi_align ( gt_masks , rois , ( M , M ), 1 )[:, 0 ]","title":"pytorchKernel.py"},{"location":"kaggle_runner/kernels/pytorchKernel/#kaggle_runner.kernels.pytorchKernel","text":"","title":"kaggle_runner.kernels.pytorchKernel"},{"location":"kaggle_runner/kernels/pytorchKernel/#kaggle_runner.kernels.pytorchKernel.FocalLoss","text":"","title":"FocalLoss"},{"location":"kaggle_runner/kernels/pytorchKernel/#kaggle_runner.kernels.pytorchKernel.FocalLoss.forward","text":"Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in kaggle_runner/kernels/pytorchKernel.py 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 def forward ( self , input , target ): if self . from_logits : input = torch . sigmoid ( input ) y = target not_y = 1 - target y_hat = input not_y_hat = 1 - input y_hat = y_hat . clamp ( self . eps , 1.0 - self . eps ) not_y_hat = not_y_hat . clamp ( self . eps , 1.0 - self . eps ) loss = ( - 1 * self . alpha * not_y_hat ** self . gamma * y * torch . log ( y_hat ) ) # cross entropy loss += ( - 1 * ( 1 - self . alpha ) * y_hat ** self . gamma * not_y * torch . log ( not_y_hat ) ) loss *= self . magnifier return loss . mean ()","title":"forward()"},{"location":"kaggle_runner/kernels/pytorchKernel/#kaggle_runner.kernels.pytorchKernel.RoIHeads_loss_customized","text":"","title":"RoIHeads_loss_customized"},{"location":"kaggle_runner/kernels/pytorchKernel/#kaggle_runner.kernels.pytorchKernel.RoIHeads_loss_customized.forward","text":"Source code in kaggle_runner/kernels/pytorchKernel.py 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 def forward ( self , features , proposals , image_shapes , targets = None ): \"\"\" Arguments: features (List[Tensor]) proposals (List[Tensor[N, 4]]) image_shapes (List[Tuple[H, W]]) targets (List[Dict]) \"\"\" maskrcnn_loss_func = maskrcnn_loss fastrcnn_loss_func = fastrcnn_loss keypointrcnn_loss_func = keypointrcnn_loss eval_when_train = not self . training try : if self . _eval_when_train : eval_when_train = True except AttributeError : pass if self . maskrcnn_loss_customized is not None : maskrcnn_loss_func = self . maskrcnn_loss_customized if self . fastrcnn_loss_customized is not None : fastrcnn_loss_func = self . fastrcnn_loss_customized if self . keypointrcnn_loss_customized is not None : keypointrcnn_loss_func = self . keypointrcnn_loss_customized if self . training : ( proposals , matched_idxs , labels , regression_targets , ) = self . select_training_samples ( proposals , targets ) box_features = self . box_roi_pool ( features , proposals , image_shapes ) box_features = self . box_head ( box_features ) class_logits , box_regression = self . box_predictor ( box_features ) result , losses = [], {} if self . training : loss_classifier , loss_box_reg = fastrcnn_loss_func ( class_logits , box_regression , labels , regression_targets ) losses = dict ( loss_classifier = loss_classifier , loss_box_reg = loss_box_reg ) if eval_when_train : boxes , scores , labels = self . postprocess_detections ( class_logits , box_regression , proposals , image_shapes ) num_images = len ( boxes ) for i in range ( num_images ): result . append ( dict ( boxes = boxes [ i ], labels = labels [ i ], scores = scores [ i ],)) if self . has_mask : mask_proposals = [ p [ \"boxes\" ] for p in result ] if self . training : # during training, only focus on positive boxes num_images = len ( proposals ) mask_proposals = [] pos_matched_idxs = [] for img_id in range ( num_images ): pos = torch . nonzero ( labels [ img_id ] > 0 ) . squeeze ( 1 ) mask_proposals . append ( proposals [ img_id ][ pos ]) pos_matched_idxs . append ( matched_idxs [ img_id ][ pos ]) mask_features = self . mask_roi_pool ( features , mask_proposals , image_shapes ) mask_features = self . mask_head ( mask_features ) mask_logits = self . mask_predictor ( mask_features ) loss_mask = {} if self . training : gt_masks = [ t [ \"masks\" ] for t in targets ] gt_labels = [ t [ \"labels\" ] for t in targets ] loss_mask = maskrcnn_loss_func ( mask_logits , mask_proposals , gt_masks , gt_labels , pos_matched_idxs ) loss_mask = dict ( loss_mask = loss_mask ) if eval_when_train : labels = [ r [ \"labels\" ] for r in result ] masks_probs = maskrcnn_inference ( mask_logits , labels ) for mask_prob , r in zip ( masks_probs , result ): r [ \"masks\" ] = mask_prob losses . update ( loss_mask ) if self . has_keypoint (): keypoint_proposals = [ p [ \"boxes\" ] for p in result ] if self . training : # during training, only focus on positive boxes num_images = len ( proposals ) keypoint_proposals = [] pos_matched_idxs = [] for img_id in range ( num_images ): pos = torch . nonzero ( labels [ img_id ] > 0 ) . squeeze ( 1 ) keypoint_proposals . append ( proposals [ img_id ][ pos ]) pos_matched_idxs . append ( matched_idxs [ img_id ][ pos ]) keypoint_features = self . keypoint_roi_pool ( features , keypoint_proposals , image_shapes ) keypoint_features = self . keypoint_head ( keypoint_features ) keypoint_logits = self . keypoint_predictor ( keypoint_features ) loss_keypoint = {} if self . training : gt_keypoints = [ t [ \"keypoints\" ] for t in targets ] loss_keypoint = keypointrcnn_loss_func ( keypoint_logits , keypoint_proposals , gt_keypoints , pos_matched_idxs ) loss_keypoint = dict ( loss_keypoint = loss_keypoint ) if eval_when_train : keypoints_probs , kp_scores = keypointrcnn_inference ( keypoint_logits , keypoint_proposals ) for keypoint_prob , kps , r in zip ( keypoints_probs , kp_scores , result ): r [ \"keypoints\" ] = keypoint_prob r [ \"keypoints_scores\" ] = kps losses . update ( loss_keypoint ) return result , losses","title":"forward()"},{"location":"kaggle_runner/kernels/pytorchKernel/#kaggle_runner.kernels.pytorchKernel.maskrcnn_loss_focal","text":"Returns: Type Description mask_loss (Tensor) scalar tensor containing the loss Source code in kaggle_runner/kernels/pytorchKernel.py 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 def maskrcnn_loss_focal ( mask_logits , proposals , gt_masks , gt_labels , mask_matched_idxs , focal_loss_func = None ): \"\"\" Arguments: proposals (list[BoxList]) mask_logits (Tensor) targets (list[BoxList]) Return: mask_loss (Tensor): scalar tensor containing the loss \"\"\" discretization_size = mask_logits . shape [ - 1 ] labels = [ l [ idxs ] for l , idxs in zip ( gt_labels , mask_matched_idxs )] mask_targets = [ project_masks_on_boxes ( m , p , i , discretization_size ) for m , p , i in zip ( gt_masks , proposals , mask_matched_idxs ) ] labels = torch . cat ( labels , dim = 0 ) mask_targets = torch . cat ( mask_targets , dim = 0 ) # torch.mean (in binary_cross_entropy_with_logits) doesn't # accept empty tensors, so handle it separately if mask_targets . numel () == 0 : return mask_logits . sum () * 0 loss_func = F . binary_cross_entropy_with_logits if focal_loss_func is not None : loss_func = focal_loss_func mask_loss = loss_func ( mask_logits [ torch . arange ( labels . shape [ 0 ], device = labels . device ), labels ], mask_targets , ) return mask_loss","title":"maskrcnn_loss_focal()"},{"location":"kaggle_runner/kernels/pytorchKernel/#kaggle_runner.kernels.pytorchKernel.project_masks_on_boxes","text":"Given segmentation masks and the bounding boxes corresponding to the location of the masks in the image, this function crops and resizes the masks in the position defined by the boxes. This prepares the masks for them to be fed to the loss computation as the targets. Source code in kaggle_runner/kernels/pytorchKernel.py 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 def project_masks_on_boxes ( gt_masks , boxes , matched_idxs , M ): \"\"\" Given segmentation masks and the bounding boxes corresponding to the location of the masks in the image, this function crops and resizes the masks in the position defined by the boxes. This prepares the masks for them to be fed to the loss computation as the targets. \"\"\" matched_idxs = matched_idxs . to ( boxes ) rois = torch . cat ([ matched_idxs [:, None ], boxes ], dim = 1 ) gt_masks = gt_masks [:, None ] . to ( rois ) return roi_align ( gt_masks , rois , ( M , M ), 1 )[:, 0 ]","title":"project_masks_on_boxes()"},{"location":"kaggle_runner/metrics/meters/","text":"\u00a4 AverageMeter \u00a4 Computes and stores the average and current value Meter \u00a4 A meter to keep track of iou and dice scores throughout an epoch","title":"meters.py"},{"location":"kaggle_runner/metrics/meters/#kaggle_runner.metrics.meters","text":"","title":"kaggle_runner.metrics.meters"},{"location":"kaggle_runner/metrics/meters/#kaggle_runner.metrics.meters.AverageMeter","text":"Computes and stores the average and current value","title":"AverageMeter"},{"location":"kaggle_runner/metrics/meters/#kaggle_runner.metrics.meters.Meter","text":"A meter to keep track of iou and dice scores throughout an epoch","title":"Meter"},{"location":"kaggle_runner/metrics/metrics/","text":"\u00a4 bin_prd_clsf_info_neg ( y_true , y_pred , threshold = 0.5 , N_MORE = True , epsilon = 1e-07 ) \u00a4 refer to this: https://stats.stackexchange.com/questions/49579/balanced-accuracy-vs-f-1-score Both F1 and b_acc are metrics for classifier evaluation, that (to some extent) handle class imbalance. Depending of which of the two classes (N or P) outnumbers the other, each metric is outperforms the other. 1) If N >> P, f1 is a better. 2) If P >> N, b_acc is better. For code: refer to this: https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/70841 :param y_true: :param y_pred: :param threshold: :return: accuracy, f1 for this batch... not the global one, we need to be careful!! Source code in kaggle_runner/metrics/metrics.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 def bin_prd_clsf_info_neg ( y_true , y_pred , threshold = 0.5 , N_MORE = True , epsilon = 1e-7 ): \"\"\" refer to this: https://stats.stackexchange.com/questions/49579/balanced-accuracy-vs-f-1-score Both F1 and b_acc are metrics for classifier evaluation, that (to some extent) handle class imbalance. Depending of which of the two classes (N or P) outnumbers the other, each metric is outperforms the other. 1) If N >> P, f1 is a better. 2) If P >> N, b_acc is better. For code: refer to this: https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/70841 :param y_true: :param y_pred: :param threshold: :return: accuracy, f1 for this batch... not the global one, we need to be careful!! \"\"\" # if FOCAL_LOSS_GAMMA == 2.0: # threshold = 0.57 # elif FOCAL_LOSS_GAMMA == 1.0: # threshold = (0.53 + ( # 0.722 - 0.097)) / 2 # (by...reading the test result..., found it changes every training... so useless) threshold = math_ops . cast ( threshold , y_pred . dtype ) y_pred_b = math_ops . cast ( y_pred > threshold , y_pred . dtype ) y_true_b = math_ops . cast ( y_true > threshold , y_pred . dtype ) # ground_pos = math_ops.reduce_sum(y_true) + epsilon # correct_pos = math_ops.reduce_sum(math_ops.multiply(y_true, y_pred)) + epsilon # predict_pos = math_ops.reduce_sum(y_pred) + epsilon true_cnt = math_ops . reduce_sum ( y_true_b ) + epsilon false_cnt = math_ops . reduce_sum ( 1 - y_true_b ) + epsilon pred_true_cnt = math_ops . reduce_sum ( y_pred_b ) + epsilon pred_false_cnt = math_ops . reduce_sum ( 1 - y_pred_b ) + epsilon # true_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, y_true_b))/true_cnt # false_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, 1-y_true_b))/false_cnt # true_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, y_true_b))/true_cnt # false_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, 1-y_true_b))/false_cnt # tp_mean_scaled = math_ops.cast(true_predict_mean*100, tf.int8) # tp_mean_scaled = math_ops.cast(tp_mean_scaled, tf.float32) # precision = math_ops.div(correct_pos, predict_pos) # recall = math_ops.div(correct_pos, ground_pos) # if N_MORE: # m = (2 * recall * precision) / (precision + recall) # else: # # m = (sensitivity + specificity)/2 # balanced accuracy # raise NotImplementedError(\"Balanced accuracy metric is not implemented\") return ( pred_false_cnt - false_cnt ) / false_cnt # (batchsize 1024) bin_prd_clsf_info_pos ( y_true , y_pred , threshold = 0.5 , N_MORE = True , epsilon = 1e-07 ) \u00a4 refer to this: https://stats.stackexchange.com/questions/49579/balanced-accuracy-vs-f-1-score Both F1 and b_acc are metrics for classifier evaluation, that (to some extent) handle class imbalance. Depending of which of the two classes (N or P) outnumbers the other, each metric is outperforms the other. 1) If N >> P, f1 is a better. 2) If P >> N, b_acc is better. For code: refer to this: https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/70841 :param y_true: :param y_pred: :param threshold: :return: accuracy, f1 for this batch... not the global one, we need to be careful!! Source code in kaggle_runner/metrics/metrics.py 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 def bin_prd_clsf_info_pos ( y_true , y_pred , threshold = 0.5 , N_MORE = True , epsilon = 1e-7 ): \"\"\" refer to this: https://stats.stackexchange.com/questions/49579/balanced-accuracy-vs-f-1-score Both F1 and b_acc are metrics for classifier evaluation, that (to some extent) handle class imbalance. Depending of which of the two classes (N or P) outnumbers the other, each metric is outperforms the other. 1) If N >> P, f1 is a better. 2) If P >> N, b_acc is better. For code: refer to this: https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/70841 :param y_true: :param y_pred: :param threshold: :return: accuracy, f1 for this batch... not the global one, we need to be careful!! \"\"\" # if FOCAL_LOSS_GAMMA == 2.0: # threshold = 0.57 # elif FOCAL_LOSS_GAMMA == 1.0: # threshold = (0.53 + ( # 0.722 - 0.097)) / 2 # (by...reading the test result..., found it changes every training... so useless) threshold = math_ops . cast ( threshold , y_pred . dtype ) y_pred_b = math_ops . cast ( y_pred > threshold , y_pred . dtype ) y_true_b = math_ops . cast ( y_true > threshold , y_pred . dtype ) # ground_pos = math_ops.reduce_sum(y_true) + epsilon # correct_pos = math_ops.reduce_sum(math_ops.multiply(y_true, y_pred)) + epsilon # predict_pos = math_ops.reduce_sum(y_pred) + epsilon true_cnt = math_ops . reduce_sum ( y_true_b ) + epsilon false_cnt = math_ops . reduce_sum ( 1 - y_true_b ) + epsilon pred_true_cnt = math_ops . reduce_sum ( y_pred_b ) + epsilon pred_false_cnt = math_ops . reduce_sum ( 1 - y_pred_b ) + epsilon # true_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, y_true_b))/true_cnt # false_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, 1-y_true_b))/false_cnt # true_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, y_true_b))/true_cnt # false_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, 1-y_true_b))/false_cnt # tp_mean_scaled = math_ops.cast(true_predict_mean*100, tf.int8) # tp_mean_scaled = math_ops.cast(tp_mean_scaled, tf.float32) # precision = math_ops.div(correct_pos, predict_pos) # recall = math_ops.div(correct_pos, ground_pos) # if N_MORE: # m = (2 * recall * precision) / (precision + recall) # else: # # m = (sensitivity + specificity)/2 # balanced accuracy # raise NotImplementedError(\"Balanced accuracy metric is not implemented\") return ( pred_true_cnt - true_cnt ) / true_cnt # (batchsize 1024) binary_auc_probability ( y_true , y_pred , threshold = 0.5 , N_MORE = True , epsilon = 1e-12 ) \u00a4 refer to this: https://blog.revolutionanalytics.com/2016/11/calculating-auc.html The probabilistic interpretation is that if you randomly choose a positive case and a negative case, the probability that the positive case outranks the negative case according to the classifier is given by the AUC. This is evident from the figure, where the total area of the plot is normalized to one, the cells of the matrix enumerate all possible combinations of positive and negative cases, and the fraction under the curve comprises the cells where the positive case outranks the negative one. :param y_true: :param y_pred: :param threshold: :return: accuracy, f1 for this batch... not the global one, we need to be careful!! Source code in kaggle_runner/metrics/metrics.py 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 def binary_auc_probability ( y_true , y_pred , threshold = 0.5 , N_MORE = True , epsilon = 1e-12 ): \"\"\" refer to this: https://blog.revolutionanalytics.com/2016/11/calculating-auc.html The probabilistic interpretation is that if you randomly choose a positive case and a negative case, the probability that the positive case outranks the negative case according to the classifier is given by the AUC. This is evident from the figure, where the total area of the plot is normalized to one, the cells of the matrix enumerate all possible combinations of positive and negative cases, and the fraction under the curve comprises the cells where the positive case outranks the negative one. :param y_true: :param y_pred: :param threshold: :return: accuracy, f1 for this batch... not the global one, we need to be careful!! \"\"\" # labels: y_true, scores: y_pred, N the size of sample # auc_probability < - function(labels, scores, N=1e7) # { # pos < - sample(scores[labels], N, replace=TRUE) # neg < - sample(scores[!labels], N, replace = TRUE) # # sum( (1 + sign(pos - neg))/2)/N # does the same thing # (sum(pos > neg) + sum(pos == neg) / 2) / N # give partial credit for ties # } # auc_probability(as.logical(category), prediction) threshold = math_ops . cast ( threshold , y_pred . dtype ) # y_pred = math_ops.cast(y_pred > threshold, y_pred.dtype) y_true = math_ops . cast ( y_true > threshold , y_pred . dtype ) true_pos_predict = math_ops . multiply ( y_true , y_pred ) # %6 pos # 94% neg... true_neg_predict = math_ops . multiply ( 1.0 - y_true , 1 - y_pred ) binary_sensitivity ( y_pred , y_true ) \u00a4 Compute the confusion matrix for a set of predictions. Parameters \u00a4 y_pred : predicted values for a batch if samples (must be binary: 0 or 1) y_true : correct values for the set of samples used (must be binary: 0 or 1) Returns \u00a4 out : the specificity Source code in kaggle_runner/metrics/metrics.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def binary_sensitivity ( y_pred , y_true ): \"\"\"Compute the confusion matrix for a set of predictions. Parameters ---------- y_pred : predicted values for a batch if samples (must be binary: 0 or 1) y_true : correct values for the set of samples used (must be binary: 0 or 1) Returns ------- out : the specificity \"\"\" threshold = 0.5 TP = np . logical_and ( K . eval ( y_true ) == 1 , K . eval ( y_pred ) <= threshold ) FP = np . logical_and ( K . eval ( y_true ) == 0 , K . eval ( y_pred ) > threshold ) # as Keras Tensors TP = K . sum ( K . variable ( TP )) FP = K . sum ( K . variable ( FP )) sensitivity = TP / ( TP + FP + K . epsilon ()) return sensitivity binary_specificity ( y_pred , y_true ) \u00a4 Compute the confusion matrix for a set of predictions. Parameters \u00a4 y_pred : predicted values for a batch if samples (must be binary: 0 or 1) y_true : correct values for the set of samples used (must be binary: 0 or 1) Returns \u00a4 out : the specificity Source code in kaggle_runner/metrics/metrics.py 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 def binary_specificity ( y_pred , y_true ): \"\"\"Compute the confusion matrix for a set of predictions. Parameters ---------- y_pred : predicted values for a batch if samples (must be binary: 0 or 1) y_true : correct values for the set of samples used (must be binary: 0 or 1) Returns ------- out : the specificity \"\"\" threshold = 0.5 TN = np . logical_and ( K . eval ( y_true ) == 0 , K . eval ( y_pred ) <= threshold ) FP = np . logical_and ( K . eval ( y_true ) == 0 , K . eval ( y_pred ) > threshold ) # as Keras Tensors TN = K . sum ( K . variable ( TN )) FP = K . sum ( K . variable ( FP )) specificity = TN / ( TN + FP + K . epsilon ()) return specificity metric ( probability , truth , threshold = 0.5 , reduction = 'none' ) \u00a4 Calculates dice of positive and negative images seperately Source code in kaggle_runner/metrics/metrics.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def metric ( probability , truth , threshold = 0.5 , reduction = \"none\" ): \"\"\"Calculates dice of positive and negative images seperately\"\"\" \"\"\"probability and truth must be torch tensors\"\"\" batch_size = len ( truth ) with torch . no_grad (): probability = probability . view ( batch_size , - 1 ) truth = truth . view ( batch_size , - 1 ) assert probability . shape == truth . shape p = ( probability > threshold ) . float () t = ( truth > 0.5 ) . float () t_sum = t . sum ( - 1 ) p_sum = p . sum ( - 1 ) neg_index = torch . nonzero ( t_sum == 0 ) pos_index = torch . nonzero ( t_sum >= 1 ) dice_neg = ( p_sum == 0 ) . float () dice_pos = 2 * ( p * t ) . sum ( - 1 ) / (( p + t ) . sum ( - 1 )) dice_neg = dice_neg [ neg_index ] dice_pos = dice_pos [ pos_index ] dice = torch . cat ([ dice_pos , dice_neg ]) dice_neg = np . nan_to_num ( dice_neg . mean () . item (), 0 ) dice_pos = np . nan_to_num ( dice_pos . mean () . item (), 0 ) dice = dice . mean () . item () num_neg = len ( neg_index ) num_pos = len ( pos_index ) return dice , dice_neg , dice_pos , num_neg , num_pos","title":"metrics.py"},{"location":"kaggle_runner/metrics/metrics/#kaggle_runner.metrics.metrics","text":"","title":"kaggle_runner.metrics.metrics"},{"location":"kaggle_runner/metrics/metrics/#kaggle_runner.metrics.metrics.bin_prd_clsf_info_neg","text":"refer to this: https://stats.stackexchange.com/questions/49579/balanced-accuracy-vs-f-1-score Both F1 and b_acc are metrics for classifier evaluation, that (to some extent) handle class imbalance. Depending of which of the two classes (N or P) outnumbers the other, each metric is outperforms the other. 1) If N >> P, f1 is a better. 2) If P >> N, b_acc is better. For code: refer to this: https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/70841 :param y_true: :param y_pred: :param threshold: :return: accuracy, f1 for this batch... not the global one, we need to be careful!! Source code in kaggle_runner/metrics/metrics.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 def bin_prd_clsf_info_neg ( y_true , y_pred , threshold = 0.5 , N_MORE = True , epsilon = 1e-7 ): \"\"\" refer to this: https://stats.stackexchange.com/questions/49579/balanced-accuracy-vs-f-1-score Both F1 and b_acc are metrics for classifier evaluation, that (to some extent) handle class imbalance. Depending of which of the two classes (N or P) outnumbers the other, each metric is outperforms the other. 1) If N >> P, f1 is a better. 2) If P >> N, b_acc is better. For code: refer to this: https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/70841 :param y_true: :param y_pred: :param threshold: :return: accuracy, f1 for this batch... not the global one, we need to be careful!! \"\"\" # if FOCAL_LOSS_GAMMA == 2.0: # threshold = 0.57 # elif FOCAL_LOSS_GAMMA == 1.0: # threshold = (0.53 + ( # 0.722 - 0.097)) / 2 # (by...reading the test result..., found it changes every training... so useless) threshold = math_ops . cast ( threshold , y_pred . dtype ) y_pred_b = math_ops . cast ( y_pred > threshold , y_pred . dtype ) y_true_b = math_ops . cast ( y_true > threshold , y_pred . dtype ) # ground_pos = math_ops.reduce_sum(y_true) + epsilon # correct_pos = math_ops.reduce_sum(math_ops.multiply(y_true, y_pred)) + epsilon # predict_pos = math_ops.reduce_sum(y_pred) + epsilon true_cnt = math_ops . reduce_sum ( y_true_b ) + epsilon false_cnt = math_ops . reduce_sum ( 1 - y_true_b ) + epsilon pred_true_cnt = math_ops . reduce_sum ( y_pred_b ) + epsilon pred_false_cnt = math_ops . reduce_sum ( 1 - y_pred_b ) + epsilon # true_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, y_true_b))/true_cnt # false_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, 1-y_true_b))/false_cnt # true_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, y_true_b))/true_cnt # false_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, 1-y_true_b))/false_cnt # tp_mean_scaled = math_ops.cast(true_predict_mean*100, tf.int8) # tp_mean_scaled = math_ops.cast(tp_mean_scaled, tf.float32) # precision = math_ops.div(correct_pos, predict_pos) # recall = math_ops.div(correct_pos, ground_pos) # if N_MORE: # m = (2 * recall * precision) / (precision + recall) # else: # # m = (sensitivity + specificity)/2 # balanced accuracy # raise NotImplementedError(\"Balanced accuracy metric is not implemented\") return ( pred_false_cnt - false_cnt ) / false_cnt # (batchsize 1024)","title":"bin_prd_clsf_info_neg()"},{"location":"kaggle_runner/metrics/metrics/#kaggle_runner.metrics.metrics.bin_prd_clsf_info_pos","text":"refer to this: https://stats.stackexchange.com/questions/49579/balanced-accuracy-vs-f-1-score Both F1 and b_acc are metrics for classifier evaluation, that (to some extent) handle class imbalance. Depending of which of the two classes (N or P) outnumbers the other, each metric is outperforms the other. 1) If N >> P, f1 is a better. 2) If P >> N, b_acc is better. For code: refer to this: https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/70841 :param y_true: :param y_pred: :param threshold: :return: accuracy, f1 for this batch... not the global one, we need to be careful!! Source code in kaggle_runner/metrics/metrics.py 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 def bin_prd_clsf_info_pos ( y_true , y_pred , threshold = 0.5 , N_MORE = True , epsilon = 1e-7 ): \"\"\" refer to this: https://stats.stackexchange.com/questions/49579/balanced-accuracy-vs-f-1-score Both F1 and b_acc are metrics for classifier evaluation, that (to some extent) handle class imbalance. Depending of which of the two classes (N or P) outnumbers the other, each metric is outperforms the other. 1) If N >> P, f1 is a better. 2) If P >> N, b_acc is better. For code: refer to this: https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/70841 :param y_true: :param y_pred: :param threshold: :return: accuracy, f1 for this batch... not the global one, we need to be careful!! \"\"\" # if FOCAL_LOSS_GAMMA == 2.0: # threshold = 0.57 # elif FOCAL_LOSS_GAMMA == 1.0: # threshold = (0.53 + ( # 0.722 - 0.097)) / 2 # (by...reading the test result..., found it changes every training... so useless) threshold = math_ops . cast ( threshold , y_pred . dtype ) y_pred_b = math_ops . cast ( y_pred > threshold , y_pred . dtype ) y_true_b = math_ops . cast ( y_true > threshold , y_pred . dtype ) # ground_pos = math_ops.reduce_sum(y_true) + epsilon # correct_pos = math_ops.reduce_sum(math_ops.multiply(y_true, y_pred)) + epsilon # predict_pos = math_ops.reduce_sum(y_pred) + epsilon true_cnt = math_ops . reduce_sum ( y_true_b ) + epsilon false_cnt = math_ops . reduce_sum ( 1 - y_true_b ) + epsilon pred_true_cnt = math_ops . reduce_sum ( y_pred_b ) + epsilon pred_false_cnt = math_ops . reduce_sum ( 1 - y_pred_b ) + epsilon # true_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, y_true_b))/true_cnt # false_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, 1-y_true_b))/false_cnt # true_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, y_true_b))/true_cnt # false_predict_mean = math_ops.reduce_sum(math_ops.multiply(y_pred, 1-y_true_b))/false_cnt # tp_mean_scaled = math_ops.cast(true_predict_mean*100, tf.int8) # tp_mean_scaled = math_ops.cast(tp_mean_scaled, tf.float32) # precision = math_ops.div(correct_pos, predict_pos) # recall = math_ops.div(correct_pos, ground_pos) # if N_MORE: # m = (2 * recall * precision) / (precision + recall) # else: # # m = (sensitivity + specificity)/2 # balanced accuracy # raise NotImplementedError(\"Balanced accuracy metric is not implemented\") return ( pred_true_cnt - true_cnt ) / true_cnt # (batchsize 1024)","title":"bin_prd_clsf_info_pos()"},{"location":"kaggle_runner/metrics/metrics/#kaggle_runner.metrics.metrics.binary_auc_probability","text":"refer to this: https://blog.revolutionanalytics.com/2016/11/calculating-auc.html The probabilistic interpretation is that if you randomly choose a positive case and a negative case, the probability that the positive case outranks the negative case according to the classifier is given by the AUC. This is evident from the figure, where the total area of the plot is normalized to one, the cells of the matrix enumerate all possible combinations of positive and negative cases, and the fraction under the curve comprises the cells where the positive case outranks the negative one. :param y_true: :param y_pred: :param threshold: :return: accuracy, f1 for this batch... not the global one, we need to be careful!! Source code in kaggle_runner/metrics/metrics.py 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 def binary_auc_probability ( y_true , y_pred , threshold = 0.5 , N_MORE = True , epsilon = 1e-12 ): \"\"\" refer to this: https://blog.revolutionanalytics.com/2016/11/calculating-auc.html The probabilistic interpretation is that if you randomly choose a positive case and a negative case, the probability that the positive case outranks the negative case according to the classifier is given by the AUC. This is evident from the figure, where the total area of the plot is normalized to one, the cells of the matrix enumerate all possible combinations of positive and negative cases, and the fraction under the curve comprises the cells where the positive case outranks the negative one. :param y_true: :param y_pred: :param threshold: :return: accuracy, f1 for this batch... not the global one, we need to be careful!! \"\"\" # labels: y_true, scores: y_pred, N the size of sample # auc_probability < - function(labels, scores, N=1e7) # { # pos < - sample(scores[labels], N, replace=TRUE) # neg < - sample(scores[!labels], N, replace = TRUE) # # sum( (1 + sign(pos - neg))/2)/N # does the same thing # (sum(pos > neg) + sum(pos == neg) / 2) / N # give partial credit for ties # } # auc_probability(as.logical(category), prediction) threshold = math_ops . cast ( threshold , y_pred . dtype ) # y_pred = math_ops.cast(y_pred > threshold, y_pred.dtype) y_true = math_ops . cast ( y_true > threshold , y_pred . dtype ) true_pos_predict = math_ops . multiply ( y_true , y_pred ) # %6 pos # 94% neg... true_neg_predict = math_ops . multiply ( 1.0 - y_true , 1 - y_pred )","title":"binary_auc_probability()"},{"location":"kaggle_runner/metrics/metrics/#kaggle_runner.metrics.metrics.binary_sensitivity","text":"Compute the confusion matrix for a set of predictions.","title":"binary_sensitivity()"},{"location":"kaggle_runner/metrics/metrics/#parameters","text":"y_pred : predicted values for a batch if samples (must be binary: 0 or 1) y_true : correct values for the set of samples used (must be binary: 0 or 1)","title":"Parameters"},{"location":"kaggle_runner/metrics/metrics/#returns","text":"out : the specificity Source code in kaggle_runner/metrics/metrics.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def binary_sensitivity ( y_pred , y_true ): \"\"\"Compute the confusion matrix for a set of predictions. Parameters ---------- y_pred : predicted values for a batch if samples (must be binary: 0 or 1) y_true : correct values for the set of samples used (must be binary: 0 or 1) Returns ------- out : the specificity \"\"\" threshold = 0.5 TP = np . logical_and ( K . eval ( y_true ) == 1 , K . eval ( y_pred ) <= threshold ) FP = np . logical_and ( K . eval ( y_true ) == 0 , K . eval ( y_pred ) > threshold ) # as Keras Tensors TP = K . sum ( K . variable ( TP )) FP = K . sum ( K . variable ( FP )) sensitivity = TP / ( TP + FP + K . epsilon ()) return sensitivity","title":"Returns"},{"location":"kaggle_runner/metrics/metrics/#kaggle_runner.metrics.metrics.binary_specificity","text":"Compute the confusion matrix for a set of predictions.","title":"binary_specificity()"},{"location":"kaggle_runner/metrics/metrics/#parameters","text":"y_pred : predicted values for a batch if samples (must be binary: 0 or 1) y_true : correct values for the set of samples used (must be binary: 0 or 1)","title":"Parameters"},{"location":"kaggle_runner/metrics/metrics/#returns","text":"out : the specificity Source code in kaggle_runner/metrics/metrics.py 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 def binary_specificity ( y_pred , y_true ): \"\"\"Compute the confusion matrix for a set of predictions. Parameters ---------- y_pred : predicted values for a batch if samples (must be binary: 0 or 1) y_true : correct values for the set of samples used (must be binary: 0 or 1) Returns ------- out : the specificity \"\"\" threshold = 0.5 TN = np . logical_and ( K . eval ( y_true ) == 0 , K . eval ( y_pred ) <= threshold ) FP = np . logical_and ( K . eval ( y_true ) == 0 , K . eval ( y_pred ) > threshold ) # as Keras Tensors TN = K . sum ( K . variable ( TN )) FP = K . sum ( K . variable ( FP )) specificity = TN / ( TN + FP + K . epsilon ()) return specificity","title":"Returns"},{"location":"kaggle_runner/metrics/metrics/#kaggle_runner.metrics.metrics.metric","text":"Calculates dice of positive and negative images seperately Source code in kaggle_runner/metrics/metrics.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def metric ( probability , truth , threshold = 0.5 , reduction = \"none\" ): \"\"\"Calculates dice of positive and negative images seperately\"\"\" \"\"\"probability and truth must be torch tensors\"\"\" batch_size = len ( truth ) with torch . no_grad (): probability = probability . view ( batch_size , - 1 ) truth = truth . view ( batch_size , - 1 ) assert probability . shape == truth . shape p = ( probability > threshold ) . float () t = ( truth > 0.5 ) . float () t_sum = t . sum ( - 1 ) p_sum = p . sum ( - 1 ) neg_index = torch . nonzero ( t_sum == 0 ) pos_index = torch . nonzero ( t_sum >= 1 ) dice_neg = ( p_sum == 0 ) . float () dice_pos = 2 * ( p * t ) . sum ( - 1 ) / (( p + t ) . sum ( - 1 )) dice_neg = dice_neg [ neg_index ] dice_pos = dice_pos [ pos_index ] dice = torch . cat ([ dice_pos , dice_neg ]) dice_neg = np . nan_to_num ( dice_neg . mean () . item (), 0 ) dice_pos = np . nan_to_num ( dice_pos . mean () . item (), 0 ) dice = dice . mean () . item () num_neg = len ( neg_index ) num_pos = len ( pos_index ) return dice , dice_neg , dice_pos , num_neg , num_pos","title":"metric()"},{"location":"kaggle_runner/modules/ToxicSimpleNNModel/","text":"\u00a4 ToxicSimpleNNModel \u00a4 forward ( self , input_ids , attention_masks ) \u00a4 Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in kaggle_runner/modules/ToxicSimpleNNModel.py 23 24 25 26 27 28 29 30 31 32 def forward ( self , input_ids , attention_masks ): bs , seq_length = input_ids . shape seq_x , _ = self . backbone ( input_ids = input_ids , attention_mask = attention_masks ) apool = torch . mean ( seq_x , 1 ) mpool , _ = torch . max ( seq_x , 1 ) x = torch . cat (( apool , mpool ), 1 ) x = self . dropout ( x ) return self . linear ( x )","title":"ToxicSimpleNNModel.py"},{"location":"kaggle_runner/modules/ToxicSimpleNNModel/#kaggle_runner.modules.ToxicSimpleNNModel","text":"","title":"kaggle_runner.modules.ToxicSimpleNNModel"},{"location":"kaggle_runner/modules/ToxicSimpleNNModel/#kaggle_runner.modules.ToxicSimpleNNModel.ToxicSimpleNNModel","text":"","title":"ToxicSimpleNNModel"},{"location":"kaggle_runner/modules/ToxicSimpleNNModel/#kaggle_runner.modules.ToxicSimpleNNModel.ToxicSimpleNNModel.forward","text":"Defines the computation performed at every call. Should be overridden by all subclasses. .. note:: Although the recipe for forward pass needs to be defined within this function, one should call the :class: Module instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them. Source code in kaggle_runner/modules/ToxicSimpleNNModel.py 23 24 25 26 27 28 29 30 31 32 def forward ( self , input_ids , attention_masks ): bs , seq_length = input_ids . shape seq_x , _ = self . backbone ( input_ids = input_ids , attention_mask = attention_masks ) apool = torch . mean ( seq_x , 1 ) mpool , _ = torch . max ( seq_x , 1 ) x = torch . cat (( apool , mpool ), 1 ) x = self . dropout ( x ) return self . linear ( x )","title":"forward()"},{"location":"kaggle_runner/modules/attention/","text":"\u00a4 AttentionRaffel \u00a4 __init__ ( self , step_dim , W_regularizer = None , b_regularizer = None , W_constraint = None , b_constraint = None , bias = True , ** kwargs ) special \u00a4 Follows the work of Raffel et al. [https://arxiv.org/abs/1512.08756] :param step_dim: feature vector length :param W_regularizer: :param b_regularizer: :param W_constraint: :param b_constraint: :param bias: :param kwargs: Source code in kaggle_runner/modules/attention.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def __init__ ( self , step_dim , W_regularizer = None , b_regularizer = None , W_constraint = None , b_constraint = None , bias = True , ** kwargs , ): \"\"\" Follows the work of Raffel et al. [https://arxiv.org/abs/1512.08756] :param step_dim: feature vector length :param W_regularizer: :param b_regularizer: :param W_constraint: :param b_constraint: :param bias: :param kwargs: \"\"\" super ( AttentionRaffel , self ) . __init__ ( ** kwargs ) self . supports_masking = True self . init = \"glorot_uniform\" self . W_regularizer = regularizers . get ( W_regularizer ) self . b_regularizer = regularizers . get ( b_regularizer ) self . W_constraint = constraints . get ( W_constraint ) self . b_constraint = constraints . get ( b_constraint ) self . bias = bias self . step_dim = step_dim self . features_dim = 0 build ( self , input_shape ) \u00a4 Creates the variables of the layer (optional, for subclass implementers). This is a method that implementers of subclasses of Layer or Model can override if they need a state-creation step in-between layer instantiation and layer call. This is typically used to create the weights of Layer subclasses. Parameters: Name Type Description Default input_shape Instance of TensorShape , or list of instances of TensorShape if the layer expects a list of inputs (one instance per input). required Source code in kaggle_runner/modules/attention.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def build ( self , input_shape ): # Input shape 3D tensor with shape: `(samples, steps, features)`. # one step is means one bidirection? assert len ( input_shape ) == 3 self . W = self . add_weight ( \" {} _W\" . format ( self . name ), ( int ( input_shape [ - 1 ]),), initializer = self . init , regularizer = self . W_regularizer , constraint = self . W_constraint , ) self . features_dim = input_shape [ - 1 ] # features dimention of input if self . bias : self . b = self . add_weight ( \" {} _b\" . format ( self . name ), ( int ( input_shape [ 1 ]),), initializer = \"zero\" , regularizer = self . b_regularizer , constraint = self . b_constraint , ) else : self . b = None self . built = True call ( self , x , mask = None ) \u00a4 This is where the layer's logic lives. Parameters: Name Type Description Default inputs Input tensor, or list/tuple of input tensors. required **kwargs Additional keyword arguments. required Returns: Type Description A tensor or list/tuple of tensors. Source code in kaggle_runner/modules/attention.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def call ( self , x , mask = None ): # more like the alignment model, which scores how the inputs around # position j and the output at position i match features_dim = self . features_dim step_dim = self . step_dim eij = K . reshape ( K . dot ( K . reshape ( x , ( - 1 , features_dim ) ), K . reshape ( self . W , ( features_dim , 1 )) ), ( - 1 , step_dim ), ) if self . bias : eij += self . b eij = K . tanh ( eij ) # activation # softmax a = K . exp ( eij ) # apply mask after the exp. will be re-normalized next if mask is not None : # Cast the mask to floatX to avoid float64 upcasting in theano a *= K . cast ( mask , K . floatx ()) # in some cases especially in the early stages of training the sum may # be almost zero a /= K . cast ( K . sum ( a , axis = 1 , keepdims = True ) + K . epsilon (), K . floatx ()) a = K . expand_dims ( a ) # context vector c_i (or for this, only one c_i) weighted_input = x * a # print weigthted_input.shape return K . sum ( weighted_input , axis = 1 ) compute_mask ( self , inputs , mask = None ) \u00a4 Computes an output mask tensor. Parameters: Name Type Description Default inputs Tensor or list of tensors. required mask Tensor or list of tensors. None Returns: Type Description None or a tensor (or list of tensors, one per output tensor of the layer). Source code in kaggle_runner/modules/attention.py 100 101 102 def compute_mask ( self , inputs , mask = None ): # do not pass the mask to the next layers return None compute_output_shape ( self , input_shape ) \u00a4 Computes the output shape of the layer. If the layer has not been built, this method will call build on the layer. This assumes that the layer will later be used with inputs that match the input shape provided here. Parameters: Name Type Description Default input_shape Shape tuple (tuple of integers) or list of shape tuples (one per output tensor of the layer). Shape tuples can include None for free dimensions, instead of an integer. required Returns: Type Description An input shape tuple. Source code in kaggle_runner/modules/attention.py 141 142 143 def compute_output_shape ( self , input_shape ): # return input_shape[0], input_shape[-1] return input_shape [ 0 ], self . features_dim get_config ( self ) \u00a4 Returns the config of the layer. A layer config is a Python dictionary (serializable) containing the configuration of a layer. The same layer can be reinstantiated later (without its trained weights) from this configuration. The config of a layer does not include connectivity information, nor the layer class name. These are handled by Network (one layer of abstraction above). Returns: Type Description Python dictionary. Source code in kaggle_runner/modules/attention.py 59 60 61 62 63 64 65 66 67 68 69 70 71 def get_config ( self ): config = { \"step_dim\" : self . step_dim , \"bias\" : self . bias , \"W_regularizer\" : regularizers . serialize ( self . W_regularizer ), \"b_regularizer\" : regularizers . serialize ( self . b_regularizer ), \"W_constraint\" : constraints . serialize ( self . W_constraint ), \"b_constraint\" : constraints . serialize ( self . b_constraint ), } base_config = super ( AttentionRaffel , self ) . get_config () if \"cell\" in base_config : del base_config [ \"cell\" ] return dict ( list ( base_config . items ()) + list ( config . items ())) load_state_continue_run ( file_name = 'run_state.pkl' ) classmethod \u00a4 :param file_name: :return: the kernel object, need to continue Source code in kaggle_runner/modules/attention.py 267 268 269 270 271 272 273 274 275 @classmethod def load_state_continue_run ( cls , file_name = \"run_state.pkl\" ): \"\"\" :param file_name: :return: the kernel object, need to continue \"\"\" self = cls . _load_state ( file_name = file_name ) self . continue_run () run ( self , start_stage = None , end_stage =< KernelRunningState . SAVE_SUBMISSION_DONE : 5 > , dump_flag = False , force_dump = True ) \u00a4 :param start_stage: if set, will overwrite the stage :param end_stage: :param dump_flag: :return: Source code in kaggle_runner/modules/attention.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def run ( self , start_stage = None , end_stage = KernelRunningState . SAVE_SUBMISSION_DONE , dump_flag = False , force_dump = True , ): \"\"\" :param start_stage: if set, will overwrite the stage :param end_stage: :param dump_flag: :return: \"\"\" self . continue_run ( start_stage = start_stage , end_stage = end_stage , dump_flag = dump_flag , force_dump = force_dump , ) set_metrics ( self ) \u00a4 set_metrics for model training :return: None Source code in kaggle_runner/modules/attention.py 145 146 147 148 149 150 151 def set_metrics ( self ): \"\"\" set_metrics for model training :return: None \"\"\" pass","title":"attention.py"},{"location":"kaggle_runner/modules/attention/#kaggle_runner.modules.attention","text":"","title":"kaggle_runner.modules.attention"},{"location":"kaggle_runner/modules/attention/#kaggle_runner.modules.attention.AttentionRaffel","text":"","title":"AttentionRaffel"},{"location":"kaggle_runner/modules/attention/#kaggle_runner.modules.attention.AttentionRaffel.__init__","text":"Follows the work of Raffel et al. [https://arxiv.org/abs/1512.08756] :param step_dim: feature vector length :param W_regularizer: :param b_regularizer: :param W_constraint: :param b_constraint: :param bias: :param kwargs: Source code in kaggle_runner/modules/attention.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def __init__ ( self , step_dim , W_regularizer = None , b_regularizer = None , W_constraint = None , b_constraint = None , bias = True , ** kwargs , ): \"\"\" Follows the work of Raffel et al. [https://arxiv.org/abs/1512.08756] :param step_dim: feature vector length :param W_regularizer: :param b_regularizer: :param W_constraint: :param b_constraint: :param bias: :param kwargs: \"\"\" super ( AttentionRaffel , self ) . __init__ ( ** kwargs ) self . supports_masking = True self . init = \"glorot_uniform\" self . W_regularizer = regularizers . get ( W_regularizer ) self . b_regularizer = regularizers . get ( b_regularizer ) self . W_constraint = constraints . get ( W_constraint ) self . b_constraint = constraints . get ( b_constraint ) self . bias = bias self . step_dim = step_dim self . features_dim = 0","title":"__init__()"},{"location":"kaggle_runner/modules/attention/#kaggle_runner.modules.attention.AttentionRaffel.build","text":"Creates the variables of the layer (optional, for subclass implementers). This is a method that implementers of subclasses of Layer or Model can override if they need a state-creation step in-between layer instantiation and layer call. This is typically used to create the weights of Layer subclasses. Parameters: Name Type Description Default input_shape Instance of TensorShape , or list of instances of TensorShape if the layer expects a list of inputs (one instance per input). required Source code in kaggle_runner/modules/attention.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def build ( self , input_shape ): # Input shape 3D tensor with shape: `(samples, steps, features)`. # one step is means one bidirection? assert len ( input_shape ) == 3 self . W = self . add_weight ( \" {} _W\" . format ( self . name ), ( int ( input_shape [ - 1 ]),), initializer = self . init , regularizer = self . W_regularizer , constraint = self . W_constraint , ) self . features_dim = input_shape [ - 1 ] # features dimention of input if self . bias : self . b = self . add_weight ( \" {} _b\" . format ( self . name ), ( int ( input_shape [ 1 ]),), initializer = \"zero\" , regularizer = self . b_regularizer , constraint = self . b_constraint , ) else : self . b = None self . built = True","title":"build()"},{"location":"kaggle_runner/modules/attention/#kaggle_runner.modules.attention.AttentionRaffel.call","text":"This is where the layer's logic lives. Parameters: Name Type Description Default inputs Input tensor, or list/tuple of input tensors. required **kwargs Additional keyword arguments. required Returns: Type Description A tensor or list/tuple of tensors. Source code in kaggle_runner/modules/attention.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 def call ( self , x , mask = None ): # more like the alignment model, which scores how the inputs around # position j and the output at position i match features_dim = self . features_dim step_dim = self . step_dim eij = K . reshape ( K . dot ( K . reshape ( x , ( - 1 , features_dim ) ), K . reshape ( self . W , ( features_dim , 1 )) ), ( - 1 , step_dim ), ) if self . bias : eij += self . b eij = K . tanh ( eij ) # activation # softmax a = K . exp ( eij ) # apply mask after the exp. will be re-normalized next if mask is not None : # Cast the mask to floatX to avoid float64 upcasting in theano a *= K . cast ( mask , K . floatx ()) # in some cases especially in the early stages of training the sum may # be almost zero a /= K . cast ( K . sum ( a , axis = 1 , keepdims = True ) + K . epsilon (), K . floatx ()) a = K . expand_dims ( a ) # context vector c_i (or for this, only one c_i) weighted_input = x * a # print weigthted_input.shape return K . sum ( weighted_input , axis = 1 )","title":"call()"},{"location":"kaggle_runner/modules/attention/#kaggle_runner.modules.attention.AttentionRaffel.compute_mask","text":"Computes an output mask tensor. Parameters: Name Type Description Default inputs Tensor or list of tensors. required mask Tensor or list of tensors. None Returns: Type Description None or a tensor (or list of tensors, one per output tensor of the layer). Source code in kaggle_runner/modules/attention.py 100 101 102 def compute_mask ( self , inputs , mask = None ): # do not pass the mask to the next layers return None","title":"compute_mask()"},{"location":"kaggle_runner/modules/attention/#kaggle_runner.modules.attention.AttentionRaffel.compute_output_shape","text":"Computes the output shape of the layer. If the layer has not been built, this method will call build on the layer. This assumes that the layer will later be used with inputs that match the input shape provided here. Parameters: Name Type Description Default input_shape Shape tuple (tuple of integers) or list of shape tuples (one per output tensor of the layer). Shape tuples can include None for free dimensions, instead of an integer. required Returns: Type Description An input shape tuple. Source code in kaggle_runner/modules/attention.py 141 142 143 def compute_output_shape ( self , input_shape ): # return input_shape[0], input_shape[-1] return input_shape [ 0 ], self . features_dim","title":"compute_output_shape()"},{"location":"kaggle_runner/modules/attention/#kaggle_runner.modules.attention.AttentionRaffel.get_config","text":"Returns the config of the layer. A layer config is a Python dictionary (serializable) containing the configuration of a layer. The same layer can be reinstantiated later (without its trained weights) from this configuration. The config of a layer does not include connectivity information, nor the layer class name. These are handled by Network (one layer of abstraction above). Returns: Type Description Python dictionary. Source code in kaggle_runner/modules/attention.py 59 60 61 62 63 64 65 66 67 68 69 70 71 def get_config ( self ): config = { \"step_dim\" : self . step_dim , \"bias\" : self . bias , \"W_regularizer\" : regularizers . serialize ( self . W_regularizer ), \"b_regularizer\" : regularizers . serialize ( self . b_regularizer ), \"W_constraint\" : constraints . serialize ( self . W_constraint ), \"b_constraint\" : constraints . serialize ( self . b_constraint ), } base_config = super ( AttentionRaffel , self ) . get_config () if \"cell\" in base_config : del base_config [ \"cell\" ] return dict ( list ( base_config . items ()) + list ( config . items ()))","title":"get_config()"},{"location":"kaggle_runner/modules/attention/#kaggle_runner.modules.attention.AttentionRaffel.load_state_continue_run","text":":param file_name: :return: the kernel object, need to continue Source code in kaggle_runner/modules/attention.py 267 268 269 270 271 272 273 274 275 @classmethod def load_state_continue_run ( cls , file_name = \"run_state.pkl\" ): \"\"\" :param file_name: :return: the kernel object, need to continue \"\"\" self = cls . _load_state ( file_name = file_name ) self . continue_run ()","title":"load_state_continue_run()"},{"location":"kaggle_runner/modules/attention/#kaggle_runner.modules.attention.AttentionRaffel.run","text":":param start_stage: if set, will overwrite the stage :param end_stage: :param dump_flag: :return: Source code in kaggle_runner/modules/attention.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def run ( self , start_stage = None , end_stage = KernelRunningState . SAVE_SUBMISSION_DONE , dump_flag = False , force_dump = True , ): \"\"\" :param start_stage: if set, will overwrite the stage :param end_stage: :param dump_flag: :return: \"\"\" self . continue_run ( start_stage = start_stage , end_stage = end_stage , dump_flag = dump_flag , force_dump = force_dump , )","title":"run()"},{"location":"kaggle_runner/modules/attention/#kaggle_runner.modules.attention.AttentionRaffel.set_metrics","text":"set_metrics for model training :return: None Source code in kaggle_runner/modules/attention.py 145 146 147 148 149 150 151 def set_metrics ( self ): \"\"\" set_metrics for model training :return: None \"\"\" pass","title":"set_metrics()"},{"location":"kaggle_runner/runners/coordinator/","text":"\u00a4 Coordinator \u00a4 Coordinator runs in controller side, the runners run in dockers with GPUs. create_runner ( self , config , seed = '2020' , script = True , from_template = True ) \u00a4 create_runner. :param config: config will be size and model right now :param seed: :param script: :param from_template: Source code in kaggle_runner/runners/coordinator.py 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 def create_runner ( self , config , seed = \"2020\" , script = True , from_template = True ): \"\"\"create_runner. :param config: config will be size and model right now :param seed: :param script: :param from_template: \"\"\" size = config [ \"size\" ] net = config [ \"network\" ] name = net . replace ( \"_\" , \"-\" ) + \"-\" + str ( size ) AMQPURL = config [ \"AMQPURL\" ] port = config [ \"port\" ] phase = config . get ( \"phase\" , \"dev\" ) path = os . path . join ( self . tmp_path , name ) shutil . copytree ( self . template_path , path ) if from_template : self . _change_kernel_meta_info ( path , None , script ) self . _change_main_py ( path , size , net , AMQPURL , seed , port , phase = phase ) else : self . _change_kernel_meta_info ( path , self . title_prefix + \" \" + name , script ) self . _change_main_py ( path , size , net , AMQPURL , seed , port , phase = phase ) if not script : subprocess . run ( ( \"jupytext --to notebook \" + os . path . join ( path , \"main.py\" )) . split () ) self . runners . append ( path ) return path push ( runner ) staticmethod \u00a4 Push the code to server/kagger docker Source code in kaggle_runner/runners/coordinator.py 410 411 412 413 414 415 416 417 @staticmethod def push ( runner ): \"Push the code to server/kagger docker\" hp = os . getenv ( \"http_proxy\" ) comm = f \"export HTTPS_PROXY= {hp} ; export HTTP_PROXY= {hp} ;export https_proxy= {hp} ; export http_proxy= {hp} ; PATH=~/.local/bin:$PATH kaggle kernels push -p {runner} \" logger . debug ( comm ) return subprocess . run ( comm , shell = True ) run_local ( self , path ) \u00a4 run_local only for local test, real kernel runs in kaggle/colab server. :param path: Source code in kaggle_runner/runners/coordinator.py 567 568 569 570 571 572 573 def run_local ( self , path ): \"\"\"run_local only for local test, real kernel runs in kaggle/colab server. :param path: \"\"\" return subprocess . run ( \"python \" + os . path . join ( path , \"main.py\" ), shell = True )","title":"coordinator.py"},{"location":"kaggle_runner/runners/coordinator/#kaggle_runner.runners.coordinator","text":"","title":"kaggle_runner.runners.coordinator"},{"location":"kaggle_runner/runners/coordinator/#kaggle_runner.runners.coordinator.Coordinator","text":"Coordinator runs in controller side, the runners run in dockers with GPUs.","title":"Coordinator"},{"location":"kaggle_runner/runners/coordinator/#kaggle_runner.runners.coordinator.Coordinator.create_runner","text":"create_runner. :param config: config will be size and model right now :param seed: :param script: :param from_template: Source code in kaggle_runner/runners/coordinator.py 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 def create_runner ( self , config , seed = \"2020\" , script = True , from_template = True ): \"\"\"create_runner. :param config: config will be size and model right now :param seed: :param script: :param from_template: \"\"\" size = config [ \"size\" ] net = config [ \"network\" ] name = net . replace ( \"_\" , \"-\" ) + \"-\" + str ( size ) AMQPURL = config [ \"AMQPURL\" ] port = config [ \"port\" ] phase = config . get ( \"phase\" , \"dev\" ) path = os . path . join ( self . tmp_path , name ) shutil . copytree ( self . template_path , path ) if from_template : self . _change_kernel_meta_info ( path , None , script ) self . _change_main_py ( path , size , net , AMQPURL , seed , port , phase = phase ) else : self . _change_kernel_meta_info ( path , self . title_prefix + \" \" + name , script ) self . _change_main_py ( path , size , net , AMQPURL , seed , port , phase = phase ) if not script : subprocess . run ( ( \"jupytext --to notebook \" + os . path . join ( path , \"main.py\" )) . split () ) self . runners . append ( path ) return path","title":"create_runner()"},{"location":"kaggle_runner/runners/coordinator/#kaggle_runner.runners.coordinator.Coordinator.push","text":"Push the code to server/kagger docker Source code in kaggle_runner/runners/coordinator.py 410 411 412 413 414 415 416 417 @staticmethod def push ( runner ): \"Push the code to server/kagger docker\" hp = os . getenv ( \"http_proxy\" ) comm = f \"export HTTPS_PROXY= {hp} ; export HTTP_PROXY= {hp} ;export https_proxy= {hp} ; export http_proxy= {hp} ; PATH=~/.local/bin:$PATH kaggle kernels push -p {runner} \" logger . debug ( comm ) return subprocess . run ( comm , shell = True )","title":"push()"},{"location":"kaggle_runner/runners/coordinator/#kaggle_runner.runners.coordinator.Coordinator.run_local","text":"run_local only for local test, real kernel runs in kaggle/colab server. :param path: Source code in kaggle_runner/runners/coordinator.py 567 568 569 570 571 572 573 def run_local ( self , path ): \"\"\"run_local only for local test, real kernel runs in kaggle/colab server. :param path: \"\"\" return subprocess . run ( \"python \" + os . path . join ( path , \"main.py\" ), shell = True )","title":"run_local()"},{"location":"kaggle_runner/runners/runner/","text":"\u00a4 Runner \u00a4 Runner should run in docker container, and then a controller(or just mq) will check the running status","title":"runner.py"},{"location":"kaggle_runner/runners/runner/#kaggle_runner.runners.runner","text":"","title":"kaggle_runner.runners.runner"},{"location":"kaggle_runner/runners/runner/#kaggle_runner.runners.runner.Runner","text":"Runner should run in docker container, and then a controller(or just mq) will check the running status","title":"Runner"},{"location":"kaggle_runner/runners/trainer/","text":"\u00a4 GPUTrainer \u00a4 on_backward_end ( self , ** kwargs ) \u00a4 Called after backprop but before optimizer step. Useful for true weight decay in AdamW. Source code in kaggle_runner/runners/trainer.py 202 203 204 def on_backward_end ( self , ** kwargs : Any ) -> None : #xm.optimizer_step(self.learn.opt.opt, barrier=True) pass on_train_begin ( self , ** kwargs ) \u00a4 To initialize constants in the callback. Source code in kaggle_runner/runners/trainer.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 def on_train_begin ( self , ** kwargs : Any ) -> None : #self.device = xm.xla_device(devkind='CPU') self . device = torch . device ( \"cuda\" ) self . learn . model = self . learn . model . to ( self . device ) #self.learn.data.add_tfm(partial(batch_to_device,device=self.device)) self . old_sampler_train_dl , self . data . train_dl , self . train_sampler = _change_dl ( self . k , self . data . train_dl , shuffle = True ) self . old_sampler_valid_dl , self . data . valid_dl , self . valid_sampler = _change_dl_val ( self . k , self . data . valid_dl , shuffle = False ) #self.learn.data.add_tfm(partial(batch_to_device,device=self.device)) self . learn . data . train_dl = DeviceDataLoader ( self . data . train_dl , device = self . device ) self . learn . data . valid_dl = DeviceDataLoader ( self . data . valid_dl , device = self . device ) Trainer \u00a4 This class takes care of training and validation of our model","title":"trainer.py"},{"location":"kaggle_runner/runners/trainer/#kaggle_runner.runners.trainer","text":"","title":"kaggle_runner.runners.trainer"},{"location":"kaggle_runner/runners/trainer/#kaggle_runner.runners.trainer.GPUTrainer","text":"","title":"GPUTrainer"},{"location":"kaggle_runner/runners/trainer/#kaggle_runner.runners.trainer.GPUTrainer.on_backward_end","text":"Called after backprop but before optimizer step. Useful for true weight decay in AdamW. Source code in kaggle_runner/runners/trainer.py 202 203 204 def on_backward_end ( self , ** kwargs : Any ) -> None : #xm.optimizer_step(self.learn.opt.opt, barrier=True) pass","title":"on_backward_end()"},{"location":"kaggle_runner/runners/trainer/#kaggle_runner.runners.trainer.GPUTrainer.on_train_begin","text":"To initialize constants in the callback. Source code in kaggle_runner/runners/trainer.py 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 def on_train_begin ( self , ** kwargs : Any ) -> None : #self.device = xm.xla_device(devkind='CPU') self . device = torch . device ( \"cuda\" ) self . learn . model = self . learn . model . to ( self . device ) #self.learn.data.add_tfm(partial(batch_to_device,device=self.device)) self . old_sampler_train_dl , self . data . train_dl , self . train_sampler = _change_dl ( self . k , self . data . train_dl , shuffle = True ) self . old_sampler_valid_dl , self . data . valid_dl , self . valid_sampler = _change_dl_val ( self . k , self . data . valid_dl , shuffle = False ) #self.learn.data.add_tfm(partial(batch_to_device,device=self.device)) self . learn . data . train_dl = DeviceDataLoader ( self . data . train_dl , device = self . device ) self . learn . data . valid_dl = DeviceDataLoader ( self . data . valid_dl , device = self . device )","title":"on_train_begin()"},{"location":"kaggle_runner/runners/trainer/#kaggle_runner.runners.trainer.Trainer","text":"This class takes care of training and validation of our model","title":"Trainer"},{"location":"kaggle_runner/utils/kernel_utils/","text":"\u00a4 all_gather ( data ) \u00a4 Run all_gather on arbitrary picklable data (not necessarily tensors) Parameters: Name Type Description Default data any picklable object required Returns: Type Description list[data] list of data gathered from each rank Source code in kaggle_runner/utils/kernel_utils.py 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 def all_gather ( data ): \"\"\" Run all_gather on arbitrary picklable data (not necessarily tensors) Args: data: any picklable object Returns: list[data]: list of data gathered from each rank \"\"\" world_size = get_world_size () if world_size == 1 : return [ data ] # serialized to a Tensor buffer = pickle . dumps ( data ) storage = torch . ByteStorage . from_buffer ( buffer ) tensor = torch . ByteTensor ( storage ) . to ( \"cuda\" ) # obtain Tensor size of each rank local_size = torch . tensor ([ tensor . numel ()], device = \"cuda\" ) size_list = [ torch . tensor ([ 0 ], device = \"cuda\" ) for _ in range ( world_size )] dist . all_gather ( size_list , local_size ) size_list = [ int ( size . item ()) for size in size_list ] max_size = max ( size_list ) # receiving Tensor from all ranks # we pad the tensor because torch all_gather does not support # gathering tensors of different shapes tensor_list = [] for _ in size_list : tensor_list . append ( torch . empty ( ( max_size ,), dtype = torch . uint8 , device = \"cuda\" )) if local_size != max_size : padding = torch . empty ( size = ( max_size - local_size ,), dtype = torch . uint8 , device = \"cuda\" ) tensor = torch . cat (( tensor , padding ), dim = 0 ) dist . all_gather ( tensor_list , tensor ) data_list = [] for size , tensor in zip ( size_list , tensor_list ): buffer = tensor . cpu () . numpy () . tobytes ()[: size ] data_list . append ( pickle . loads ( buffer )) return data_list binary_crossentropy_with_focal ( y_true , y_pred , gamma = 1.0 , alpha = 0.5 , custom_weights_in_Y_true = True ) \u00a4 :param y_true: y_true :param y_pred: y_pred :param gamma: make easier ones weights down :param alpha: weight for positive classes. default to 1 - (true positive cnts / all cnts), alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice \u03b1 may be set by inverse class freqency or hyperparameter. :return: bce Reference: https://arxiv.org/pdf/1708.02002.pdf $$ FL(p_t) = -(1-p_t)^{\\gamma}log(p_t) $$ $$ p_t=p: if: y=1$$ $$ p_t=1-p: otherwise$$ Source code in kaggle_runner/utils/kernel_utils.py 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 def binary_crossentropy_with_focal ( y_true , y_pred , gamma = 1.0 , alpha = 0.5 , custom_weights_in_Y_true = True ): \"\"\" :param y_true: y_true :param y_pred: y_pred :param gamma: make easier ones weights down :param alpha: weight for positive classes. default to 1 - (true positive cnts / all cnts), alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice \u03b1 may be set by inverse class freqency or hyperparameter. :return: bce Reference: https://arxiv.org/pdf/1708.02002.pdf $$ FL(p_t) = -(1-p_t)^{\\gamma}log(p_t) $$ $$ p_t=p\\: if\\: y=1$$ $$ p_t=1-p\\: otherwise$$ \"\"\" # assert 0 <= alpha <= 1 and gamma >= 0 # hyper parameters, just use the one for binary? # alpha = 1. # maybe smaller one can help, as multi-class will make the # error larger # gamma = 1.5 # for our problem, try different gamma # for binary_crossentropy, the implementation is in tensorflow/tensorflow/python/keras/backend.py # bce = target * alpha* (1-output+epsilon())**gamma * math_ops.log(output + epsilon()) # bce += (1 - target) *(1-alpha)* (output+epsilon())**gamma * math_ops.log(1 - output + epsilon()) # return -bce # binary cross entropy eps = tf . keras . backend . epsilon () if custom_weights_in_Y_true : custom_weights = y_true [:, 1 : 2 ] y_true = y_true [:, : 1 ] if 1.0 - eps <= gamma <= 1.0 + eps : bce = alpha * math_ops . multiply ( 1.0 - y_pred , math_ops . multiply ( y_true , math_ops . log ( y_pred + eps )) ) bce += ( 1 - alpha ) * math_ops . multiply ( y_pred , math_ops . multiply ( ( 1.0 - y_true ), math_ops . log ( 1.0 - y_pred + eps )) ) elif 0.0 - eps <= gamma <= 0.0 + eps : bce = alpha * math_ops . multiply ( y_true , math_ops . log ( y_pred + eps )) bce += ( 1 - alpha ) * math_ops . multiply ( ( 1.0 - y_true ), math_ops . log ( 1.0 - y_pred + eps ) ) else : gamma_tensor = tf . broadcast_to ( tf . constant ( gamma ), tf . shape ( input = y_pred )) bce = alpha * math_ops . multiply ( math_ops . pow ( 1.0 - y_pred , gamma_tensor ), math_ops . multiply ( y_true , math_ops . log ( y_pred + eps )), ) bce += ( 1 - alpha ) * math_ops . multiply ( math_ops . pow ( y_pred , gamma_tensor ), math_ops . multiply ( ( 1.0 - y_true ), math_ops . log ( 1.0 - y_pred + eps )), ) if custom_weights_in_Y_true : return math_ops . multiply ( - bce , custom_weights ) else : return - bce binary_crossentropy_with_focal_seasoned ( y_true , logit_pred , beta = 0.0 , gamma = 1.0 , alpha = 0.5 , custom_weights_in_Y_true = True ) \u00a4 :param alpha:weight for positive classes loss . default to 1- true positive cnts / all cnts, alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice\u03b1may be set by inverse class freqency or hyperparameter. :param custom_weights_in_Y_true: :return: Source code in kaggle_runner/utils/kernel_utils.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def binary_crossentropy_with_focal_seasoned ( y_true , logit_pred , beta = 0.0 , gamma = 1.0 , alpha = 0.5 , custom_weights_in_Y_true = True ): \"\"\" :param alpha:weight for positive classes **loss**. default to 1- true positive cnts / all cnts, alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice\u03b1may be set by inverse class freqency or hyperparameter. :param custom_weights_in_Y_true: :return: \"\"\" balanced = gamma * logit_pred + beta y_pred = math_ops . sigmoid ( balanced ) # only use gamma in this layer, easier to split out factor return binary_crossentropy_with_focal ( y_true , y_pred , gamma = 0 , alpha = alpha , custom_weights_in_Y_true = custom_weights_in_Y_true , ) get_obj_or_dump ( filename , fullpath = False , default = None ) \u00a4 get_obj_or_dump will dump default obj to file if file not there, otherwise obj will be unpickled from file. If file not found, default value will returned. Source code in kaggle_runner/utils/kernel_utils.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 def get_obj_or_dump ( filename , fullpath = False , default = None ): \"\"\"get_obj_or_dump will dump default obj to file if file not there, otherwise obj will be unpickled from file. If file not found, default value will returned.\"\"\" if not fullpath : path = BIN_FOLDER + filename else : path = filename if os . path . isfile ( path ): logger . debug ( \"load \" + filename ) with open ( path , \"rb\" ) as f : return pickle . load ( f ) else : if default is not None : logger . debug ( \"dump :\" + filename ) dump_obj ( default , filename ) return default online_mean_and_sd ( loader , data_map = None ) \u00a4 Compute the mean and sd in an online fashion Var [ x ] = E [ X^2 ] - E ^ 2 [ X ] credit xwkuang5 @https://discuss.pytorch.org/t/about-normalization-using-pre-trained-vgg16-networks/23560/7 Source code in kaggle_runner/utils/kernel_utils.py 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 def online_mean_and_sd ( loader , data_map = None ): \"\"\"Compute the mean and sd in an online fashion Var[x] = E[X^2] - E^2[X] credit xwkuang5 @https://discuss.pytorch.org/t/about-normalization-using-pre-trained-vgg16-networks/23560/7 \"\"\" cnt = 0 # fst_moment = torch.empty(3) # snd_moment = torch.empty(3) fst_moment = np . zeros ( 3 ) snd_moment = np . zeros ( 3 ) for data in loader : if data_map is not None : data = data_map ( data ) data = np . array ([ t . numpy () for t in data ]) b , c , h , w = data . shape # data here is tuple... if loader batch > 1 nb_pixels = b * h * w # sum_ = torch.sum(data, dim=[0, 2, 3]) sum_ = data . sum ( axis = 0 ) . sum ( axis =- 1 ) . sum ( axis =- 1 ) # sum_of_square = torch.sum(data ** 2, dim=[0, 2, 3]) sum_of_square = ( data ** 2 ) . sum ( axis = 0 ) . sum ( axis =- 1 ) . sum ( axis =- 1 ) fst_moment = ( cnt * fst_moment + sum_ ) / ( cnt + nb_pixels ) snd_moment = ( cnt * snd_moment + sum_of_square ) / ( cnt + nb_pixels ) cnt += nb_pixels return fst_moment , np . sqrt ( snd_moment - fst_moment ** 2 ) reduce_dict ( input_dict , average = True ) \u00a4 Parameters: Name Type Description Default input_dict dict all the values will be reduced required average bool whether to do average or sum True Reduce the values in the dictionary from all processes so that all processes have the averaged results. Returns a dict with the same fields as input_dict, after reduction. Source code in kaggle_runner/utils/kernel_utils.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 def reduce_dict ( input_dict , average = True ): \"\"\" Args: input_dict (dict): all the values will be reduced average (bool): whether to do average or sum Reduce the values in the dictionary from all processes so that all processes have the averaged results. Returns a dict with the same fields as input_dict, after reduction. \"\"\" world_size = get_world_size () if world_size < 2 : return input_dict with torch . no_grad (): names = [] values = [] # sort the keys so that they are consistent across processes for k in sorted ( input_dict . keys ()): names . append ( k ) values . append ( input_dict [ k ]) values = torch . stack ( values , dim = 0 ) dist . all_reduce ( values ) if average : values /= world_size reduced_dict = { k : v for k , v in zip ( names , values )} return reduced_dict setup_for_distributed ( is_master ) \u00a4 This function disables printing when not in master process Source code in kaggle_runner/utils/kernel_utils.py 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 def setup_for_distributed ( is_master ): \"\"\" This function disables printing when not in master process \"\"\" import builtins as __builtin__ builtin_print = __builtin__ . print def print ( * args , ** kwargs ): force = kwargs . pop ( \"force\" , False ) if is_master or force : builtin_print ( * args , ** kwargs ) __builtin__ . print = print","title":"kernel_utils.py"},{"location":"kaggle_runner/utils/kernel_utils/#kaggle_runner.utils.kernel_utils","text":"","title":"kaggle_runner.utils.kernel_utils"},{"location":"kaggle_runner/utils/kernel_utils/#kaggle_runner.utils.kernel_utils.all_gather","text":"Run all_gather on arbitrary picklable data (not necessarily tensors) Parameters: Name Type Description Default data any picklable object required Returns: Type Description list[data] list of data gathered from each rank Source code in kaggle_runner/utils/kernel_utils.py 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 def all_gather ( data ): \"\"\" Run all_gather on arbitrary picklable data (not necessarily tensors) Args: data: any picklable object Returns: list[data]: list of data gathered from each rank \"\"\" world_size = get_world_size () if world_size == 1 : return [ data ] # serialized to a Tensor buffer = pickle . dumps ( data ) storage = torch . ByteStorage . from_buffer ( buffer ) tensor = torch . ByteTensor ( storage ) . to ( \"cuda\" ) # obtain Tensor size of each rank local_size = torch . tensor ([ tensor . numel ()], device = \"cuda\" ) size_list = [ torch . tensor ([ 0 ], device = \"cuda\" ) for _ in range ( world_size )] dist . all_gather ( size_list , local_size ) size_list = [ int ( size . item ()) for size in size_list ] max_size = max ( size_list ) # receiving Tensor from all ranks # we pad the tensor because torch all_gather does not support # gathering tensors of different shapes tensor_list = [] for _ in size_list : tensor_list . append ( torch . empty ( ( max_size ,), dtype = torch . uint8 , device = \"cuda\" )) if local_size != max_size : padding = torch . empty ( size = ( max_size - local_size ,), dtype = torch . uint8 , device = \"cuda\" ) tensor = torch . cat (( tensor , padding ), dim = 0 ) dist . all_gather ( tensor_list , tensor ) data_list = [] for size , tensor in zip ( size_list , tensor_list ): buffer = tensor . cpu () . numpy () . tobytes ()[: size ] data_list . append ( pickle . loads ( buffer )) return data_list","title":"all_gather()"},{"location":"kaggle_runner/utils/kernel_utils/#kaggle_runner.utils.kernel_utils.binary_crossentropy_with_focal","text":":param y_true: y_true :param y_pred: y_pred :param gamma: make easier ones weights down :param alpha: weight for positive classes. default to 1 - (true positive cnts / all cnts), alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice \u03b1 may be set by inverse class freqency or hyperparameter. :return: bce Reference: https://arxiv.org/pdf/1708.02002.pdf $$ FL(p_t) = -(1-p_t)^{\\gamma}log(p_t) $$ $$ p_t=p: if: y=1$$ $$ p_t=1-p: otherwise$$ Source code in kaggle_runner/utils/kernel_utils.py 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 def binary_crossentropy_with_focal ( y_true , y_pred , gamma = 1.0 , alpha = 0.5 , custom_weights_in_Y_true = True ): \"\"\" :param y_true: y_true :param y_pred: y_pred :param gamma: make easier ones weights down :param alpha: weight for positive classes. default to 1 - (true positive cnts / all cnts), alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice \u03b1 may be set by inverse class freqency or hyperparameter. :return: bce Reference: https://arxiv.org/pdf/1708.02002.pdf $$ FL(p_t) = -(1-p_t)^{\\gamma}log(p_t) $$ $$ p_t=p\\: if\\: y=1$$ $$ p_t=1-p\\: otherwise$$ \"\"\" # assert 0 <= alpha <= 1 and gamma >= 0 # hyper parameters, just use the one for binary? # alpha = 1. # maybe smaller one can help, as multi-class will make the # error larger # gamma = 1.5 # for our problem, try different gamma # for binary_crossentropy, the implementation is in tensorflow/tensorflow/python/keras/backend.py # bce = target * alpha* (1-output+epsilon())**gamma * math_ops.log(output + epsilon()) # bce += (1 - target) *(1-alpha)* (output+epsilon())**gamma * math_ops.log(1 - output + epsilon()) # return -bce # binary cross entropy eps = tf . keras . backend . epsilon () if custom_weights_in_Y_true : custom_weights = y_true [:, 1 : 2 ] y_true = y_true [:, : 1 ] if 1.0 - eps <= gamma <= 1.0 + eps : bce = alpha * math_ops . multiply ( 1.0 - y_pred , math_ops . multiply ( y_true , math_ops . log ( y_pred + eps )) ) bce += ( 1 - alpha ) * math_ops . multiply ( y_pred , math_ops . multiply ( ( 1.0 - y_true ), math_ops . log ( 1.0 - y_pred + eps )) ) elif 0.0 - eps <= gamma <= 0.0 + eps : bce = alpha * math_ops . multiply ( y_true , math_ops . log ( y_pred + eps )) bce += ( 1 - alpha ) * math_ops . multiply ( ( 1.0 - y_true ), math_ops . log ( 1.0 - y_pred + eps ) ) else : gamma_tensor = tf . broadcast_to ( tf . constant ( gamma ), tf . shape ( input = y_pred )) bce = alpha * math_ops . multiply ( math_ops . pow ( 1.0 - y_pred , gamma_tensor ), math_ops . multiply ( y_true , math_ops . log ( y_pred + eps )), ) bce += ( 1 - alpha ) * math_ops . multiply ( math_ops . pow ( y_pred , gamma_tensor ), math_ops . multiply ( ( 1.0 - y_true ), math_ops . log ( 1.0 - y_pred + eps )), ) if custom_weights_in_Y_true : return math_ops . multiply ( - bce , custom_weights ) else : return - bce","title":"binary_crossentropy_with_focal()"},{"location":"kaggle_runner/utils/kernel_utils/#kaggle_runner.utils.kernel_utils.binary_crossentropy_with_focal_seasoned","text":":param alpha:weight for positive classes loss . default to 1- true positive cnts / all cnts, alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice\u03b1may be set by inverse class freqency or hyperparameter. :param custom_weights_in_Y_true: :return: Source code in kaggle_runner/utils/kernel_utils.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def binary_crossentropy_with_focal_seasoned ( y_true , logit_pred , beta = 0.0 , gamma = 1.0 , alpha = 0.5 , custom_weights_in_Y_true = True ): \"\"\" :param alpha:weight for positive classes **loss**. default to 1- true positive cnts / all cnts, alpha range [0,1] for class 1 and 1-alpha for calss -1. In practice\u03b1may be set by inverse class freqency or hyperparameter. :param custom_weights_in_Y_true: :return: \"\"\" balanced = gamma * logit_pred + beta y_pred = math_ops . sigmoid ( balanced ) # only use gamma in this layer, easier to split out factor return binary_crossentropy_with_focal ( y_true , y_pred , gamma = 0 , alpha = alpha , custom_weights_in_Y_true = custom_weights_in_Y_true , )","title":"binary_crossentropy_with_focal_seasoned()"},{"location":"kaggle_runner/utils/kernel_utils/#kaggle_runner.utils.kernel_utils.get_obj_or_dump","text":"get_obj_or_dump will dump default obj to file if file not there, otherwise obj will be unpickled from file. If file not found, default value will returned. Source code in kaggle_runner/utils/kernel_utils.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 def get_obj_or_dump ( filename , fullpath = False , default = None ): \"\"\"get_obj_or_dump will dump default obj to file if file not there, otherwise obj will be unpickled from file. If file not found, default value will returned.\"\"\" if not fullpath : path = BIN_FOLDER + filename else : path = filename if os . path . isfile ( path ): logger . debug ( \"load \" + filename ) with open ( path , \"rb\" ) as f : return pickle . load ( f ) else : if default is not None : logger . debug ( \"dump :\" + filename ) dump_obj ( default , filename ) return default","title":"get_obj_or_dump()"},{"location":"kaggle_runner/utils/kernel_utils/#kaggle_runner.utils.kernel_utils.online_mean_and_sd","text":"Compute the mean and sd in an online fashion Var [ x ] = E [ X^2 ] - E ^ 2 [ X ] credit xwkuang5 @https://discuss.pytorch.org/t/about-normalization-using-pre-trained-vgg16-networks/23560/7 Source code in kaggle_runner/utils/kernel_utils.py 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 def online_mean_and_sd ( loader , data_map = None ): \"\"\"Compute the mean and sd in an online fashion Var[x] = E[X^2] - E^2[X] credit xwkuang5 @https://discuss.pytorch.org/t/about-normalization-using-pre-trained-vgg16-networks/23560/7 \"\"\" cnt = 0 # fst_moment = torch.empty(3) # snd_moment = torch.empty(3) fst_moment = np . zeros ( 3 ) snd_moment = np . zeros ( 3 ) for data in loader : if data_map is not None : data = data_map ( data ) data = np . array ([ t . numpy () for t in data ]) b , c , h , w = data . shape # data here is tuple... if loader batch > 1 nb_pixels = b * h * w # sum_ = torch.sum(data, dim=[0, 2, 3]) sum_ = data . sum ( axis = 0 ) . sum ( axis =- 1 ) . sum ( axis =- 1 ) # sum_of_square = torch.sum(data ** 2, dim=[0, 2, 3]) sum_of_square = ( data ** 2 ) . sum ( axis = 0 ) . sum ( axis =- 1 ) . sum ( axis =- 1 ) fst_moment = ( cnt * fst_moment + sum_ ) / ( cnt + nb_pixels ) snd_moment = ( cnt * snd_moment + sum_of_square ) / ( cnt + nb_pixels ) cnt += nb_pixels return fst_moment , np . sqrt ( snd_moment - fst_moment ** 2 )","title":"online_mean_and_sd()"},{"location":"kaggle_runner/utils/kernel_utils/#kaggle_runner.utils.kernel_utils.reduce_dict","text":"Parameters: Name Type Description Default input_dict dict all the values will be reduced required average bool whether to do average or sum True Reduce the values in the dictionary from all processes so that all processes have the averaged results. Returns a dict with the same fields as input_dict, after reduction. Source code in kaggle_runner/utils/kernel_utils.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 def reduce_dict ( input_dict , average = True ): \"\"\" Args: input_dict (dict): all the values will be reduced average (bool): whether to do average or sum Reduce the values in the dictionary from all processes so that all processes have the averaged results. Returns a dict with the same fields as input_dict, after reduction. \"\"\" world_size = get_world_size () if world_size < 2 : return input_dict with torch . no_grad (): names = [] values = [] # sort the keys so that they are consistent across processes for k in sorted ( input_dict . keys ()): names . append ( k ) values . append ( input_dict [ k ]) values = torch . stack ( values , dim = 0 ) dist . all_reduce ( values ) if average : values /= world_size reduced_dict = { k : v for k , v in zip ( names , values )} return reduced_dict","title":"reduce_dict()"},{"location":"kaggle_runner/utils/kernel_utils/#kaggle_runner.utils.kernel_utils.setup_for_distributed","text":"This function disables printing when not in master process Source code in kaggle_runner/utils/kernel_utils.py 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 def setup_for_distributed ( is_master ): \"\"\" This function disables printing when not in master process \"\"\" import builtins as __builtin__ builtin_print = __builtin__ . print def print ( * args , ** kwargs ): force = kwargs . pop ( \"force\" , False ) if is_master or force : builtin_print ( * args , ** kwargs ) __builtin__ . print = print","title":"setup_for_distributed()"},{"location":"kaggle_runner/utils/tpu/","text":"\u00a4","title":"tpu.py"},{"location":"kaggle_runner/utils/tpu/#kaggle_runner.utils.tpu","text":"","title":"kaggle_runner.utils.tpu"},{"location":"kaggle_runner/utils/utils/","text":"\u00a4 attach_data_collector ( logger , AMQPURL =< kaggle_runner . utils . utils . AMQPURL object at 0x7fd366563550 > ) \u00a4 Credits: https: // github.com/albertomr86/python-logging-rabbitmq !pip install python_logging_rabbitmq Source code in kaggle_runner/utils/utils.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def attach_data_collector ( logger , AMQPURL = AMQPURL ()): \"\"\" Credits: https: // github.com/albertomr86/python-logging-rabbitmq !pip install python_logging_rabbitmq \"\"\" rabbit = RabbitMQHandler ( host = AMQPURL . host , port = AMQPURL . port , username = AMQPURL . username , password = AMQPURL . passwd , exchange = \"logs_topic\" , connection_params = { \"virtual_host\" : AMQPURL . Vhost }, declare_exchange = True , ) # rabbit.connection_params[\"virtual_host\"] = self.AMQPURL.Vhost create # kernel and run rabbit . formatter . format = types . MethodType ( log_format , rabbit . formatter ) logger . addHandler ( rabbit ) return logger get_logger ( name = 'utils' , level = 10 ) \u00a4 get_logger just return basic logger, no AMQP included Source code in kaggle_runner/utils/utils.py 46 47 48 49 50 51 52 53 def get_logger ( name = \"utils\" , level = logging . DEBUG ): \"get_logger just return basic logger, no AMQP included\" FORMAT = \"[ %(levelname)s ] %(asctime)s : %(name)s : %(message)s \" logging . basicConfig ( format = FORMAT ) logger = logging . getLogger ( name ) logger . setLevel ( level ) return logger","title":"utils.py"},{"location":"kaggle_runner/utils/utils/#kaggle_runner.utils.utils","text":"","title":"kaggle_runner.utils.utils"},{"location":"kaggle_runner/utils/utils/#kaggle_runner.utils.utils.attach_data_collector","text":"Credits: https: // github.com/albertomr86/python-logging-rabbitmq !pip install python_logging_rabbitmq Source code in kaggle_runner/utils/utils.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def attach_data_collector ( logger , AMQPURL = AMQPURL ()): \"\"\" Credits: https: // github.com/albertomr86/python-logging-rabbitmq !pip install python_logging_rabbitmq \"\"\" rabbit = RabbitMQHandler ( host = AMQPURL . host , port = AMQPURL . port , username = AMQPURL . username , password = AMQPURL . passwd , exchange = \"logs_topic\" , connection_params = { \"virtual_host\" : AMQPURL . Vhost }, declare_exchange = True , ) # rabbit.connection_params[\"virtual_host\"] = self.AMQPURL.Vhost create # kernel and run rabbit . formatter . format = types . MethodType ( log_format , rabbit . formatter ) logger . addHandler ( rabbit ) return logger","title":"attach_data_collector()"},{"location":"kaggle_runner/utils/utils/#kaggle_runner.utils.utils.get_logger","text":"get_logger just return basic logger, no AMQP included Source code in kaggle_runner/utils/utils.py 46 47 48 49 50 51 52 53 def get_logger ( name = \"utils\" , level = logging . DEBUG ): \"get_logger just return basic logger, no AMQP included\" FORMAT = \"[ %(levelname)s ] %(asctime)s : %(name)s : %(message)s \" logging . basicConfig ( format = FORMAT ) logger = logging . getLogger ( name ) logger . setLevel ( level ) return logger","title":"get_logger()"},{"location":"kaggle_runner/utils/visualizer/","text":"\u00a4","title":"visualizer.py"},{"location":"kaggle_runner/utils/visualizer/#kaggle_runner.utils.visualizer","text":"","title":"kaggle_runner.utils.visualizer"},{"location":"kaggle_runner/utils/wrapper/","text":"\u00a4","title":"wrapper.py"},{"location":"kaggle_runner/utils/wrapper/#kaggle_runner.utils.wrapper","text":"","title":"kaggle_runner.utils.wrapper"}]}